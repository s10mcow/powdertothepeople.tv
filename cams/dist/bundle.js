!function(e){function t(e){delete installedChunks[e]}function r(e){var t=document.getElementsByTagName("head")[0],r=document.createElement("script");r.type="text/javascript",r.charset="utf-8",r.src=p.p+""+e+"."+_+".hot-update.js",t.appendChild(r)}function n(e){return e=e||1e4,new Promise(function(t,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var n=new XMLHttpRequest,o=p.p+""+_+".hot-update.json";n.open("GET",o,!0),n.timeout=e,n.send(null)}catch(e){return r(e)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)r(new Error("Manifest request to "+o+" timed out."));else if(404===n.status)t();else if(200!==n.status&&304!==n.status)r(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(n.responseText)}catch(e){return void r(e)}t(e)}}})}function o(e){var t=P[e];if(!t)return p;var r=function(r){return t.hot.active?(P[r]?P[r].parents.indexOf(e)<0&&P[r].parents.push(e):(w=[e],m=r),t.children.indexOf(r)<0&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),w=[]),p(r)};for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&"e"!==n&&Object.defineProperty(r,n,function(e){return{configurable:!0,enumerable:!0,get:function(){return p[e]},set:function(t){p[e]=t}}}(n));return r.e=function(e){function t(){j--,"prepare"===R&&(A[e]||c(e),0===j&&0===k&&d())}return"ready"===R&&a("prepare"),j++,p.e(e).then(t,function(e){throw t(),e})},r}function i(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:m!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:l,apply:f,status:function(e){if(!e)return R;C.push(e)},addStatusHandler:function(e){C.push(e)},removeStatusHandler:function(e){var t=C.indexOf(e);t>=0&&C.splice(t,1)},data:T[e]};return m=void 0,t}function a(e){R=e;for(var t=0;t<C.length;t++)C[t].call(null,e)}function s(e){return+e+""===e?+e:e}function l(e){if("idle"!==R)throw new Error("check() is only allowed in idle status");return b=e,a("check"),n(E).then(function(e){if(!e)return a("idle"),null;x={},A={},O=e.c,v=e.h,a("prepare");var t=new Promise(function(e,t){y={resolve:e,reject:t}});g={};return c(0),"prepare"===R&&0===j&&0===k&&d(),t})}function u(e,t){if(O[e]&&x[e]){x[e]=!1;for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(g[r]=t[r]);0==--k&&0===j&&d()}}function c(e){O[e]?(x[e]=!0,k++,r(e)):A[e]=!0}function d(){a("ready");var e=y;if(y=null,e)if(b)Promise.resolve().then(function(){return f(b)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var r in g)Object.prototype.hasOwnProperty.call(g,r)&&t.push(s(r));e.resolve(t)}}function f(r){function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];e.indexOf(n)<0&&e.push(n)}}if("ready"!==R)throw new Error("apply() is only allowed in ready status");r=r||{};var o,i,l,u,c,d={},f=[],h={},m=function(){console.warn("[HMR] unexpected require("+b.moduleId+") to disposed module")};for(var y in g)if(Object.prototype.hasOwnProperty.call(g,y)){c=s(y);var b;b=g[y]?function(e){for(var t=[e],r={},o=t.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var i=o.pop(),a=i.id,s=i.chain;if((u=P[a])&&!u.hot._selfAccepted){if(u.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(u.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var l=0;l<u.parents.length;l++){var c=u.parents[l],d=P[c];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([c]),moduleId:a,parentId:c};t.indexOf(c)>=0||(d.hot._acceptedDependencies[a]?(r[c]||(r[c]=[]),n(r[c],[a])):(delete r[c],t.push(c),o.push({chain:s.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}(c):{type:"disposed",moduleId:y};var E=!1,S=!1,C=!1,k="";switch(b.chain&&(k="\nUpdate propagation: "+b.chain.join(" -> ")),b.type){case"self-declined":r.onDeclined&&r.onDeclined(b),r.ignoreDeclined||(E=new Error("Aborted because of self decline: "+b.moduleId+k));break;case"declined":r.onDeclined&&r.onDeclined(b),r.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+b.moduleId+" in "+b.parentId+k));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(b),r.ignoreUnaccepted||(E=new Error("Aborted because "+c+" is not accepted"+k));break;case"accepted":r.onAccepted&&r.onAccepted(b),S=!0;break;case"disposed":r.onDisposed&&r.onDisposed(b),C=!0;break;default:throw new Error("Unexception type "+b.type)}if(E)return a("abort"),Promise.reject(E);if(S){h[c]=g[c],n(f,b.outdatedModules);for(c in b.outdatedDependencies)Object.prototype.hasOwnProperty.call(b.outdatedDependencies,c)&&(d[c]||(d[c]=[]),n(d[c],b.outdatedDependencies[c]))}C&&(n(f,[b.moduleId]),h[c]=m)}var j=[];for(i=0;i<f.length;i++)c=f[i],P[c]&&P[c].hot._selfAccepted&&j.push({module:c,errorHandler:P[c].hot._selfAccepted});a("dispose"),Object.keys(O).forEach(function(e){!1===O[e]&&t(e)});for(var A,x=f.slice();x.length>0;)if(c=x.pop(),u=P[c]){var L={},D=u.hot._disposeHandlers;for(l=0;l<D.length;l++)(o=D[l])(L);for(T[c]=L,u.hot.active=!1,delete P[c],delete d[c],l=0;l<u.children.length;l++){var I=P[u.children[l]];I&&((A=I.parents.indexOf(c))>=0&&I.parents.splice(A,1))}}var N,M;for(c in d)if(Object.prototype.hasOwnProperty.call(d,c)&&(u=P[c]))for(M=d[c],l=0;l<M.length;l++)N=M[l],(A=u.children.indexOf(N))>=0&&u.children.splice(A,1);a("apply"),_=v;for(c in h)Object.prototype.hasOwnProperty.call(h,c)&&(e[c]=h[c]);var F=null;for(c in d)if(Object.prototype.hasOwnProperty.call(d,c)&&(u=P[c])){M=d[c];var U=[];for(i=0;i<M.length;i++)if(N=M[i],o=u.hot._acceptedDependencies[N]){if(U.indexOf(o)>=0)continue;U.push(o)}for(i=0;i<U.length;i++){o=U[i];try{o(M)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:c,dependencyId:M[i],error:e}),r.ignoreErrored||F||(F=e)}}}for(i=0;i<j.length;i++){var B=j[i];c=B.module,w=[c];try{p(c)}catch(e){if("function"==typeof B.errorHandler)try{B.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:t,orginalError:e,originalError:e}),r.ignoreErrored||F||(F=t),F||(F=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:c,error:e}),r.ignoreErrored||F||(F=e)}}return F?(a("fail"),Promise.reject(F)):(a("idle"),new Promise(function(e){e(f)}))}function p(t){if(P[t])return P[t].exports;var r=P[t]={i:t,l:!1,exports:{},hot:i(t),parents:(S=w,w=[],S),children:[]};return e[t].call(r.exports,r,r.exports,o(t)),r.l=!0,r.exports}var h=this.webpackHotUpdate;this.webpackHotUpdate=function(e,t){u(e,t),h&&h(e,t)};var m,y,g,v,b=!0,_="0576c907c1924073c358",E=1e4,T={},w=[],S=[],C=[],R="idle",k=0,j=0,A={},x={},O={},P={};p.m=e,p.c=P,p.d=function(e,t,r){p.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},p.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return p.d(t,"a",t),t},p.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},p.p="/",p.h=function(){return _},o(0)(p.s=0)}({"./cams/App.js":/*!*********************!*\
  !*** ./cams/App.js ***!
  \*********************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(/*! babel-runtime/core-js/object/get-prototype-of */"./node_modules/babel-runtime/core-js/object/get-prototype-of.js"),i=n(o),a=r(/*! babel-runtime/helpers/classCallCheck */"./node_modules/babel-runtime/helpers/classCallCheck.js"),s=n(a),l=r(/*! babel-runtime/helpers/createClass */"./node_modules/babel-runtime/helpers/createClass.js"),u=n(l),c=r(/*! babel-runtime/helpers/possibleConstructorReturn */"./node_modules/babel-runtime/helpers/possibleConstructorReturn.js"),d=n(c),f=r(/*! babel-runtime/helpers/inherits */"./node_modules/babel-runtime/helpers/inherits.js"),p=n(f),h=r(/*! react */"./node_modules/react/index.js"),m=n(h),y=r(/*! ./components/Layout */"./cams/components/Layout.js"),g=n(y),v=r(/*! ./containers/PlayersContainer */"./cams/containers/PlayersContainer.js"),b=n(v),_=function(e){function t(){return(0,s.default)(this,t),(0,d.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,p.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){return m.default.createElement(g.default,null,m.default.createElement("header",{className:"page__header"},m.default.createElement("h1",null,"Portugal Beach Cams")),m.default.createElement(b.default,null))}}]),t}(h.Component);t.default=_},"./cams/actions/index.js":/*!*******************************!*\
  !*** ./cams/actions/index.js ***!
  \*******************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.setVisibilityFilter=function(e){return{type:"SET_VISIBILITY_FILTER",filter:e}},t.setNewCamera=function(e){return{type:"SET_NEW_CAMERA",camera:e}},t.addNewCamera=function(){return{type:"ADD_NEW_CAMERA",url:"arrifana",name:"Arrifana"}},t.deleteCamera=function(e){return{type:"DELETE_CAMERA",camera:e}}},"./cams/beaches.json":/*!***************************!*\
  !*** ./cams/beaches.json ***!
  \***************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports={beaches:[{name:"Luz",url:"luz"},{name:"Lagos",url:"meiapraia"},{name:"Arrifana",url:"arrifana"},{name:"Amoreira",url:"bcamoreira"},{name:"Zambujeira do Mar",url:"zambujeira"},{name:"São Torpes",url:"saotorpes"}]}},"./cams/components/Layout.js":/*!***********************************!*\
  !*** ./cams/components/Layout.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){var t=e.children;return i.default.createElement("div",{className:"page"},t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n;var o=r(/*! react */"./node_modules/react/index.js"),i=function(e){return e&&e.__esModule?e:{default:e}}(o)},"./cams/components/Player.js":/*!***********************************!*\
  !*** ./cams/components/Player.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(/*! babel-runtime/core-js/object/get-prototype-of */"./node_modules/babel-runtime/core-js/object/get-prototype-of.js"),i=n(o),a=r(/*! babel-runtime/helpers/classCallCheck */"./node_modules/babel-runtime/helpers/classCallCheck.js"),s=n(a),l=r(/*! babel-runtime/helpers/createClass */"./node_modules/babel-runtime/helpers/createClass.js"),u=n(l),c=r(/*! babel-runtime/helpers/possibleConstructorReturn */"./node_modules/babel-runtime/helpers/possibleConstructorReturn.js"),d=n(c),f=r(/*! babel-runtime/helpers/inherits */"./node_modules/babel-runtime/helpers/inherits.js"),p=n(f),h=r(/*! react */"./node_modules/react/index.js"),m=n(h),y=r(/*! hls.js */"./node_modules/hls.js/dist/hls.js"),g=n(y),v=r(/*! ../utils/utils */"./cams/utils/utils.js"),b=(n(v),r(/*! prop-types */"./node_modules/prop-types/index.js")),_=n(b),E=r(/*! react-dom */"./node_modules/react-dom/index.js"),T=(n(E),r(/*! muicss/lib/react/option */"./node_modules/muicss/lib/react/option.js")),w=n(T),S=r(/*! muicss/lib/react/select */"./node_modules/muicss/lib/react/select.js"),C=n(S),R=r(/*! muicss/lib/react/button */"./node_modules/muicss/lib/react/button.js"),k=n(R),j=function(e){function t(e){(0,s.default)(this,t);var r=(0,d.default)(this,(t.__proto__||(0,i.default)(t)).call(this,e));return r.state={play:!0,hls:!1,rerender:!1},r}return(0,p.default)(t,e),(0,u.default)(t,[{key:"setupPlayer",value:function(){var e=this;if(g.default.isSupported()){var t=new g.default;t.loadSource("https://video-auth1.iol.pt/beachcam/"+this.props.url+"/playlist.m3u8"),t.attachMedia(this.refs.video),t.on(g.default.Events.MANIFEST_PARSED,function(){return e.refs.video.play()}),this.setState({hls:t})}else this.refs.video.src="https://video-auth1.iol.pt/beachcam/"+this.props.url+"/playlist.m3u8",this.refs.video.play();this.setState({rerender:!1})}},{key:"pause",value:function(){this.setState({play:!1}),this.state.hls.stopLoad()}},{key:"play",value:function(){var e=this;this.setState({play:!0}),this.state.hls.startLoad(0),this.state.hls.on(g.default.Events.MANIFEST_PARSED,function(){return e.refs.video.play()})}},{key:"componentDidMount",value:function(){this.setupPlayer()}},{key:"componentWillUpdate",value:function(){this.refs.video.pause()}},{key:"componentDidUpdate",value:function(){this.setupPlayer()}},{key:"shouldComponentUpdate",value:function(e,t){return e.url!==this.props.url}},{key:"render",value:function(){var e=this,t=m.default.createElement("div",{className:"player__footer__uncollapsed"},m.default.createElement(C.default,{value:this.props.url,onChange:function(t){return e.props.onClick({index:e.props.index,url:t.target.value})}},this.props.beachNames.map(function(e,t){return m.default.createElement(w.default,{key:t,value:e.url,label:e.name})})));this.state.play?m.default.createElement(k.default,{className:"player__toggle-play",variant:"fab",color:"pimary",onClick:function(){return e.pause()}},m.default.createElement("i",{className:"fa fa-pause"})):m.default.createElement(k.default,{className:"player__toggle-play",variant:"fab",color:"pimary",onClick:function(){return e.play()}},m.default.createElement("i",{className:"fa fa-play"}));return m.default.createElement("article",{className:"player"},m.default.createElement("main",{className:"player__content"},m.default.createElement(k.default,{className:"player__delete",variant:"fab",color:"danger",onClick:function(){return e.props.deleteCamera({index:e.props.index})}},"×"),m.default.createElement("video",{ref:"video",autoPlay:!0,controls:!0})),m.default.createElement("footer",{className:"player__footer"},t))}}]),t}(h.Component);t.default=j,j.propTypes={url:_.default.string.isRequired,name:_.default.string.isRequired,onClick:_.default.func.isRequired}},"./cams/components/Players.js":/*!************************************!*\
  !*** ./cams/components/Players.js ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(/*! babel-runtime/core-js/object/get-prototype-of */"./node_modules/babel-runtime/core-js/object/get-prototype-of.js"),i=n(o),a=r(/*! babel-runtime/helpers/classCallCheck */"./node_modules/babel-runtime/helpers/classCallCheck.js"),s=n(a),l=r(/*! babel-runtime/helpers/createClass */"./node_modules/babel-runtime/helpers/createClass.js"),u=n(l),c=r(/*! babel-runtime/helpers/possibleConstructorReturn */"./node_modules/babel-runtime/helpers/possibleConstructorReturn.js"),d=n(c),f=r(/*! babel-runtime/helpers/inherits */"./node_modules/babel-runtime/helpers/inherits.js"),p=n(f),h=r(/*! react */"./node_modules/react/index.js"),m=n(h),y=r(/*! ./Player */"./cams/components/Player.js"),g=n(y),v=r(/*! muicss/lib/react/button */"./node_modules/muicss/lib/react/button.js"),b=n(v),_=function(e){function t(e){return(0,s.default)(this,t),(0,d.default)(this,(t.__proto__||(0,i.default)(t)).call(this,e))}return(0,p.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e=this;return m.default.createElement("div",{className:"players__wrapper"},m.default.createElement("section",{className:"players"},this.props.cameras.map(function(t,r){return m.default.createElement(g.default,{key:r,index:r,name:t.name,url:t.url,beachNames:e.props.beachNames,deleteCamera:e.props.deleteCamera,onClick:e.props.onClick})})),m.default.createElement(b.default,{color:"primary",onClick:this.props.addNewCamera},"Add Camera"),m.default.createElement("div",{id:"wg_target_div_512670_72189470"}))}}]),t}(h.Component);t.default=_},"./cams/containers/PlayersContainer.js":/*!*********************************************!*\
  !*** ./cams/containers/PlayersContainer.js ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(/*! babel-runtime/core-js/object/keys */"./node_modules/babel-runtime/core-js/object/keys.js"),i=n(o),a=r(/*! react-redux */"./node_modules/react-redux/es/index.js"),s=r(/*! ../components/Players */"./cams/components/Players.js"),l=n(s),u=r(/*! ../actions */"./cams/actions/index.js"),c=r(/*! ../beaches.json */"./cams/beaches.json"),d=function(e){return{cameras:e.cameras,beachNames:(0,i.default)(c.beaches).reduce(function(e,t){return e.concat(c.beaches[t])},[]).sort(function(e,t){return e.name>t.name?1:e.name<t.name?-1:0})}},f=function(e){return{onClick:function(t){return e((0,u.setNewCamera)(t))},addNewCamera:function(){return e((0,u.addNewCamera)())},deleteCamera:function(t){return e((0,u.deleteCamera)(t))}}},p=(0,a.connect)(d,f)(l.default);t.default=p},"./cams/index.js":/*!***********************!*\
  !*** ./cams/index.js ***!
  \***********************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var o=r(/*! ./styles.scss */"./cams/styles.scss"),i=(function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);t.default=e}(o),r(/*! react-hot-loader */"./node_modules/react-hot-loader/index.js")),a=r(/*! react */"./node_modules/react/index.js"),s=n(a),l=r(/*! react-dom */"./node_modules/react-dom/index.js"),u=n(l),c=r(/*! ./App */"./cams/App.js"),d=n(c),f=r(/*! react-redux */"./node_modules/react-redux/es/index.js"),p=r(/*! redux */"./node_modules/redux/es/index.js"),h=r(/*! ./reducers */"./cams/reducers/index.js"),m=n(h),y=document.getElementById("root"),g=(0,p.createStore)(m.default),v=function(e){return u.default.render(s.default.createElement(f.Provider,{store:g},s.default.createElement(i.AppContainer,null,s.default.createElement(e,null))),y)};"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js"),v(d.default),e.hot.accept(/*! ./App */"./cams/App.js",function(){return v(d.default)}),"https:"!=location.protocol&&(location.href="https:"+window.location.href.substring(window.location.protocol.length))},"./cams/reducers/cameras.js":/*!**********************************!*\
  !*** ./cams/reducers/cameras.js ***!
  \**********************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(/*! babel-runtime/helpers/toConsumableArray */"./node_modules/babel-runtime/helpers/toConsumableArray.js"),o=function(e){return e&&e.__esModule?e:{default:e}}(n),i=r(/*! ../beaches.json */"./cams/beaches.json"),a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i.beaches.slice(2,4),t=arguments[1];switch(t.type){case"SET_NEW_CAMERA":var r=[].concat((0,o.default)(e));return r[t.camera.index]=i.beaches.filter(function(e){return e.url===t.camera.url}).reduce(function(e,t){return t},{}),r;case"ADD_NEW_CAMERA":return[].concat((0,o.default)(e),[{url:t.url,name:t.name}]);case"DELETE_CAMERA":return e.filter(function(e,r){return r!==t.camera.index});default:return e}};t.default=a},"./cams/reducers/index.js":/*!********************************!*\
  !*** ./cams/reducers/index.js ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(/*! redux */"./node_modules/redux/es/index.js"),i=r(/*! ./visibilityFilter */"./cams/reducers/visibilityFilter.js"),a=n(i),s=r(/*! ./cameras */"./cams/reducers/cameras.js"),l=n(s),u=(0,o.combineReducers)({visibilityFilter:a.default,cameras:l.default});t.default=u},"./cams/reducers/visibilityFilter.js":/*!*******************************************!*\
  !*** ./cams/reducers/visibilityFilter.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"SHOW_ALL",t=arguments[1];switch(t.type){case"SET_VISIBILITY_FILTER":return t.filter;default:return e}};t.default=n},"./cams/styles.scss":/*!**************************!*\
  !*** ./cams/styles.scss ***!
  \**************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! !../node_modules/css-loader?importLoaders=1!../node_modules/sass-loader/lib/loader.js!./styles.scss */"./node_modules/css-loader/index.js?importLoaders=1!./node_modules/sass-loader/lib/loader.js!./cams/styles.scss");"string"==typeof n&&(n=[[e.i,n,""]]);var o={};o.transform=void 0;var i=r(/*! ../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(n,o);n.locals&&(e.exports=n.locals),n.locals||e.hot.accept(/*! !../node_modules/css-loader?importLoaders=1!../node_modules/sass-loader/lib/loader.js!./styles.scss */"./node_modules/css-loader/index.js?importLoaders=1!./node_modules/sass-loader/lib/loader.js!./cams/styles.scss",function(){var t=r(/*! !../node_modules/css-loader?importLoaders=1!../node_modules/sass-loader/lib/loader.js!./styles.scss */"./node_modules/css-loader/index.js?importLoaders=1!./node_modules/sass-loader/lib/loader.js!./cams/styles.scss");"string"==typeof t&&(t=[[e.i,t,""]]),i(t)}),e.hot.dispose(function(){i()})},"./cams/utils/utils.js":/*!*****************************!*\
  !*** ./cams/utils/utils.js ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n={};n.isMobile=function(){var e=!1;return function(t){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0)}(navigator.userAgent||navigator.vendor||window.opera),e},e.exports=n},"./node_modules/babel-runtime/core-js/array/from.js":/*!**********************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/array/from.js ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports={default:r(/*! core-js/library/fn/array/from */"./node_modules/core-js/library/fn/array/from.js"),__esModule:!0}},"./node_modules/babel-runtime/core-js/object/create.js":/*!*************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/create.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports={default:r(/*! core-js/library/fn/object/create */"./node_modules/core-js/library/fn/object/create.js"),__esModule:!0}},"./node_modules/babel-runtime/core-js/object/define-property.js":/*!**********************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/define-property.js ***!
  \**********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports={default:r(/*! core-js/library/fn/object/define-property */"./node_modules/core-js/library/fn/object/define-property.js"),__esModule:!0}},"./node_modules/babel-runtime/core-js/object/get-prototype-of.js":/*!***********************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/get-prototype-of.js ***!
  \***********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports={default:r(/*! core-js/library/fn/object/get-prototype-of */"./node_modules/core-js/library/fn/object/get-prototype-of.js"),__esModule:!0}},"./node_modules/babel-runtime/core-js/object/keys.js":/*!***********************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/keys.js ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports={default:r(/*! core-js/library/fn/object/keys */"./node_modules/core-js/library/fn/object/keys.js"),__esModule:!0}},"./node_modules/babel-runtime/core-js/object/set-prototype-of.js":/*!***********************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/set-prototype-of.js ***!
  \***********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports={default:r(/*! core-js/library/fn/object/set-prototype-of */"./node_modules/core-js/library/fn/object/set-prototype-of.js"),__esModule:!0}},"./node_modules/babel-runtime/core-js/symbol.js":/*!******************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/symbol.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports={default:r(/*! core-js/library/fn/symbol */"./node_modules/core-js/library/fn/symbol/index.js"),__esModule:!0}},"./node_modules/babel-runtime/core-js/symbol/iterator.js":/*!***************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/symbol/iterator.js ***!
  \***************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports={default:r(/*! core-js/library/fn/symbol/iterator */"./node_modules/core-js/library/fn/symbol/iterator.js"),__esModule:!0}},"./node_modules/babel-runtime/helpers/classCallCheck.js":/*!**************************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/classCallCheck.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},"./node_modules/babel-runtime/helpers/createClass.js":/*!***********************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/createClass.js ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";t.__esModule=!0;var n=r(/*! ../core-js/object/define-property */"./node_modules/babel-runtime/core-js/object/define-property.js"),o=function(e){return e&&e.__esModule?e:{default:e}}(n);t.default=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,o.default)(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},"./node_modules/babel-runtime/helpers/inherits.js":/*!********************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/inherits.js ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var o=r(/*! ../core-js/object/set-prototype-of */"./node_modules/babel-runtime/core-js/object/set-prototype-of.js"),i=n(o),a=r(/*! ../core-js/object/create */"./node_modules/babel-runtime/core-js/object/create.js"),s=n(a),l=r(/*! ../helpers/typeof */"./node_modules/babel-runtime/helpers/typeof.js"),u=n(l);t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,u.default)(t)));e.prototype=(0,s.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i.default?(0,i.default)(e,t):e.__proto__=t)}},"./node_modules/babel-runtime/helpers/possibleConstructorReturn.js":/*!*************************************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/possibleConstructorReturn.js ***!
  \*************************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";t.__esModule=!0;var n=r(/*! ../helpers/typeof */"./node_modules/babel-runtime/helpers/typeof.js"),o=function(e){return e&&e.__esModule?e:{default:e}}(n);t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,o.default)(t))&&"function"!=typeof t?e:t}},"./node_modules/babel-runtime/helpers/toConsumableArray.js":/*!*****************************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/toConsumableArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";t.__esModule=!0;var n=r(/*! ../core-js/array/from */"./node_modules/babel-runtime/core-js/array/from.js"),o=function(e){return e&&e.__esModule?e:{default:e}}(n);t.default=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return(0,o.default)(e)}},"./node_modules/babel-runtime/helpers/typeof.js":/*!******************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/typeof.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var o=r(/*! ../core-js/symbol/iterator */"./node_modules/babel-runtime/core-js/symbol/iterator.js"),i=n(o),a=r(/*! ../core-js/symbol */"./node_modules/babel-runtime/core-js/symbol.js"),s=n(a),l="function"==typeof s.default&&"symbol"==typeof i.default?function(e){return typeof e}:function(e){return e&&"function"==typeof s.default&&e.constructor===s.default&&e!==s.default.prototype?"symbol":typeof e};t.default="function"==typeof s.default&&"symbol"===l(i.default)?function(e){return void 0===e?"undefined":l(e)}:function(e){return e&&"function"==typeof s.default&&e.constructor===s.default&&e!==s.default.prototype?"symbol":void 0===e?"undefined":l(e)}},"./node_modules/core-js/library/fn/array/from.js":/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/fn/array/from.js ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ../../modules/es6.string.iterator */"./node_modules/core-js/library/modules/es6.string.iterator.js"),r(/*! ../../modules/es6.array.from */"./node_modules/core-js/library/modules/es6.array.from.js"),e.exports=r(/*! ../../modules/_core */"./node_modules/core-js/library/modules/_core.js").Array.from},"./node_modules/core-js/library/fn/object/create.js":/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/create.js ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ../../modules/es6.object.create */"./node_modules/core-js/library/modules/es6.object.create.js");var n=r(/*! ../../modules/_core */"./node_modules/core-js/library/modules/_core.js").Object;e.exports=function(e,t){return n.create(e,t)}},"./node_modules/core-js/library/fn/object/define-property.js":/*!*******************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/define-property.js ***!
  \*******************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ../../modules/es6.object.define-property */"./node_modules/core-js/library/modules/es6.object.define-property.js");var n=r(/*! ../../modules/_core */"./node_modules/core-js/library/modules/_core.js").Object;e.exports=function(e,t,r){return n.defineProperty(e,t,r)}},"./node_modules/core-js/library/fn/object/get-prototype-of.js":/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/get-prototype-of.js ***!
  \********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ../../modules/es6.object.get-prototype-of */"./node_modules/core-js/library/modules/es6.object.get-prototype-of.js"),e.exports=r(/*! ../../modules/_core */"./node_modules/core-js/library/modules/_core.js").Object.getPrototypeOf},"./node_modules/core-js/library/fn/object/keys.js":/*!********************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/keys.js ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ../../modules/es6.object.keys */"./node_modules/core-js/library/modules/es6.object.keys.js"),e.exports=r(/*! ../../modules/_core */"./node_modules/core-js/library/modules/_core.js").Object.keys},"./node_modules/core-js/library/fn/object/set-prototype-of.js":/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/set-prototype-of.js ***!
  \********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ../../modules/es6.object.set-prototype-of */"./node_modules/core-js/library/modules/es6.object.set-prototype-of.js"),e.exports=r(/*! ../../modules/_core */"./node_modules/core-js/library/modules/_core.js").Object.setPrototypeOf},"./node_modules/core-js/library/fn/symbol/index.js":/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/fn/symbol/index.js ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ../../modules/es6.symbol */"./node_modules/core-js/library/modules/es6.symbol.js"),r(/*! ../../modules/es6.object.to-string */"./node_modules/core-js/library/modules/es6.object.to-string.js"),r(/*! ../../modules/es7.symbol.async-iterator */"./node_modules/core-js/library/modules/es7.symbol.async-iterator.js"),r(/*! ../../modules/es7.symbol.observable */"./node_modules/core-js/library/modules/es7.symbol.observable.js"),e.exports=r(/*! ../../modules/_core */"./node_modules/core-js/library/modules/_core.js").Symbol},"./node_modules/core-js/library/fn/symbol/iterator.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/fn/symbol/iterator.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ../../modules/es6.string.iterator */"./node_modules/core-js/library/modules/es6.string.iterator.js"),r(/*! ../../modules/web.dom.iterable */"./node_modules/core-js/library/modules/web.dom.iterable.js"),e.exports=r(/*! ../../modules/_wks-ext */"./node_modules/core-js/library/modules/_wks-ext.js").f("iterator")},"./node_modules/core-js/library/modules/_a-function.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_a-function.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},"./node_modules/core-js/library/modules/_add-to-unscopables.js":/*!*********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_add-to-unscopables.js ***!
  \*********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(){}},"./node_modules/core-js/library/modules/_an-object.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_an-object.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_is-object */"./node_modules/core-js/library/modules/_is-object.js");e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},"./node_modules/core-js/library/modules/_array-includes.js":/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_array-includes.js ***!
  \*****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_to-iobject */"./node_modules/core-js/library/modules/_to-iobject.js"),o=r(/*! ./_to-length */"./node_modules/core-js/library/modules/_to-length.js"),i=r(/*! ./_to-absolute-index */"./node_modules/core-js/library/modules/_to-absolute-index.js");e.exports=function(e){return function(t,r,a){var s,l=n(t),u=o(l.length),c=i(a,u);if(e&&r!=r){for(;u>c;)if((s=l[c++])!=s)return!0}else for(;u>c;c++)if((e||c in l)&&l[c]===r)return e||c||0;return!e&&-1}}},"./node_modules/core-js/library/modules/_classof.js":/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_classof.js ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_cof */"./node_modules/core-js/library/modules/_cof.js"),o=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")("toStringTag"),i="Arguments"==n(function(){return arguments}()),a=function(e,t){try{return e[t]}catch(e){}};e.exports=function(e){var t,r,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=a(t=Object(e),o))?r:i?n(t):"Object"==(s=n(t))&&"function"==typeof t.callee?"Arguments":s}},"./node_modules/core-js/library/modules/_cof.js":/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_cof.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},"./node_modules/core-js/library/modules/_core.js":/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_core.js ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){var r=e.exports={version:"2.5.1"};"number"==typeof __e&&(__e=r)},"./node_modules/core-js/library/modules/_create-property.js":/*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_create-property.js ***!
  \******************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! ./_object-dp */"./node_modules/core-js/library/modules/_object-dp.js"),o=r(/*! ./_property-desc */"./node_modules/core-js/library/modules/_property-desc.js");e.exports=function(e,t,r){t in e?n.f(e,t,o(0,r)):e[t]=r}},"./node_modules/core-js/library/modules/_ctx.js":/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ctx.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_a-function */"./node_modules/core-js/library/modules/_a-function.js");e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},"./node_modules/core-js/library/modules/_defined.js":/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_defined.js ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},"./node_modules/core-js/library/modules/_descriptors.js":/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_descriptors.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports=!r(/*! ./_fails */"./node_modules/core-js/library/modules/_fails.js")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},"./node_modules/core-js/library/modules/_dom-create.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_dom-create.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_is-object */"./node_modules/core-js/library/modules/_is-object.js"),o=r(/*! ./_global */"./node_modules/core-js/library/modules/_global.js").document,i=n(o)&&n(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},"./node_modules/core-js/library/modules/_enum-bug-keys.js":/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_enum-bug-keys.js ***!
  \****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},"./node_modules/core-js/library/modules/_enum-keys.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_enum-keys.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_object-keys */"./node_modules/core-js/library/modules/_object-keys.js"),o=r(/*! ./_object-gops */"./node_modules/core-js/library/modules/_object-gops.js"),i=r(/*! ./_object-pie */"./node_modules/core-js/library/modules/_object-pie.js");e.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,s=r(e),l=i.f,u=0;s.length>u;)l.call(e,a=s[u++])&&t.push(a);return t}},"./node_modules/core-js/library/modules/_export.js":/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_export.js ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_global */"./node_modules/core-js/library/modules/_global.js"),o=r(/*! ./_core */"./node_modules/core-js/library/modules/_core.js"),i=r(/*! ./_ctx */"./node_modules/core-js/library/modules/_ctx.js"),a=r(/*! ./_hide */"./node_modules/core-js/library/modules/_hide.js"),s=function(e,t,r){var l,u,c,d=e&s.F,f=e&s.G,p=e&s.S,h=e&s.P,m=e&s.B,y=e&s.W,g=f?o:o[t]||(o[t]={}),v=g.prototype,b=f?n:p?n[t]:(n[t]||{}).prototype;f&&(r=t);for(l in r)(u=!d&&b&&void 0!==b[l])&&l in g||(c=u?b[l]:r[l],g[l]=f&&"function"!=typeof b[l]?r[l]:m&&u?i(c,n):y&&b[l]==c?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(c):h&&"function"==typeof c?i(Function.call,c):c,h&&((g.virtual||(g.virtual={}))[l]=c,e&s.R&&v&&!v[l]&&a(v,l,c)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},"./node_modules/core-js/library/modules/_fails.js":/*!********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_fails.js ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},"./node_modules/core-js/library/modules/_global.js":/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_global.js ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},"./node_modules/core-js/library/modules/_has.js":/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_has.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},"./node_modules/core-js/library/modules/_hide.js":/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_hide.js ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_object-dp */"./node_modules/core-js/library/modules/_object-dp.js"),o=r(/*! ./_property-desc */"./node_modules/core-js/library/modules/_property-desc.js");e.exports=r(/*! ./_descriptors */"./node_modules/core-js/library/modules/_descriptors.js")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},"./node_modules/core-js/library/modules/_html.js":/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_html.js ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_global */"./node_modules/core-js/library/modules/_global.js").document;e.exports=n&&n.documentElement},"./node_modules/core-js/library/modules/_ie8-dom-define.js":/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ie8-dom-define.js ***!
  \*****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports=!r(/*! ./_descriptors */"./node_modules/core-js/library/modules/_descriptors.js")&&!r(/*! ./_fails */"./node_modules/core-js/library/modules/_fails.js")(function(){/*! ./_dom-create */
return 7!=Object.defineProperty(r("./node_modules/core-js/library/modules/_dom-create.js")("div"),"a",{get:function(){return 7}}).a})},"./node_modules/core-js/library/modules/_iobject.js":/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iobject.js ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_cof */"./node_modules/core-js/library/modules/_cof.js");e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},"./node_modules/core-js/library/modules/_is-array-iter.js":/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-array-iter.js ***!
  \****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_iterators */"./node_modules/core-js/library/modules/_iterators.js"),o=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},"./node_modules/core-js/library/modules/_is-array.js":/*!***********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-array.js ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_cof */"./node_modules/core-js/library/modules/_cof.js");e.exports=Array.isArray||function(e){return"Array"==n(e)}},"./node_modules/core-js/library/modules/_is-object.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-object.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},"./node_modules/core-js/library/modules/_iter-call.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-call.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_an-object */"./node_modules/core-js/library/modules/_an-object.js");e.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(t){var i=e.return;throw void 0!==i&&n(i.call(e)),t}}},"./node_modules/core-js/library/modules/_iter-create.js":/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-create.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! ./_object-create */"./node_modules/core-js/library/modules/_object-create.js"),o=r(/*! ./_property-desc */"./node_modules/core-js/library/modules/_property-desc.js"),i=r(/*! ./_set-to-string-tag */"./node_modules/core-js/library/modules/_set-to-string-tag.js"),a={};r(/*! ./_hide */"./node_modules/core-js/library/modules/_hide.js")(a,r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")("iterator"),function(){return this}),e.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),i(e,t+" Iterator")}},"./node_modules/core-js/library/modules/_iter-define.js":/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-define.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! ./_library */"./node_modules/core-js/library/modules/_library.js"),o=r(/*! ./_export */"./node_modules/core-js/library/modules/_export.js"),i=r(/*! ./_redefine */"./node_modules/core-js/library/modules/_redefine.js"),a=r(/*! ./_hide */"./node_modules/core-js/library/modules/_hide.js"),s=r(/*! ./_has */"./node_modules/core-js/library/modules/_has.js"),l=r(/*! ./_iterators */"./node_modules/core-js/library/modules/_iterators.js"),u=r(/*! ./_iter-create */"./node_modules/core-js/library/modules/_iter-create.js"),c=r(/*! ./_set-to-string-tag */"./node_modules/core-js/library/modules/_set-to-string-tag.js"),d=r(/*! ./_object-gpo */"./node_modules/core-js/library/modules/_object-gpo.js"),f=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")("iterator"),p=!([].keys&&"next"in[].keys()),h=function(){return this};e.exports=function(e,t,r,m,y,g,v){u(r,t,m);var b,_,E,T=function(e){if(!p&&e in R)return R[e];switch(e){case"keys":case"values":return function(){return new r(this,e)}}return function(){return new r(this,e)}},w=t+" Iterator",S="values"==y,C=!1,R=e.prototype,k=R[f]||R["@@iterator"]||y&&R[y],j=k||T(y),A=y?S?T("entries"):j:void 0,x="Array"==t?R.entries||k:k;if(x&&(E=d(x.call(new e)))!==Object.prototype&&E.next&&(c(E,w,!0),n||s(E,f)||a(E,f,h)),S&&k&&"values"!==k.name&&(C=!0,j=function(){return k.call(this)}),n&&!v||!p&&!C&&R[f]||a(R,f,j),l[t]=j,l[w]=h,y)if(b={values:S?j:T("values"),keys:g?j:T("keys"),entries:A},v)for(_ in b)_ in R||i(R,_,b[_]);else o(o.P+o.F*(p||C),t,b);return b}},"./node_modules/core-js/library/modules/_iter-detect.js":/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-detect.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")("iterator"),o=!1;try{var i=[7][n]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var i=[7],a=i[n]();a.next=function(){return{done:r=!0}},i[n]=function(){return a},e(i)}catch(e){}return r}},"./node_modules/core-js/library/modules/_iter-step.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-step.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},"./node_modules/core-js/library/modules/_iterators.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iterators.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports={}},"./node_modules/core-js/library/modules/_library.js":/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_library.js ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=!0},"./node_modules/core-js/library/modules/_meta.js":/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_meta.js ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_uid */"./node_modules/core-js/library/modules/_uid.js")("meta"),o=r(/*! ./_is-object */"./node_modules/core-js/library/modules/_is-object.js"),i=r(/*! ./_has */"./node_modules/core-js/library/modules/_has.js"),a=r(/*! ./_object-dp */"./node_modules/core-js/library/modules/_object-dp.js").f,s=0,l=Object.isExtensible||function(){return!0},u=!r(/*! ./_fails */"./node_modules/core-js/library/modules/_fails.js")(function(){return l(Object.preventExtensions({}))}),c=function(e){a(e,n,{value:{i:"O"+ ++s,w:{}}})},d=function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!l(e))return"F";if(!t)return"E";c(e)}return e[n].i},f=function(e,t){if(!i(e,n)){if(!l(e))return!0;if(!t)return!1;c(e)}return e[n].w},p=function(e){return u&&h.NEED&&l(e)&&!i(e,n)&&c(e),e},h=e.exports={KEY:n,NEED:!1,fastKey:d,getWeak:f,onFreeze:p}},"./node_modules/core-js/library/modules/_object-create.js":/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-create.js ***!
  \****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_an-object */"./node_modules/core-js/library/modules/_an-object.js"),o=r(/*! ./_object-dps */"./node_modules/core-js/library/modules/_object-dps.js"),i=r(/*! ./_enum-bug-keys */"./node_modules/core-js/library/modules/_enum-bug-keys.js"),a=r(/*! ./_shared-key */"./node_modules/core-js/library/modules/_shared-key.js")("IE_PROTO"),s=function(){},l=function(){var e,t=r(/*! ./_dom-create */"./node_modules/core-js/library/modules/_dom-create.js")("iframe"),n=i.length;for(t.style.display="none",r(/*! ./_html */"./node_modules/core-js/library/modules/_html.js").appendChild(t),t.src="javascript:",e=t.contentWindow.document,e.open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;n--;)delete l.prototype[i[n]];return l()};e.exports=Object.create||function(e,t){var r;return null!==e?(s.prototype=n(e),r=new s,s.prototype=null,r[a]=e):r=l(),void 0===t?r:o(r,t)}},"./node_modules/core-js/library/modules/_object-dp.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-dp.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_an-object */"./node_modules/core-js/library/modules/_an-object.js"),o=r(/*! ./_ie8-dom-define */"./node_modules/core-js/library/modules/_ie8-dom-define.js"),i=r(/*! ./_to-primitive */"./node_modules/core-js/library/modules/_to-primitive.js"),a=Object.defineProperty;t.f=r(/*! ./_descriptors */"./node_modules/core-js/library/modules/_descriptors.js")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return a(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},"./node_modules/core-js/library/modules/_object-dps.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-dps.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_object-dp */"./node_modules/core-js/library/modules/_object-dp.js"),o=r(/*! ./_an-object */"./node_modules/core-js/library/modules/_an-object.js"),i=r(/*! ./_object-keys */"./node_modules/core-js/library/modules/_object-keys.js");e.exports=r(/*! ./_descriptors */"./node_modules/core-js/library/modules/_descriptors.js")?Object.defineProperties:function(e,t){o(e);for(var r,a=i(t),s=a.length,l=0;s>l;)n.f(e,r=a[l++],t[r]);return e}},"./node_modules/core-js/library/modules/_object-gopd.js":/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopd.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_object-pie */"./node_modules/core-js/library/modules/_object-pie.js"),o=r(/*! ./_property-desc */"./node_modules/core-js/library/modules/_property-desc.js"),i=r(/*! ./_to-iobject */"./node_modules/core-js/library/modules/_to-iobject.js"),a=r(/*! ./_to-primitive */"./node_modules/core-js/library/modules/_to-primitive.js"),s=r(/*! ./_has */"./node_modules/core-js/library/modules/_has.js"),l=r(/*! ./_ie8-dom-define */"./node_modules/core-js/library/modules/_ie8-dom-define.js"),u=Object.getOwnPropertyDescriptor;t.f=r(/*! ./_descriptors */"./node_modules/core-js/library/modules/_descriptors.js")?u:function(e,t){if(e=i(e),t=a(t,!0),l)try{return u(e,t)}catch(e){}if(s(e,t))return o(!n.f.call(e,t),e[t])}},"./node_modules/core-js/library/modules/_object-gopn-ext.js":/*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopn-ext.js ***!
  \******************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_to-iobject */"./node_modules/core-js/library/modules/_to-iobject.js"),o=r(/*! ./_object-gopn */"./node_modules/core-js/library/modules/_object-gopn.js").f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(e){return a.slice()}};e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?s(e):o(n(e))}},"./node_modules/core-js/library/modules/_object-gopn.js":/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopn.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_object-keys-internal */"./node_modules/core-js/library/modules/_object-keys-internal.js"),o=r(/*! ./_enum-bug-keys */"./node_modules/core-js/library/modules/_enum-bug-keys.js").concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},"./node_modules/core-js/library/modules/_object-gops.js":/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gops.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){t.f=Object.getOwnPropertySymbols},"./node_modules/core-js/library/modules/_object-gpo.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gpo.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_has */"./node_modules/core-js/library/modules/_has.js"),o=r(/*! ./_to-object */"./node_modules/core-js/library/modules/_to-object.js"),i=r(/*! ./_shared-key */"./node_modules/core-js/library/modules/_shared-key.js")("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},"./node_modules/core-js/library/modules/_object-keys-internal.js":/*!***********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-keys-internal.js ***!
  \***********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_has */"./node_modules/core-js/library/modules/_has.js"),o=r(/*! ./_to-iobject */"./node_modules/core-js/library/modules/_to-iobject.js"),i=r(/*! ./_array-includes */"./node_modules/core-js/library/modules/_array-includes.js")(!1),a=r(/*! ./_shared-key */"./node_modules/core-js/library/modules/_shared-key.js")("IE_PROTO");e.exports=function(e,t){var r,s=o(e),l=0,u=[];for(r in s)r!=a&&n(s,r)&&u.push(r);for(;t.length>l;)n(s,r=t[l++])&&(~i(u,r)||u.push(r));return u}},"./node_modules/core-js/library/modules/_object-keys.js":/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-keys.js ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_object-keys-internal */"./node_modules/core-js/library/modules/_object-keys-internal.js"),o=r(/*! ./_enum-bug-keys */"./node_modules/core-js/library/modules/_enum-bug-keys.js");e.exports=Object.keys||function(e){return n(e,o)}},"./node_modules/core-js/library/modules/_object-pie.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-pie.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){t.f={}.propertyIsEnumerable},"./node_modules/core-js/library/modules/_object-sap.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-sap.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_export */"./node_modules/core-js/library/modules/_export.js"),o=r(/*! ./_core */"./node_modules/core-js/library/modules/_core.js"),i=r(/*! ./_fails */"./node_modules/core-js/library/modules/_fails.js");e.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],a={};a[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",a)}},"./node_modules/core-js/library/modules/_property-desc.js":/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_property-desc.js ***!
  \****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},"./node_modules/core-js/library/modules/_redefine.js":/*!***********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_redefine.js ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports=r(/*! ./_hide */"./node_modules/core-js/library/modules/_hide.js")},"./node_modules/core-js/library/modules/_set-proto.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-proto.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_is-object */"./node_modules/core-js/library/modules/_is-object.js"),o=r(/*! ./_an-object */"./node_modules/core-js/library/modules/_an-object.js"),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,n){try{n=r(/*! ./_ctx */"./node_modules/core-js/library/modules/_ctx.js")(Function.call,r(/*! ./_object-gopd */"./node_modules/core-js/library/modules/_object-gopd.js").f(Object.prototype,"__proto__").set,2),n(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,r){return i(e,r),t?e.__proto__=r:n(e,r),e}}({},!1):void 0),check:i}},"./node_modules/core-js/library/modules/_set-to-string-tag.js":/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-to-string-tag.js ***!
  \********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_object-dp */"./node_modules/core-js/library/modules/_object-dp.js").f,o=r(/*! ./_has */"./node_modules/core-js/library/modules/_has.js"),i=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},"./node_modules/core-js/library/modules/_shared-key.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_shared-key.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_shared */"./node_modules/core-js/library/modules/_shared.js")("keys"),o=r(/*! ./_uid */"./node_modules/core-js/library/modules/_uid.js");e.exports=function(e){return n[e]||(n[e]=o(e))}},"./node_modules/core-js/library/modules/_shared.js":/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_shared.js ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_global */"./node_modules/core-js/library/modules/_global.js"),o=n["__core-js_shared__"]||(n["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},"./node_modules/core-js/library/modules/_string-at.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_string-at.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_to-integer */"./node_modules/core-js/library/modules/_to-integer.js"),o=r(/*! ./_defined */"./node_modules/core-js/library/modules/_defined.js");e.exports=function(e){return function(t,r){var i,a,s=String(o(t)),l=n(r),u=s.length;return l<0||l>=u?e?"":void 0:(i=s.charCodeAt(l),i<55296||i>56319||l+1===u||(a=s.charCodeAt(l+1))<56320||a>57343?e?s.charAt(l):i:e?s.slice(l,l+2):a-56320+(i-55296<<10)+65536)}}},"./node_modules/core-js/library/modules/_to-absolute-index.js":/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-absolute-index.js ***!
  \********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_to-integer */"./node_modules/core-js/library/modules/_to-integer.js"),o=Math.max,i=Math.min;e.exports=function(e,t){return e=n(e),e<0?o(e+t,0):i(e,t)}},"./node_modules/core-js/library/modules/_to-integer.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-integer.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},"./node_modules/core-js/library/modules/_to-iobject.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-iobject.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_iobject */"./node_modules/core-js/library/modules/_iobject.js"),o=r(/*! ./_defined */"./node_modules/core-js/library/modules/_defined.js");e.exports=function(e){return n(o(e))}},"./node_modules/core-js/library/modules/_to-length.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-length.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_to-integer */"./node_modules/core-js/library/modules/_to-integer.js"),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},"./node_modules/core-js/library/modules/_to-object.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-object.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_defined */"./node_modules/core-js/library/modules/_defined.js");e.exports=function(e){return Object(n(e))}},"./node_modules/core-js/library/modules/_to-primitive.js":/*!***************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-primitive.js ***!
  \***************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_is-object */"./node_modules/core-js/library/modules/_is-object.js");e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},"./node_modules/core-js/library/modules/_uid.js":/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_uid.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++r+n).toString(36))}},"./node_modules/core-js/library/modules/_wks-define.js":/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks-define.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_global */"./node_modules/core-js/library/modules/_global.js"),o=r(/*! ./_core */"./node_modules/core-js/library/modules/_core.js"),i=r(/*! ./_library */"./node_modules/core-js/library/modules/_library.js"),a=r(/*! ./_wks-ext */"./node_modules/core-js/library/modules/_wks-ext.js"),s=r(/*! ./_object-dp */"./node_modules/core-js/library/modules/_object-dp.js").f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},"./node_modules/core-js/library/modules/_wks-ext.js":/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks-ext.js ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){t.f=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")},"./node_modules/core-js/library/modules/_wks.js":/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_shared */"./node_modules/core-js/library/modules/_shared.js")("wks"),o=r(/*! ./_uid */"./node_modules/core-js/library/modules/_uid.js"),i=r(/*! ./_global */"./node_modules/core-js/library/modules/_global.js").Symbol,a="function"==typeof i;(e.exports=function(e){return n[e]||(n[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=n},"./node_modules/core-js/library/modules/core.get-iterator-method.js":/*!**************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/core.get-iterator-method.js ***!
  \**************************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_classof */"./node_modules/core-js/library/modules/_classof.js"),o=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")("iterator"),i=r(/*! ./_iterators */"./node_modules/core-js/library/modules/_iterators.js");e.exports=r(/*! ./_core */"./node_modules/core-js/library/modules/_core.js").getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[n(e)]}},"./node_modules/core-js/library/modules/es6.array.from.js":/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.array.from.js ***!
  \****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! ./_ctx */"./node_modules/core-js/library/modules/_ctx.js"),o=r(/*! ./_export */"./node_modules/core-js/library/modules/_export.js"),i=r(/*! ./_to-object */"./node_modules/core-js/library/modules/_to-object.js"),a=r(/*! ./_iter-call */"./node_modules/core-js/library/modules/_iter-call.js"),s=r(/*! ./_is-array-iter */"./node_modules/core-js/library/modules/_is-array-iter.js"),l=r(/*! ./_to-length */"./node_modules/core-js/library/modules/_to-length.js"),u=r(/*! ./_create-property */"./node_modules/core-js/library/modules/_create-property.js"),c=r(/*! ./core.get-iterator-method */"./node_modules/core-js/library/modules/core.get-iterator-method.js");o(o.S+o.F*!r(/*! ./_iter-detect */"./node_modules/core-js/library/modules/_iter-detect.js")(function(e){Array.from(e)}),"Array",{from:function(e){var t,r,o,d,f=i(e),p="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,y=void 0!==m,g=0,v=c(f);if(y&&(m=n(m,h>2?arguments[2]:void 0,2)),void 0==v||p==Array&&s(v))for(t=l(f.length),r=new p(t);t>g;g++)u(r,g,y?m(f[g],g):f[g]);else for(d=v.call(f),r=new p;!(o=d.next()).done;g++)u(r,g,y?a(d,m,[o.value,g],!0):o.value);return r.length=g,r}})},"./node_modules/core-js/library/modules/es6.array.iterator.js":/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.array.iterator.js ***!
  \********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! ./_add-to-unscopables */"./node_modules/core-js/library/modules/_add-to-unscopables.js"),o=r(/*! ./_iter-step */"./node_modules/core-js/library/modules/_iter-step.js"),i=r(/*! ./_iterators */"./node_modules/core-js/library/modules/_iterators.js"),a=r(/*! ./_to-iobject */"./node_modules/core-js/library/modules/_to-iobject.js");e.exports=r(/*! ./_iter-define */"./node_modules/core-js/library/modules/_iter-define.js")(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},"./node_modules/core-js/library/modules/es6.object.create.js":/*!*******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.create.js ***!
  \*******************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_export */"./node_modules/core-js/library/modules/_export.js");n(n.S,"Object",{create:r(/*! ./_object-create */"./node_modules/core-js/library/modules/_object-create.js")})},"./node_modules/core-js/library/modules/es6.object.define-property.js":/*!****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.define-property.js ***!
  \****************************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_export */"./node_modules/core-js/library/modules/_export.js");n(n.S+n.F*!r(/*! ./_descriptors */"./node_modules/core-js/library/modules/_descriptors.js"),"Object",{defineProperty:r(/*! ./_object-dp */"./node_modules/core-js/library/modules/_object-dp.js").f})},"./node_modules/core-js/library/modules/es6.object.get-prototype-of.js":/*!*****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.get-prototype-of.js ***!
  \*****************************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_to-object */"./node_modules/core-js/library/modules/_to-object.js"),o=r(/*! ./_object-gpo */"./node_modules/core-js/library/modules/_object-gpo.js");r(/*! ./_object-sap */"./node_modules/core-js/library/modules/_object-sap.js")("getPrototypeOf",function(){return function(e){return o(n(e))}})},"./node_modules/core-js/library/modules/es6.object.keys.js":/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.keys.js ***!
  \*****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_to-object */"./node_modules/core-js/library/modules/_to-object.js"),o=r(/*! ./_object-keys */"./node_modules/core-js/library/modules/_object-keys.js");r(/*! ./_object-sap */"./node_modules/core-js/library/modules/_object-sap.js")("keys",function(){return function(e){return o(n(e))}})},"./node_modules/core-js/library/modules/es6.object.set-prototype-of.js":/*!*****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.set-prototype-of.js ***!
  \*****************************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./_export */"./node_modules/core-js/library/modules/_export.js");n(n.S,"Object",{setPrototypeOf:r(/*! ./_set-proto */"./node_modules/core-js/library/modules/_set-proto.js").set})},"./node_modules/core-js/library/modules/es6.object.to-string.js":/*!**********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.to-string.js ***!
  \**********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){},"./node_modules/core-js/library/modules/es6.string.iterator.js":/*!*********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.string.iterator.js ***!
  \*********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! ./_string-at */"./node_modules/core-js/library/modules/_string-at.js")(!0);r(/*! ./_iter-define */"./node_modules/core-js/library/modules/_iter-define.js")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},"./node_modules/core-js/library/modules/es6.symbol.js":/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.symbol.js ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! ./_global */"./node_modules/core-js/library/modules/_global.js"),o=r(/*! ./_has */"./node_modules/core-js/library/modules/_has.js"),i=r(/*! ./_descriptors */"./node_modules/core-js/library/modules/_descriptors.js"),a=r(/*! ./_export */"./node_modules/core-js/library/modules/_export.js"),s=r(/*! ./_redefine */"./node_modules/core-js/library/modules/_redefine.js"),l=r(/*! ./_meta */"./node_modules/core-js/library/modules/_meta.js").KEY,u=r(/*! ./_fails */"./node_modules/core-js/library/modules/_fails.js"),c=r(/*! ./_shared */"./node_modules/core-js/library/modules/_shared.js"),d=r(/*! ./_set-to-string-tag */"./node_modules/core-js/library/modules/_set-to-string-tag.js"),f=r(/*! ./_uid */"./node_modules/core-js/library/modules/_uid.js"),p=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js"),h=r(/*! ./_wks-ext */"./node_modules/core-js/library/modules/_wks-ext.js"),m=r(/*! ./_wks-define */"./node_modules/core-js/library/modules/_wks-define.js"),y=r(/*! ./_enum-keys */"./node_modules/core-js/library/modules/_enum-keys.js"),g=r(/*! ./_is-array */"./node_modules/core-js/library/modules/_is-array.js"),v=r(/*! ./_an-object */"./node_modules/core-js/library/modules/_an-object.js"),b=r(/*! ./_to-iobject */"./node_modules/core-js/library/modules/_to-iobject.js"),_=r(/*! ./_to-primitive */"./node_modules/core-js/library/modules/_to-primitive.js"),E=r(/*! ./_property-desc */"./node_modules/core-js/library/modules/_property-desc.js"),T=r(/*! ./_object-create */"./node_modules/core-js/library/modules/_object-create.js"),w=r(/*! ./_object-gopn-ext */"./node_modules/core-js/library/modules/_object-gopn-ext.js"),S=r(/*! ./_object-gopd */"./node_modules/core-js/library/modules/_object-gopd.js"),C=r(/*! ./_object-dp */"./node_modules/core-js/library/modules/_object-dp.js"),R=r(/*! ./_object-keys */"./node_modules/core-js/library/modules/_object-keys.js"),k=S.f,j=C.f,A=w.f,x=n.Symbol,O=n.JSON,P=O&&O.stringify,L=p("_hidden"),D=p("toPrimitive"),I={}.propertyIsEnumerable,N=c("symbol-registry"),M=c("symbols"),F=c("op-symbols"),U=Object.prototype,B="function"==typeof x,G=n.QObject,H=!G||!G.prototype||!G.prototype.findChild,W=i&&u(function(){return 7!=T(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=k(U,t);n&&delete U[t],j(e,t,r),n&&e!==U&&j(U,t,n)}:j,V=function(e){var t=M[e]=T(x.prototype);return t._k=e,t},K=B&&"symbol"==typeof x.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof x},z=function(e,t,r){return e===U&&z(F,t,r),v(e),t=_(t,!0),v(r),o(M,t)?(r.enumerable?(o(e,L)&&e[L][t]&&(e[L][t]=!1),r=T(r,{enumerable:E(0,!1)})):(o(e,L)||j(e,L,E(1,{})),e[L][t]=!0),W(e,t,r)):j(e,t,r)},q=function(e,t){v(e);for(var r,n=y(t=b(t)),o=0,i=n.length;i>o;)z(e,r=n[o++],t[r]);return e},Y=function(e,t){return void 0===t?T(e):q(T(e),t)},X=function(e){var t=I.call(this,e=_(e,!0));return!(this===U&&o(M,e)&&!o(F,e))&&(!(t||!o(this,e)||!o(M,e)||o(this,L)&&this[L][e])||t)},Q=function(e,t){if(e=b(e),t=_(t,!0),e!==U||!o(M,t)||o(F,t)){var r=k(e,t);return!r||!o(M,t)||o(e,L)&&e[L][t]||(r.enumerable=!0),r}},$=function(e){for(var t,r=A(b(e)),n=[],i=0;r.length>i;)o(M,t=r[i++])||t==L||t==l||n.push(t);return n},J=function(e){for(var t,r=e===U,n=A(r?F:b(e)),i=[],a=0;n.length>a;)!o(M,t=n[a++])||r&&!o(U,t)||i.push(M[t]);return i};B||(x=function(){if(this instanceof x)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(r){this===U&&t.call(F,r),o(this,L)&&o(this[L],e)&&(this[L][e]=!1),W(this,e,E(1,r))};return i&&H&&W(U,e,{configurable:!0,set:t}),V(e)},s(x.prototype,"toString",function(){return this._k}),S.f=Q,C.f=z,r(/*! ./_object-gopn */"./node_modules/core-js/library/modules/_object-gopn.js").f=w.f=$,r(/*! ./_object-pie */"./node_modules/core-js/library/modules/_object-pie.js").f=X,r(/*! ./_object-gops */"./node_modules/core-js/library/modules/_object-gops.js").f=J,i&&!r(/*! ./_library */"./node_modules/core-js/library/modules/_library.js")&&s(U,"propertyIsEnumerable",X,!0),h.f=function(e){return V(p(e))}),a(a.G+a.W+a.F*!B,{Symbol:x});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)p(Z[ee++]);for(var te=R(p.store),re=0;te.length>re;)m(te[re++]);a(a.S+a.F*!B,"Symbol",{for:function(e){return o(N,e+="")?N[e]:N[e]=x(e)},keyFor:function(e){if(!K(e))throw TypeError(e+" is not a symbol!");for(var t in N)if(N[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!B,"Object",{create:Y,defineProperty:z,defineProperties:q,getOwnPropertyDescriptor:Q,getOwnPropertyNames:$,getOwnPropertySymbols:J}),O&&a(a.S+a.F*(!B||u(function(){var e=x();return"[null]"!=P([e])||"{}"!=P({a:e})||"{}"!=P(Object(e))})),"JSON",{stringify:function(e){if(void 0!==e&&!K(e)){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);return t=n[1],"function"==typeof t&&(r=t),!r&&g(t)||(t=function(e,t){if(r&&(t=r.call(this,e,t)),!K(t))return t}),n[1]=t,P.apply(O,n)}}}),x.prototype[D]||r(/*! ./_hide */"./node_modules/core-js/library/modules/_hide.js")(x.prototype,D,x.prototype.valueOf),d(x,"Symbol"),d(Math,"Math",!0),d(n.JSON,"JSON",!0)},"./node_modules/core-js/library/modules/es7.symbol.async-iterator.js":/*!***************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.symbol.async-iterator.js ***!
  \***************************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ./_wks-define */"./node_modules/core-js/library/modules/_wks-define.js")("asyncIterator")},"./node_modules/core-js/library/modules/es7.symbol.observable.js":/*!***********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.symbol.observable.js ***!
  \***********************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ./_wks-define */"./node_modules/core-js/library/modules/_wks-define.js")("observable")},"./node_modules/core-js/library/modules/web.dom.iterable.js":/*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/web.dom.iterable.js ***!
  \******************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ./es6.array.iterator */"./node_modules/core-js/library/modules/es6.array.iterator.js");for(var n=r(/*! ./_global */"./node_modules/core-js/library/modules/_global.js"),o=r(/*! ./_hide */"./node_modules/core-js/library/modules/_hide.js"),i=r(/*! ./_iterators */"./node_modules/core-js/library/modules/_iterators.js"),a=r(/*! ./_wks */"./node_modules/core-js/library/modules/_wks.js")("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var u=s[l],c=n[u],d=c&&c.prototype;d&&!d[a]&&o(d,a,u),i[u]=i.Array}},"./node_modules/css-loader/index.js?importLoaders=1!./node_modules/sass-loader/lib/loader.js!./cams/styles.scss":/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader?importLoaders=1!./node_modules/sass-loader/lib/loader.js!./cams/styles.scss ***!
  \*************************************************************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){t=e.exports=r(/*! ../node_modules/css-loader/lib/css-base.js */"./node_modules/css-loader/lib/css-base.js")(void 0),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto);",""]),t.push([e.i,".player{display:flex;justify-content:center;align-items:center;flex-direction:column;background-color:#a9a9a9;box-shadow:0 27px 55px 0 rgba(0,0,0,.3),0 17px 17px 0 rgba(0,0,0,.15);position:relative}.player:hover .player__delete{transform:translateX(0);opacity:1}.player__content{padding-bottom:56.25%;height:0;flex:1;width:100%}.player__content video{width:100%!important;height:auto!important}.player__footer{width:96%;flex-direction:column;padding:10px;min-height:50px;max-height:0}.player__footer,.player__footer__uncollapsed{display:flex;justify-content:center;align-items:center}.player__footer__uncollapsed{width:100%}.player__footer__uncollapsed .mui-btn:focus,.player__footer__uncollapsed .mui-btn:hover{background-color:transparent}.player__footer .mui-select{width:100%}.player__toggle-play{position:absolute;top:50%;left:50%;margin-top:-27.5px!important;margin-left:-27.5px!important}.player__delete{transform:translateX(100%);opacity:0;position:absolute;top:0;right:5px}.player h2{color:#fff;margin-left:2%}.players__wrapper{display:flex;flex-direction:column;padding:5px;width:97%}.players__wrapper>.mui-btn{margin-top:30px}.players{display:grid;grid-template-columns:repeat(2,1fr);grid-gap:10px;grid-auto-rows:minmax(100px,auto)}@media (max-width:960px){.players{grid-template-columns:repeat(1,1fr)}}.links{display:flex;justify-content:center}.link{background-color:#285aff;transition:all .2s ease-in-out;margin:0 5px;cursor:pointer}.link:hover{background-color:#2735ff}.link--active{background-color:#7a7cff}.link a{color:#fff;padding:10px 20px}.page{flex-direction:column;padding:0 5px 5px;width:100vw;overflow:auto;min-height:100vh}.page,.page__header{display:flex;justify-content:flex-start;align-items:center}.page__header{height:65px;width:100%;background-color:rgba(0,0,0,.5);color:#fff;padding-bottom:10px}.page__header h1{margin-left:30px;font-size:24px}#wg_target_div_512670_72189470{display:flex!important;justify-content:center;overflow:auto!important}body{display:flex;justify-content:flex-start;align-items:center;flex-direction:column;min-height:100vh;font-family:Roboto,sans-serif}li{list-style:none;font-size:24px}a{display:block;text-decoration:none}",""])},"./node_modules/css-loader/lib/css-base.js":/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){function r(e,t){var r=e[1]||"",o=e[3];if(!o)return r;if(t&&"function"==typeof btoa){var i=n(o);return[r].concat(o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"})).concat([i]).join("\n")}return[r].join("\n")}function n(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=r(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,r){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(n[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&n[a[0]]||(r&&!a[2]?a[2]=r:r&&(a[2]="("+a[2]+") and ("+r+")"),t.push(a))}},t}},"./node_modules/fbjs/lib/EventListener.js":/*!************************************************!*\
  !*** ./node_modules/fbjs/lib/EventListener.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! ./emptyFunction */"./node_modules/fbjs/lib/emptyFunction.js"),o={listen:function(e,t,r){return e.addEventListener?(e.addEventListener(t,r,!1),{remove:function(){e.removeEventListener(t,r,!1)}}):e.attachEvent?(e.attachEvent("on"+t,r),{remove:function(){e.detachEvent("on"+t,r)}}):void 0},capture:function(e,t,r){return e.addEventListener?(e.addEventListener(t,r,!0),{remove:function(){e.removeEventListener(t,r,!0)}}):{remove:n}},registerDefault:function(){}};e.exports=o},"./node_modules/fbjs/lib/ExecutionEnvironment.js":/*!*******************************************************!*\
  !*** ./node_modules/fbjs/lib/ExecutionEnvironment.js ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:n&&!!window.screen,isInWorker:!n};e.exports=o},"./node_modules/fbjs/lib/containsNode.js":/*!***********************************************!*\
  !*** ./node_modules/fbjs/lib/containsNode.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e,t){return!(!e||!t)&&(e===t||!o(e)&&(o(t)?n(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}var o=r(/*! ./isTextNode */"./node_modules/fbjs/lib/isTextNode.js");e.exports=n},"./node_modules/fbjs/lib/emptyFunction.js":/*!************************************************!*\
  !*** ./node_modules/fbjs/lib/emptyFunction.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return function(){return e}}var o=function(){};o.thatReturns=n,o.thatReturnsFalse=n(!1),o.thatReturnsTrue=n(!0),o.thatReturnsNull=n(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},"./node_modules/fbjs/lib/emptyObject.js":/*!**********************************************!*\
  !*** ./node_modules/fbjs/lib/emptyObject.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n={};e.exports=n},"./node_modules/fbjs/lib/focusNode.js":/*!********************************************!*\
  !*** ./node_modules/fbjs/lib/focusNode.js ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){try{e.focus()}catch(e){}}e.exports=n},"./node_modules/fbjs/lib/getActiveElement.js":/*!***************************************************!*\
  !*** ./node_modules/fbjs/lib/getActiveElement.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}e.exports=n},"./node_modules/fbjs/lib/invariant.js":/*!********************************************!*\
  !*** ./node_modules/fbjs/lib/invariant.js ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e,t,r,n,i,a,s,l){if(o(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[r,n,i,a,s,l],d=0;u=new Error(t.replace(/%s/g,function(){return c[d++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}var o=function(e){};e.exports=n},"./node_modules/fbjs/lib/isNode.js":/*!*****************************************!*\
  !*** ./node_modules/fbjs/lib/isNode.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){var t=e?e.ownerDocument||e:document,r=t.defaultView||window;return!(!e||!("function"==typeof r.Node?e instanceof r.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}e.exports=n},"./node_modules/fbjs/lib/isTextNode.js":/*!*********************************************!*\
  !*** ./node_modules/fbjs/lib/isTextNode.js ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){return o(e)&&3==e.nodeType}var o=r(/*! ./isNode */"./node_modules/fbjs/lib/isNode.js");e.exports=n},"./node_modules/fbjs/lib/shallowEqual.js":/*!***********************************************!*\
  !*** ./node_modules/fbjs/lib/shallowEqual.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!==e&&t!==t}function o(e,t){if(n(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),o=Object.keys(t);if(r.length!==o.length)return!1;for(var a=0;a<r.length;a++)if(!i.call(t,r[a])||!n(e[r[a]],t[r[a]]))return!1;return!0}var i=Object.prototype.hasOwnProperty;e.exports=o},"./node_modules/hls.js/dist/hls.js":/*!*****************************************!*\
  !*** ./node_modules/hls.js/dist/hls.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){!function(t,r){e.exports=r()}(0,function(){return function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="/dist/",t(t.s=7)}([function(e,t,r){"use strict";function n(){}function o(e,t){return t="["+e+"] > "+t}function i(e){var t=self.console[e];return t?function(){for(var r=arguments.length,n=Array(r),i=0;i<r;i++)n[i]=arguments[i];n[0]&&(n[0]=o(e,n[0])),t.apply(self.console,n)}:n}function a(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];r.forEach(function(t){u[t]=e[t]?e[t].bind(e):i(t)})}r.d(t,"a",function(){return c}),r.d(t,"b",function(){return d});var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l={trace:n,debug:n,log:n,warn:n,info:n,error:n},u=l,c=function(e){if(!0===e||"object"===(void 0===e?"undefined":s(e))){a(e,"debug","log","info","warn","error");try{u.log()}catch(e){u=l}}else u=l},d=u},function(e,t,r){"use strict";t.a={MEDIA_ATTACHING:"hlsMediaAttaching",MEDIA_ATTACHED:"hlsMediaAttached",MEDIA_DETACHING:"hlsMediaDetaching",MEDIA_DETACHED:"hlsMediaDetached",BUFFER_RESET:"hlsBufferReset",BUFFER_CODECS:"hlsBufferCodecs",BUFFER_CREATED:"hlsBufferCreated",BUFFER_APPENDING:"hlsBufferAppending",BUFFER_APPENDED:"hlsBufferAppended",BUFFER_EOS:"hlsBufferEos",BUFFER_FLUSHING:"hlsBufferFlushing",BUFFER_FLUSHED:"hlsBufferFlushed",MANIFEST_LOADING:"hlsManifestLoading",MANIFEST_LOADED:"hlsManifestLoaded",MANIFEST_PARSED:"hlsManifestParsed",LEVEL_SWITCH:"hlsLevelSwitch",LEVEL_SWITCHING:"hlsLevelSwitching",LEVEL_SWITCHED:"hlsLevelSwitched",LEVEL_LOADING:"hlsLevelLoading",LEVEL_LOADED:"hlsLevelLoaded",LEVEL_UPDATED:"hlsLevelUpdated",LEVEL_PTS_UPDATED:"hlsLevelPtsUpdated",AUDIO_TRACKS_UPDATED:"hlsAudioTracksUpdated",AUDIO_TRACK_SWITCH:"hlsAudioTrackSwitch",AUDIO_TRACK_SWITCHING:"hlsAudioTrackSwitching",AUDIO_TRACK_SWITCHED:"hlsAudioTrackSwitched",AUDIO_TRACK_LOADING:"hlsAudioTrackLoading",AUDIO_TRACK_LOADED:"hlsAudioTrackLoaded",SUBTITLE_TRACKS_UPDATED:"hlsSubtitleTracksUpdated",SUBTITLE_TRACK_SWITCH:"hlsSubtitleTrackSwitch",SUBTITLE_TRACK_LOADING:"hlsSubtitleTrackLoading",SUBTITLE_TRACK_LOADED:"hlsSubtitleTrackLoaded",SUBTITLE_FRAG_PROCESSED:"hlsSubtitleFragProcessed",INIT_PTS_FOUND:"hlsInitPtsFound",FRAG_LOADING:"hlsFragLoading",FRAG_LOAD_PROGRESS:"hlsFragLoadProgress",FRAG_LOAD_EMERGENCY_ABORTED:"hlsFragLoadEmergencyAborted",FRAG_LOADED:"hlsFragLoaded",FRAG_DECRYPTED:"hlsFragDecrypted",FRAG_PARSING_INIT_SEGMENT:"hlsFragParsingInitSegment",FRAG_PARSING_USERDATA:"hlsFragParsingUserdata",FRAG_PARSING_METADATA:"hlsFragParsingMetadata",FRAG_PARSING_DATA:"hlsFragParsingData",FRAG_PARSED:"hlsFragParsed",FRAG_BUFFERED:"hlsFragBuffered",FRAG_CHANGED:"hlsFragChanged",FPS_DROP:"hlsFpsDrop",FPS_DROP_LEVEL_CAPPING:"hlsFpsDropLevelCapping",ERROR:"hlsError",DESTROYING:"hlsDestroying",KEY_LOADING:"hlsKeyLoading",KEY_LOADED:"hlsKeyLoaded",STREAM_STATE_TRANSITION:"hlsStreamStateTransition"}},function(e,t,r){"use strict";r.d(t,"b",function(){return n}),r.d(t,"a",function(){return o});var n={NETWORK_ERROR:"networkError",MEDIA_ERROR:"mediaError",MUX_ERROR:"muxError",OTHER_ERROR:"otherError"},o={MANIFEST_LOAD_ERROR:"manifestLoadError",MANIFEST_LOAD_TIMEOUT:"manifestLoadTimeOut",MANIFEST_PARSING_ERROR:"manifestParsingError",MANIFEST_INCOMPATIBLE_CODECS_ERROR:"manifestIncompatibleCodecsError",LEVEL_LOAD_ERROR:"levelLoadError",LEVEL_LOAD_TIMEOUT:"levelLoadTimeOut",LEVEL_SWITCH_ERROR:"levelSwitchError",AUDIO_TRACK_LOAD_ERROR:"audioTrackLoadError",AUDIO_TRACK_LOAD_TIMEOUT:"audioTrackLoadTimeOut",FRAG_LOAD_ERROR:"fragLoadError",FRAG_LOOP_LOADING_ERROR:"fragLoopLoadingError",FRAG_LOAD_TIMEOUT:"fragLoadTimeOut",FRAG_DECRYPT_ERROR:"fragDecryptError",FRAG_PARSING_ERROR:"fragParsingError",REMUX_ALLOC_ERROR:"remuxAllocError",KEY_LOAD_ERROR:"keyLoadError",KEY_LOAD_TIMEOUT:"keyLoadTimeOut",BUFFER_ADD_CODEC_ERROR:"bufferAddCodecError",BUFFER_APPEND_ERROR:"bufferAppendError",BUFFER_APPENDING_ERROR:"bufferAppendingError",BUFFER_STALLED_ERROR:"bufferStalledError",BUFFER_FULL_ERROR:"bufferFullError",BUFFER_SEEK_OVER_HOLE:"bufferSeekOverHole",BUFFER_NUDGE_ON_STALL:"bufferNudgeOnStall",INTERNAL_EXCEPTION:"internalException"}},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(){n(this,e)}return e.isHeader=function(e,t){return t+10<=e.length&&73===e[t]&&68===e[t+1]&&51===e[t+2]&&e[t+3]<255&&e[t+4]<255&&e[t+6]<128&&e[t+7]<128&&e[t+8]<128&&e[t+9]<128},e.isFooter=function(e,t){return t+10<=e.length&&51===e[t]&&68===e[t+1]&&73===e[t+2]&&e[t+3]<255&&e[t+4]<255&&e[t+6]<128&&e[t+7]<128&&e[t+8]<128&&e[t+9]<128},e.getID3Data=function(t,r){for(var n=r,o=0;e.isHeader(t,r);){o+=10;o+=e._readSize(t,r+6),e.isFooter(t,r+10)&&(o+=10),r+=o}if(o>0)return t.subarray(n,n+o)},e._readSize=function(e,t){var r=0;return r=(127&e[t])<<21,r|=(127&e[t+1])<<14,r|=(127&e[t+2])<<7,r|=127&e[t+3]},e.getTimeStamp=function(t){for(var r=e.getID3Frames(t),n=0;n<r.length;n++){var o=r[n];if(e.isTimeStampFrame(o))return e._readTimeStamp(o)}},e.isTimeStampFrame=function(e){return e&&"PRIV"===e.key&&"com.apple.streaming.transportStreamTimestamp"===e.info},e._getFrameData=function(t){var r=String.fromCharCode(t[0],t[1],t[2],t[3]),n=e._readSize(t,4);return{type:r,size:n,data:t.subarray(10,10+n)}},e.getID3Frames=function(t){for(var r=0,n=[];e.isHeader(t,r);){var o=e._readSize(t,r+6);r+=10;for(var i=r+o;r+8<i;){var a=e._getFrameData(t.subarray(r)),s=e._decodeFrame(a);s&&n.push(s),r+=a.size+10}e.isFooter(t,r)&&(r+=10)}return n},e._decodeFrame=function(t){return"PRIV"===t.type?e._decodePrivFrame(t):"T"===t.type[0]?e._decodeTextFrame(t):"W"===t.type[0]?e._decodeURLFrame(t):void 0},e._readTimeStamp=function(e){if(8===e.data.byteLength){var t=new Uint8Array(e.data),r=1&t[3],n=(t[4]<<23)+(t[5]<<15)+(t[6]<<7)+t[7];return n/=45,r&&(n+=47721858.84),Math.round(n)}},e._decodePrivFrame=function(t){if(!(t.size<2)){var r=e._utf8ArrayToStr(t.data),n=new Uint8Array(t.data.subarray(r.length+1));return{key:t.type,info:r,data:n.buffer}}},e._decodeTextFrame=function(t){if(!(t.size<2)){if("TXXX"===t.type){var r=1,n=e._utf8ArrayToStr(t.data.subarray(r));r+=n.length+1;var o=e._utf8ArrayToStr(t.data.subarray(r));return{key:t.type,info:n,data:o}}var i=e._utf8ArrayToStr(t.data.subarray(1));return{key:t.type,data:i}}},e._decodeURLFrame=function(t){if("WXXX"===t.type){if(t.size<2)return;var r=1,n=e._utf8ArrayToStr(t.data.subarray(r));r+=n.length+1;var o=e._utf8ArrayToStr(t.data.subarray(r));return{key:t.type,info:n,data:o}}var i=e._utf8ArrayToStr(t.data);return{key:t.type,data:i}},e._utf8ArrayToStr=function(e){for(var t=void 0,r=void 0,n="",o=0,i=e.length;o<i;){var a=e[o++];switch(a>>4){case 0:return n;case 1:case 2:case 3:case 4:case 5:case 6:case 7:n+=String.fromCharCode(a);break;case 12:case 13:t=e[o++],n+=String.fromCharCode((31&a)<<6|63&t);break;case 14:t=e[o++],r=e[o++],n+=String.fromCharCode((15&a)<<12|(63&t)<<6|(63&r)<<0)}}return n},e}();t.a=o},function(e,t){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(e){return"function"==typeof e}function o(e){return"number"==typeof e}function i(e){return"object"==typeof e&&null!==e}function a(e){return void 0===e}e.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!o(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,r,o,s,l,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}if(r=this._events[e],a(r))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),r.apply(this,s)}else if(i(r))for(s=Array.prototype.slice.call(arguments,1),u=r.slice(),o=u.length,l=0;l<o;l++)u[l].apply(this,s);return!0},r.prototype.addListener=function(e,t){var o;if(!n(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,n(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(o=a(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function r(){this.removeListener(e,r),o||(o=!0,t.apply(this,arguments))}if(!n(t))throw TypeError("listener must be a function");var o=!1;return r.listener=t,this.on(e,r),this},r.prototype.removeListener=function(e,t){var r,o,a,s;if(!n(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=this._events[e],a=r.length,o=-1,r===t||n(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(r)){for(s=a;s-- >0;)if(r[s]===t||r[s].listener&&r[s].listener===t){o=s;break}if(o<0)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(r=this._events[e],n(r))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?n(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(n(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,r){!function(t){var r=/^((?:[^\/;?#]+:)?)(\/\/[^\/\;?#]*)?(.*?)??(;.*?)?(\?.*?)?(#.*?)?$/,n=/^([^\/;?#]*)(.*)$/,o=/(?:\/|^)\.(?=\/)/g,i=/(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g,a={buildAbsoluteURL:function(e,t,r){if(r=r||{},e=e.trim(),!(t=t.trim())){if(!r.alwaysNormalize)return e;var o=this.parseURL(e);if(!s)throw new Error("Error trying to parse base URL.");return o.path=a.normalizePath(o.path),a.buildURLFromParts(o)}var i=this.parseURL(t);if(!i)throw new Error("Error trying to parse relative URL.");if(i.scheme)return r.alwaysNormalize?(i.path=a.normalizePath(i.path),a.buildURLFromParts(i)):t;var s=this.parseURL(e);if(!s)throw new Error("Error trying to parse base URL.");if(!s.netLoc&&s.path&&"/"!==s.path[0]){var l=n.exec(s.path);s.netLoc=l[1],s.path=l[2]}s.netLoc&&!s.path&&(s.path="/");var u={scheme:s.scheme,netLoc:i.netLoc,path:null,params:i.params,query:i.query,fragment:i.fragment};if(!i.netLoc&&(u.netLoc=s.netLoc,"/"!==i.path[0]))if(i.path){var c=s.path,d=c.substring(0,c.lastIndexOf("/")+1)+i.path;u.path=a.normalizePath(d)}else u.path=s.path,i.params||(u.params=s.params,i.query||(u.query=s.query));return null===u.path&&(u.path=r.alwaysNormalize?a.normalizePath(i.path):i.path),a.buildURLFromParts(u)},parseURL:function(e){var t=r.exec(e);return t?{scheme:t[1]||"",netLoc:t[2]||"",path:t[3]||"",params:t[4]||"",query:t[5]||"",fragment:t[6]||""}:null},normalizePath:function(e){for(e=e.split("").reverse().join("").replace(o,"");e.length!==(e=e.replace(i,"")).length;);return e.split("").reverse().join("")},buildURLFromParts:function(e){return e.scheme+e.netLoc+e.path+e.params+e.query+e.fragment}};e.exports=a}()},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t,r,n){var o,i,a,s,l,u=navigator.userAgent.toLowerCase(),c=n,d=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];return o=1+((192&t[r+2])>>>6),(i=(60&t[r+2])>>>2)>d.length-1?void e.trigger(Event.ERROR,{type:A.b.MEDIA_ERROR,details:A.a.FRAG_PARSING_ERROR,fatal:!0,reason:"invalid ADTS sampling index:"+i}):(s=(1&t[r+2])<<2,s|=(192&t[r+3])>>>6,N.b.log("manifest codec:"+n+",ADTS data:type:"+o+",sampleingIndex:"+i+"["+d[i]+"Hz],channelConfig:"+s),/firefox/i.test(u)?i>=6?(o=5,l=new Array(4),a=i-3):(o=2,l=new Array(2),a=i):-1!==u.indexOf("android")?(o=2,l=new Array(2),a=i):(o=5,l=new Array(4),n&&(-1!==n.indexOf("mp4a.40.29")||-1!==n.indexOf("mp4a.40.5"))||!n&&i>=6?a=i-3:((n&&-1!==n.indexOf("mp4a.40.2")&&(i>=6&&1===s||/vivaldi/i.test(u))||!n&&1===s)&&(o=2,l=new Array(2)),a=i)),l[0]=o<<3,l[0]|=(14&i)>>1,l[1]|=(1&i)<<7,l[1]|=s<<3,5===o&&(l[1]|=(14&a)>>1,l[2]=(1&a)<<7,l[2]|=8,l[3]=0),{config:l,samplerate:d[i],channelCount:s,codec:"mp4a.40."+o,manifestCodec:c})}function l(e,t){return 255===e[t]&&240==(246&e[t+1])}function u(e,t){return 1&e[t+1]?7:9}function c(e,t){return(3&e[t+3])<<11|e[t+4]<<3|(224&e[t+5])>>>5}function d(e,t){return!!(t+1<e.length&&l(e,t))}function f(e,t){if(t+1<e.length&&l(e,t)){var r=u(e,t),n=r;t+5<e.length&&(n=c(e,t));var o=t+n;if(o===e.length||o+1<e.length&&l(e,o))return!0}return!1}function p(e,t,r,n,o){if(!e.samplerate){var i=s(t,r,n,o);e.config=i.config,e.samplerate=i.samplerate,e.channelCount=i.channelCount,e.codec=i.codec,e.manifestCodec=i.manifestCodec,N.b.log("parsed codec:"+e.codec+",rate:"+i.samplerate+",nb channel:"+i.channelCount)}}function h(e){return 9216e4/e}function m(e,t,r,n,o){var i,a,s,l=e.length;if(i=u(e,t),a=c(e,t),(a-=i)>0&&t+i+a<=l)return s=r+n*o,{headerLength:i,frameLength:a,stamp:s}}function y(e,t,r,n,o){var i=h(e.samplerate),a=m(t,r,n,o,i);if(a){var s=a.stamp,l=a.headerLength,u=a.frameLength,c={unit:t.subarray(r+l,r+l+u),pts:s,dts:s};return e.samples.push(c),e.len+=u,{sample:c,length:u+l}}}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function T(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function w(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function S(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function C(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function R(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function k(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var j=r(1),A=r(2),x=function(){function e(t,r){n(this,e),this.subtle=t,this.aesIV=r}return e.prototype.decrypt=function(e,t){return this.subtle.decrypt({name:"AES-CBC",iv:this.aesIV},t,e)},e}(),O=x,P=function(){function e(t,r){o(this,e),this.subtle=t,this.key=r}return e.prototype.expandKey=function(){return this.subtle.importKey("raw",this.key,{name:"AES-CBC"},!1,["encrypt","decrypt"])},e}(),L=P,D=function(){function e(){i(this,e),this.rcon=[0,1,2,4,8,16,32,64,128,27,54],this.subMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.invSubMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.sBox=new Uint32Array(256),this.invSBox=new Uint32Array(256),this.key=new Uint32Array(0),this.initTable()}return e.prototype.uint8ArrayToUint32Array_=function(e){for(var t=new DataView(e),r=new Uint32Array(4),n=0;n<4;n++)r[n]=t.getUint32(4*n);return r},e.prototype.initTable=function(){var e=this.sBox,t=this.invSBox,r=this.subMix,n=r[0],o=r[1],i=r[2],a=r[3],s=this.invSubMix,l=s[0],u=s[1],c=s[2],d=s[3],f=new Uint32Array(256),p=0,h=0,m=0;for(m=0;m<256;m++)f[m]=m<128?m<<1:m<<1^283;for(m=0;m<256;m++){var y=h^h<<1^h<<2^h<<3^h<<4;y=y>>>8^255&y^99,e[p]=y,t[y]=p;var g=f[p],v=f[g],b=f[v],_=257*f[y]^16843008*y;n[p]=_<<24|_>>>8,o[p]=_<<16|_>>>16,i[p]=_<<8|_>>>24,a[p]=_,_=16843009*b^65537*v^257*g^16843008*p,l[y]=_<<24|_>>>8,u[y]=_<<16|_>>>16,c[y]=_<<8|_>>>24,d[y]=_,p?(p=g^f[f[f[b^g]]],h^=f[f[h]]):p=h=1}},e.prototype.expandKey=function(e){for(var t=this.uint8ArrayToUint32Array_(e),r=!0,n=0;n<t.length&&r;)r=t[n]===this.key[n],n++;if(!r){this.key=t;var o=this.keySize=t.length;if(4!==o&&6!==o&&8!==o)throw new Error("Invalid aes key size="+o);var i=this.ksRows=4*(o+6+1),a=void 0,s=void 0,l=this.keySchedule=new Uint32Array(i),u=this.invKeySchedule=new Uint32Array(i),c=this.sBox,d=this.rcon,f=this.invSubMix,p=f[0],h=f[1],m=f[2],y=f[3],g=void 0,v=void 0;for(a=0;a<i;a++)a<o?g=l[a]=t[a]:(v=g,a%o==0?(v=v<<8|v>>>24,v=c[v>>>24]<<24|c[v>>>16&255]<<16|c[v>>>8&255]<<8|c[255&v],v^=d[a/o|0]<<24):o>6&&a%o==4&&(v=c[v>>>24]<<24|c[v>>>16&255]<<16|c[v>>>8&255]<<8|c[255&v]),l[a]=g=(l[a-o]^v)>>>0);for(s=0;s<i;s++)a=i-s,v=3&s?l[a]:l[a-4],u[s]=s<4||a<=4?v:p[c[v>>>24]]^h[c[v>>>16&255]]^m[c[v>>>8&255]]^y[c[255&v]],u[s]=u[s]>>>0}},e.prototype.networkToHostOrderSwap=function(e){return e<<24|(65280&e)<<8|(16711680&e)>>8|e>>>24},e.prototype.decrypt=function(e,t,r){for(var n,o,i=this.keySize+6,a=this.invKeySchedule,s=this.invSBox,l=this.invSubMix,u=l[0],c=l[1],d=l[2],f=l[3],p=this.uint8ArrayToUint32Array_(r),h=p[0],m=p[1],y=p[2],g=p[3],v=new Int32Array(e),b=new Int32Array(v.length),_=void 0,E=void 0,T=void 0,w=void 0,S=void 0,C=void 0,R=void 0,k=void 0,j=void 0,A=void 0,x=void 0,O=void 0,P=this.networkToHostOrderSwap;t<v.length;){for(j=P(v[t]),A=P(v[t+1]),x=P(v[t+2]),O=P(v[t+3]),S=j^a[0],C=O^a[1],R=x^a[2],k=A^a[3],n=4,o=1;o<i;o++)_=u[S>>>24]^c[C>>16&255]^d[R>>8&255]^f[255&k]^a[n],E=u[C>>>24]^c[R>>16&255]^d[k>>8&255]^f[255&S]^a[n+1],T=u[R>>>24]^c[k>>16&255]^d[S>>8&255]^f[255&C]^a[n+2],w=u[k>>>24]^c[S>>16&255]^d[C>>8&255]^f[255&R]^a[n+3],S=_,C=E,R=T,k=w,n+=4;_=s[S>>>24]<<24^s[C>>16&255]<<16^s[R>>8&255]<<8^s[255&k]^a[n],E=s[C>>>24]<<24^s[R>>16&255]<<16^s[k>>8&255]<<8^s[255&S]^a[n+1],T=s[R>>>24]<<24^s[k>>16&255]<<16^s[S>>8&255]<<8^s[255&C]^a[n+2],w=s[k>>>24]<<24^s[S>>16&255]<<16^s[C>>8&255]<<8^s[255&R]^a[n+3],n+=3,b[t]=P(_^h),b[t+1]=P(w^m),b[t+2]=P(T^y),b[t+3]=P(E^g),h=j,m=A,y=x,g=O,t+=4}return b.buffer},e.prototype.destroy=function(){this.key=void 0,this.keySize=void 0,this.ksRows=void 0,this.sBox=void 0,this.invSBox=void 0,this.subMix=void 0,this.invSubMix=void 0,this.keySchedule=void 0,this.invKeySchedule=void 0,this.rcon=void 0},e}(),I=D,N=r(0),M=function(){function e(t,r){a(this,e),this.observer=t,this.config=r,this.logEnabled=!0;try{var n=crypto||self.crypto;this.subtle=n.subtle||n.webkitSubtle}catch(e){}this.disableWebCrypto=!this.subtle}return e.prototype.isSync=function(){return this.disableWebCrypto&&this.config.enableSoftwareAES},e.prototype.decrypt=function(e,t,r,n){var o=this;if(this.disableWebCrypto&&this.config.enableSoftwareAES){this.logEnabled&&(N.b.log("JS AES decrypt"),this.logEnabled=!1);var i=this.decryptor;i||(this.decryptor=i=new I),i.expandKey(t),n(i.decrypt(e,0,r))}else{this.logEnabled&&(N.b.log("WebCrypto AES decrypt"),this.logEnabled=!1);var a=this.subtle;this.key!==t&&(this.key=t,this.fastAesKey=new L(a,t)),this.fastAesKey.expandKey().then(function(i){new O(a,r).decrypt(e,i).catch(function(i){o.onWebCryptoError(i,e,t,r,n)}).then(function(e){n(e)})}).catch(function(i){o.onWebCryptoError(i,e,t,r,n)})}},e.prototype.onWebCryptoError=function(e,t,r,n,o){this.config.enableSoftwareAES?(N.b.log("WebCrypto Error, disable WebCrypto API"),this.disableWebCrypto=!0,this.logEnabled=!0,this.decrypt(t,r,n,o)):(N.b.error("decrypting error : "+e.message),this.observer.trigger(Event.ERROR,{type:A.b.MEDIA_ERROR,details:A.a.FRAG_DECRYPT_ERROR,fatal:!0,reason:e.message}))},e.prototype.destroy=function(){var e=this.decryptor;e&&(e.destroy(),this.decryptor=void 0)},e}(),F=M,U=r(3),B=function(){function e(t,r,n){g(this,e),this.observer=t,this.config=n,this.remuxer=r}return e.prototype.resetInitSegment=function(e,t,r,n){this._audioTrack={container:"audio/adts",type:"audio",id:0,sequenceNumber:0,isAAC:!0,samples:[],len:0,manifestCodec:t,duration:n,inputTimeScale:9e4}},e.prototype.resetTimeStamp=function(){},e.probe=function(e){if(!e)return!1;for(var t=U.a.getID3Data(e,0)||[],r=t.length,n=e.length;r<n;r++)if(f(e,r))return N.b.log("ADTS sync word found !"),!0;return!1},e.prototype.append=function(e,t,r,n){for(var o=this._audioTrack,i=U.a.getID3Data(e,0)||[],a=U.a.getTimeStamp(i),s=a?90*a:9e4*t,l=0,u=s,c=e.length,f=i.length,h=[{pts:u,dts:u,data:i}];f<c-1;)if(d(e,f)&&f+5<c){p(o,this.observer,e,f,o.manifestCodec);var m=y(o,e,f,s,l);if(!m){N.b.log("Unable to parse AAC frame");break}f+=m.length,u=m.sample.pts,l++}else U.a.isHeader(e,f)?(i=U.a.getID3Data(e,f),h.push({pts:u,dts:u,data:i}),f+=i.length):f++;this.remuxer.remux(o,{samples:[]},{samples:h,inputTimeScale:9e4},{samples:[]},t,r,n)},e.prototype.destroy=function(){},e}(),G=B,H=Math.pow(2,32)-1,W=function(){function e(t,r){v(this,e),this.observer=t,this.remuxer=r}return e.prototype.resetTimeStamp=function(e){this.initPTS=e},e.prototype.resetInitSegment=function(t,r,n,o){if(t&&t.byteLength){var i=this.initData=e.parseInitSegment(t),a={};i.audio&&i.video?a.audiovideo={container:"video/mp4",codec:r+","+n,initSegment:o?t:null}:(i.audio&&(a.audio={container:"audio/mp4",codec:r,initSegment:o?t:null}),i.video&&(a.video={container:"video/mp4",codec:n,initSegment:o?t:null})),this.observer.trigger(j.a.FRAG_PARSING_INIT_SEGMENT,{tracks:a})}else r&&(this.audioCodec=r),n&&(this.videoCodec=n)},e.probe=function(t){if(t.length>=8){return["moof","ftyp","styp"].indexOf(e.bin2str(t.subarray(4,8)))>=0}return!1},e.bin2str=function(e){return String.fromCharCode.apply(null,e)},e.readUint32=function(e,t){e.data&&(t+=e.start,e=e.data);var r=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3];return r<0?4294967296+r:r},e.writeUint32=function(e,t,r){e.data&&(t+=e.start,e=e.data),e[t]=r>>24,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r},e.findBox=function(t,r){var n,o,i,a,s,l,u,c=[];if(t.data?(l=t.start,a=t.end,t=t.data):(l=0,a=t.byteLength),!r.length)return null;for(n=l;n<a;)o=e.readUint32(t,n),i=e.bin2str(t.subarray(n+4,n+8)),u=o>1?n+o:a,i===r[0]&&(1===r.length?c.push({data:t,start:n+8,end:u}):(s=e.findBox({data:t,start:n+8,end:u},r.slice(1)),s.length&&(c=c.concat(s)))),n=u;return c},e.parseInitSegment=function(t){var r=[];return e.findBox(t,["moov","trak"]).forEach(function(t){var n=e.findBox(t,["tkhd"])[0];if(n){var o=n.data[n.start],i=0===o?12:20,a=e.readUint32(n,i),s=e.findBox(t,["mdia","mdhd"])[0];if(s){o=s.data[s.start],i=0===o?12:20;var l=e.readUint32(s,i),u=e.findBox(t,["mdia","hdlr"])[0];if(u){var c=e.bin2str(u.data.subarray(u.start+8,u.start+12)),d={soun:"audio",vide:"video"}[c];d&&(r[a]={timescale:l,type:d},r[d]={timescale:l,id:a})}}}}),r},e.getStartDTS=function(t,r){var n,o,i;return n=e.findBox(r,["moof","traf"]),o=[].concat.apply([],n.map(function(r){return e.findBox(r,["tfhd"]).map(function(n){var o,i;return o=e.readUint32(n,4),i=t[o].timescale||9e4,e.findBox(r,["tfdt"]).map(function(t){var r,n;return r=t.data[t.start],n=e.readUint32(t,4),1===r&&(n*=Math.pow(2,32),n+=e.readUint32(t,8)),n})[0]/i})})),i=Math.min.apply(null,o),isFinite(i)?i:0},e.offsetStartDTS=function(t,r,n){e.findBox(r,["moof","traf"]).map(function(r){return e.findBox(r,["tfhd"]).map(function(o){var i=e.readUint32(o,4),a=t[i].timescale||9e4;e.findBox(r,["tfdt"]).map(function(t){var r=t.data[t.start],o=e.readUint32(t,4);if(0===r)e.writeUint32(t,4,o-n*a);else{o*=Math.pow(2,32),o+=e.readUint32(t,8),o-=n*a,o=Math.max(o,0);var i=Math.floor(o/(H+1)),s=Math.floor(o%(H+1));e.writeUint32(t,4,i),e.writeUint32(t,8,s)}})})})},e.prototype.append=function(t,r,n,o){var i=this.initData;i||(this.resetInitSegment(t,this.audioCodec,this.videoCodec),i=this.initData);var a=void 0,s=this.initPTS;if(void 0===s){var l=e.getStartDTS(i,t);this.initPTS=s=l-r,this.observer.trigger(j.a.INIT_PTS_FOUND,{initPTS:s})}e.offsetStartDTS(i,t,s),a=e.getStartDTS(i,t),this.remuxer.remux(i.audio,i.video,null,null,a,n,o,t)},e.prototype.destroy=function(){},e}(),V=W,K={BitratesMap:[32,64,96,128,160,192,224,256,288,320,352,384,416,448,32,48,56,64,80,96,112,128,160,192,224,256,320,384,32,40,48,56,64,80,96,112,128,160,192,224,256,320,32,48,56,64,80,96,112,128,144,160,176,192,224,256,8,16,24,32,40,48,56,64,80,96,112,128,144,160],SamplingRateMap:[44100,48e3,32e3,22050,24e3,16e3,11025,12e3,8e3],appendFrame:function(e,t,r,n,o){if(!(r+24>t.length)){var i=this.parseHeader(t,r);if(i&&r+i.frameLength<=t.length){var a=10368e4/i.sampleRate,s=n+o*a,l={unit:t.subarray(r,r+i.frameLength),pts:s,dts:s};return e.config=[],e.channelCount=i.channelCount,e.samplerate=i.sampleRate,e.samples.push(l),e.len+=i.frameLength,{sample:l,length:i.frameLength}}}},parseHeader:function(e,t){var r=e[t+1]>>3&3,n=e[t+1]>>1&3,o=e[t+2]>>4&15,i=e[t+2]>>2&3,a=!!(2&e[t+2]);if(1!==r&&0!==o&&15!==o&&3!==i){var s=3===r?3-n:3===n?3:4,l=1e3*K.BitratesMap[14*s+o-1],u=3===r?0:2===r?1:2,c=K.SamplingRateMap[3*u+i],d=a?1:0;return{sampleRate:c,channelCount:e[t+3]>>6==3?1:2,frameLength:3===n?(3===r?12:6)*l/c+d<<2:(3===r?144:72)*l/c+d|0}}},isHeaderPattern:function(e,t){return 255===e[t]&&224==(224&e[t+1])&&0!=(6&e[t+1])},isHeader:function(e,t){return!!(t+1<e.length&&this.isHeaderPattern(e,t))},probe:function(e,t){if(t+1<e.length&&this.isHeaderPattern(e,t)){var r=this.parseHeader(e,t),n=4;r&&r.frameLength&&(n=r.frameLength);var o=t+n;if(o===e.length||o+1<e.length&&this.isHeaderPattern(e,o))return!0}return!1}},z=K,q=function(){function e(t){b(this,e),this.data=t,this.bytesAvailable=t.byteLength,this.word=0,this.bitsAvailable=0}return e.prototype.loadWord=function(){var e=this.data,t=this.bytesAvailable,r=e.byteLength-t,n=new Uint8Array(4),o=Math.min(4,t);if(0===o)throw new Error("no bytes available");n.set(e.subarray(r,r+o)),this.word=new DataView(n.buffer).getUint32(0),this.bitsAvailable=8*o,this.bytesAvailable-=o},e.prototype.skipBits=function(e){var t;this.bitsAvailable>e?(this.word<<=e,this.bitsAvailable-=e):(e-=this.bitsAvailable,t=e>>3,e-=t>>3,this.bytesAvailable-=t,this.loadWord(),this.word<<=e,this.bitsAvailable-=e)},e.prototype.readBits=function(e){var t=Math.min(this.bitsAvailable,e),r=this.word>>>32-t;return e>32&&N.b.error("Cannot read more than 32 bits at a time"),this.bitsAvailable-=t,this.bitsAvailable>0?this.word<<=t:this.bytesAvailable>0&&this.loadWord(),t=e-t,t>0&&this.bitsAvailable?r<<t|this.readBits(t):r},e.prototype.skipLZ=function(){var e;for(e=0;e<this.bitsAvailable;++e)if(0!=(this.word&2147483648>>>e))return this.word<<=e,this.bitsAvailable-=e,e;return this.loadWord(),e+this.skipLZ()},e.prototype.skipUEG=function(){this.skipBits(1+this.skipLZ())},e.prototype.skipEG=function(){this.skipBits(1+this.skipLZ())},e.prototype.readUEG=function(){var e=this.skipLZ();return this.readBits(e+1)-1},e.prototype.readEG=function(){var e=this.readUEG();return 1&e?1+e>>>1:-1*(e>>>1)},e.prototype.readBoolean=function(){return 1===this.readBits(1)},e.prototype.readUByte=function(){return this.readBits(8)},e.prototype.readUShort=function(){return this.readBits(16)},e.prototype.readUInt=function(){return this.readBits(32)},e.prototype.skipScalingList=function(e){var t,r,n=8,o=8;for(t=0;t<e;t++)0!==o&&(r=this.readEG(),o=(n+r+256)%256),n=0===o?n:o},e.prototype.readSPS=function(){var e,t,r,n,o,i,a,s=0,l=0,u=0,c=0,d=this.readUByte.bind(this),f=this.readBits.bind(this),p=this.readUEG.bind(this),h=this.readBoolean.bind(this),m=this.skipBits.bind(this),y=this.skipEG.bind(this),g=this.skipUEG.bind(this),v=this.skipScalingList.bind(this);if(d(),e=d(),f(5),m(3),d(),g(),100===e||110===e||122===e||244===e||44===e||83===e||86===e||118===e||128===e){var b=p();if(3===b&&m(1),g(),g(),m(1),h())for(i=3!==b?8:12,a=0;a<i;a++)h()&&v(a<6?16:64)}g();var _=p();if(0===_)p();else if(1===_)for(m(1),y(),y(),t=p(),a=0;a<t;a++)y();g(),m(1),r=p(),n=p(),o=f(1),0===o&&m(1),m(1),h()&&(s=p(),l=p(),u=p(),c=p());var E=[1,1];if(h()&&h()){switch(d()){case 1:E=[1,1];break;case 2:E=[12,11];break;case 3:E=[10,11];break;case 4:E=[16,11];break;case 5:E=[40,33];break;case 6:E=[24,11];break;case 7:E=[20,11];break;case 8:E=[32,11];break;case 9:E=[80,33];break;case 10:E=[18,11];break;case 11:E=[15,11];break;case 12:E=[64,33];break;case 13:E=[160,99];break;case 14:E=[4,3];break;case 15:E=[3,2];break;case 16:E=[2,1];break;case 255:E=[d()<<8|d(),d()<<8|d()]}}return{width:Math.ceil(16*(r+1)-2*s-2*l),height:(2-o)*(n+1)*16-(o?2:4)*(u+c),pixelRatio:E}},e.prototype.readSliceType=function(){return this.readUByte(),this.readUEG(),this.readUEG()},e}(),Y=q,X=function(){function e(t,r,n,o){_(this,e),this.decryptdata=n,this.discardEPB=o,this.decrypter=new F(t,r)}return e.prototype.decryptBuffer=function(e,t){this.decrypter.decrypt(e,this.decryptdata.key.buffer,this.decryptdata.iv.buffer,t)},e.prototype.decryptAacSample=function(e,t,r,n){var o=e[t].unit,i=o.subarray(16,o.length-o.length%16),a=i.buffer.slice(i.byteOffset,i.byteOffset+i.length),s=this;this.decryptBuffer(a,function(i){i=new Uint8Array(i),o.set(i,16),n||s.decryptAacSamples(e,t+1,r)})},e.prototype.decryptAacSamples=function(e,t,r){for(;;t++){if(t>=e.length)return void r();if(!(e[t].unit.length<32)){var n=this.decrypter.isSync();if(this.decryptAacSample(e,t,r,n),!n)return}}},e.prototype.getAvcEncryptedData=function(e){for(var t=16*Math.floor((e.length-48)/160)+16,r=new Int8Array(t),n=0,o=32;o<=e.length-16;o+=160,n+=16)r.set(e.subarray(o,o+16),n);return r},e.prototype.getAvcDecryptedUnit=function(e,t){t=new Uint8Array(t);for(var r=0,n=32;n<=e.length-16;n+=160,r+=16)e.set(t.subarray(r,r+16),n);return e},e.prototype.decryptAvcSample=function(e,t,r,n,o,i){var a=this.discardEPB(o.data),s=this.getAvcEncryptedData(a),l=this;this.decryptBuffer(s.buffer,function(s){o.data=l.getAvcDecryptedUnit(a,s),i||l.decryptAvcSamples(e,t,r+1,n)})},e.prototype.decryptAvcSamples=function(e,t,r,n){for(;;t++,r=0){if(t>=e.length)return void n();for(var o=e[t].units;!(r>=o.length);r++){var i=o[r];if(!(i.length<=48||1!==i.type&&5!==i.type)){var a=this.decrypter.isSync();if(this.decryptAvcSample(e,t,r,n,i,a),!a)return}}}},e}(),Q=X,$=function(){function e(t,r,n,o){E(this,e),this.observer=t,this.config=n,this.typeSupported=o,this.remuxer=r,this.sampleAes=null}return e.prototype.setDecryptData=function(e){null!=e&&null!=e.key&&"SAMPLE-AES"===e.method?this.sampleAes=new Q(this.observer,this.config,e,this.discardEPB):this.sampleAes=null},e.probe=function(e){return e.length>=564&&71===e[0]&&71===e[188]&&71===e[376]},e.prototype.resetInitSegment=function(e,t,r,n){this.pmtParsed=!1,this._pmtId=-1,this._avcTrack={container:"video/mp2t",type:"video",id:-1,inputTimeScale:9e4,sequenceNumber:0,samples:[],len:0,dropped:0},this._audioTrack={container:"video/mp2t",type:"audio",id:-1,inputTimeScale:9e4,duration:n,sequenceNumber:0,samples:[],len:0,isAAC:!0},this._id3Track={type:"id3",id:-1,inputTimeScale:9e4,sequenceNumber:0,samples:[],len:0},this._txtTrack={type:"text",id:-1,inputTimeScale:9e4,sequenceNumber:0,samples:[],len:0},this.aacOverFlow=null,this.aacLastPTS=null,this.avcSample=null,this.audioCodec=t,this.videoCodec=r,this._duration=n},e.prototype.resetTimeStamp=function(){},e.prototype.append=function(e,t,r,n){var o,i,a,s,l,u=e.length,c=!1;this.contiguous=r;var d=this.pmtParsed,f=this._avcTrack,p=this._audioTrack,h=this._id3Track,m=f.id,y=p.id,g=h.id,v=this._pmtId,b=f.pesData,_=p.pesData,E=h.pesData,T=this._parsePAT,w=this._parsePMT,S=this._parsePES,C=this._parseAVCPES.bind(this),R=this._parseAACPES.bind(this),k=this._parseMPEGPES.bind(this),x=this._parseID3PES.bind(this);for(u-=u%188,o=0;o<u;o+=188)if(71===e[o]){if(i=!!(64&e[o+1]),a=((31&e[o+1])<<8)+e[o+2],(48&e[o+3])>>4>1){if((s=o+5+e[o+4])===o+188)continue}else s=o+4;switch(a){case m:i&&(b&&(l=S(b))&&C(l,!1),b={data:[],size:0}),b&&(b.data.push(e.subarray(s,o+188)),b.size+=o+188-s);break;case y:i&&(_&&(l=S(_))&&(p.isAAC?R(l):k(l)),_={data:[],size:0}),_&&(_.data.push(e.subarray(s,o+188)),_.size+=o+188-s);break;case g:i&&(E&&(l=S(E))&&x(l),E={data:[],size:0}),E&&(E.data.push(e.subarray(s,o+188)),E.size+=o+188-s);break;case 0:i&&(s+=e[s]+1),v=this._pmtId=T(e,s);break;case v:i&&(s+=e[s]+1);var O=w(e,s,!0===this.typeSupported.mpeg||!0===this.typeSupported.mp3,null!=this.sampleAes);m=O.avc,m>0&&(f.id=m),y=O.audio,y>0&&(p.id=y,p.isAAC=O.isAAC),g=O.id3,g>0&&(h.id=g),c&&!d&&(N.b.log("reparse from beginning"),c=!1,o=-188),d=this.pmtParsed=!0;break;case 17:case 8191:break;default:c=!0}}else this.observer.trigger(j.a.ERROR,{type:A.b.MEDIA_ERROR,details:A.a.FRAG_PARSING_ERROR,fatal:!1,reason:"TS packet did not start with 0x47"});b&&(l=S(b))?(C(l,!0),f.pesData=null):f.pesData=b,_&&(l=S(_))?(p.isAAC?R(l):k(l),p.pesData=null):(_&&_.size&&N.b.log("last AAC PES packet truncated,might overlap between fragments"),p.pesData=_),E&&(l=S(E))?(x(l),h.pesData=null):h.pesData=E,null==this.sampleAes?this.remuxer.remux(p,f,h,this._txtTrack,t,r,n):this.decryptAndRemux(p,f,h,this._txtTrack,t,r,n)},e.prototype.decryptAndRemux=function(e,t,r,n,o,i,a){if(e.samples&&e.isAAC){var s=this;this.sampleAes.decryptAacSamples(e.samples,0,function(){s.decryptAndRemuxAvc(e,t,r,n,o,i,a)})}else this.decryptAndRemuxAvc(e,t,r,n,o,i,a)},e.prototype.decryptAndRemuxAvc=function(e,t,r,n,o,i,a){if(t.samples){var s=this;this.sampleAes.decryptAvcSamples(t.samples,0,0,function(){s.remuxer.remux(e,t,r,n,o,i,a)})}else this.remuxer.remux(e,t,r,n,o,i,a)},e.prototype.destroy=function(){this._initPTS=this._initDTS=void 0,this._duration=0},e.prototype._parsePAT=function(e,t){return(31&e[t+10])<<8|e[t+11]},e.prototype._parsePMT=function(e,t,r,n){var o,i,a,s,l={audio:-1,avc:-1,id3:-1,isAAC:!0};for(o=(15&e[t+1])<<8|e[t+2],i=t+3+o-4,a=(15&e[t+10])<<8|e[t+11],t+=12+a;t<i;){switch(s=(31&e[t+1])<<8|e[t+2],e[t]){case 207:if(!n){N.b.log("unkown stream type:"+e[t]);break}case 15:-1===l.audio&&(l.audio=s);break;case 21:-1===l.id3&&(l.id3=s);break;case 219:if(!n){N.b.log("unkown stream type:"+e[t]);break}case 27:-1===l.avc&&(l.avc=s);break;case 3:case 4:r?-1===l.audio&&(l.audio=s,l.isAAC=!1):N.b.log("MPEG audio found, not supported in this browser for now");break;case 36:N.b.warn("HEVC stream type found, not supported for now");break;default:N.b.log("unkown stream type:"+e[t])}t+=5+((15&e[t+3])<<8|e[t+4])}return l},e.prototype._parsePES=function(e){var t,r,n,o,i,a,s,l,u=0,c=e.data;if(!e||0===e.size)return null;for(;c[0].length<19&&c.length>1;){var d=new Uint8Array(c[0].length+c[1].length);d.set(c[0]),d.set(c[1],c[0].length),c[0]=d,c.splice(1,1)}if(t=c[0],1===(t[0]<<16)+(t[1]<<8)+t[2]){if((n=(t[4]<<8)+t[5])&&n>e.size-6)return null;r=t[7],192&r&&(a=536870912*(14&t[9])+4194304*(255&t[10])+16384*(254&t[11])+128*(255&t[12])+(254&t[13])/2,a>4294967295&&(a-=8589934592),64&r?(s=536870912*(14&t[14])+4194304*(255&t[15])+16384*(254&t[16])+128*(255&t[17])+(254&t[18])/2,s>4294967295&&(s-=8589934592),a-s>54e5&&(N.b.warn(Math.round((a-s)/9e4)+"s delta between PTS and DTS, align them"),a=s)):s=a),o=t[8],l=o+9,e.size-=l,i=new Uint8Array(e.size);for(var f=0,p=c.length;f<p;f++){t=c[f];var h=t.byteLength;if(l){if(l>h){l-=h;continue}t=t.subarray(l),h-=l,l=0}i.set(t,u),u+=h}return n&&(n-=o+3),{data:i,pts:a,dts:s,len:n}}return null},e.prototype.pushAccesUnit=function(e,t){if(e.units.length&&e.frame){var r=t.samples,n=r.length;!this.config.forceKeyFrameOnDiscontinuity||!0===e.key||t.sps&&(n||this.contiguous)?(e.id=n,r.push(e)):t.dropped++}e.debug.length&&N.b.log(e.pts+"/"+e.dts+":"+e.debug)},e.prototype._parseAVCPES=function(e,t){var r,n,o,i=this,a=this._avcTrack,s=this._parseAVCNALu(e.data),l=this.avcSample,u=!1,c=this.pushAccesUnit.bind(this),d=function(e,t,r,n){return{key:e,pts:t,dts:r,units:[],debug:n}};e.data=null,l&&s.length&&!a.audFound&&(c(l,a),l=this.avcSample=d(!1,e.pts,e.dts,"")),s.forEach(function(t){switch(t.type){case 1:n=!0,l||(l=i.avcSample=d(!0,e.pts,e.dts,"")),l.frame=!0;var s=t.data;if(u&&s.length>4){var f=new Y(s).readSliceType();2!==f&&4!==f&&7!==f&&9!==f||(l.key=!0)}break;case 5:n=!0,l||(l=i.avcSample=d(!0,e.pts,e.dts,"")),l.key=!0,l.frame=!0;break;case 6:n=!0,r=new Y(i.discardEPB(t.data)),r.readUByte();for(var p=0,h=0,m=!1,y=0;!m&&r.bytesAvailable>1;){p=0;do{y=r.readUByte(),p+=y}while(255===y);h=0;do{y=r.readUByte(),h+=y}while(255===y);if(4===p&&0!==r.bytesAvailable){m=!0;if(181===r.readUByte()){if(49===r.readUShort()){if(1195456820===r.readUInt()){if(3===r.readUByte()){var g=r.readUByte(),v=r.readUByte(),b=31&g,_=[g,v];for(o=0;o<b;o++)_.push(r.readUByte()),_.push(r.readUByte()),_.push(r.readUByte());i._insertSampleInOrder(i._txtTrack.samples,{type:3,pts:e.pts,bytes:_})}}}}}else if(h<r.bytesAvailable)for(o=0;o<h;o++)r.readUByte()}break;case 7:if(n=!0,u=!0,!a.sps){r=new Y(t.data);var E=r.readSPS();a.width=E.width,a.height=E.height,a.pixelRatio=E.pixelRatio,a.sps=[t.data],a.duration=i._duration;var T=t.data.subarray(1,4),w="avc1.";for(o=0;o<3;o++){var S=T[o].toString(16);S.length<2&&(S="0"+S),w+=S}a.codec=w}break;case 8:n=!0,a.pps||(a.pps=[t.data]);break;case 9:n=!1,a.audFound=!0,l&&c(l,a),l=i.avcSample=d(!1,e.pts,e.dts,"");break;case 12:n=!1;break;default:n=!1,l&&(l.debug+="unknown NAL "+t.type+" ")}if(l&&n){l.units.push(t)}}),t&&l&&(c(l,a),this.avcSample=null)},e.prototype._insertSampleInOrder=function(e,t){var r=e.length;if(r>0){if(t.pts>=e[r-1].pts)e.push(t);else for(var n=r-1;n>=0;n--)if(t.pts<e[n].pts){e.splice(n,0,t);break}}else e.push(t)},e.prototype._getLastNalUnit=function(){var e=this.avcSample,t=void 0;if(!e||0===e.units.length){var r=this._avcTrack,n=r.samples;e=n[n.length-1]}if(e){var o=e.units;t=o[o.length-1]}return t},e.prototype._parseAVCNALu=function(e){var t,r,n,o,i,a=0,s=e.byteLength,l=this._avcTrack,u=l.naluState||0,c=u,d=[],f=-1;for(-1===u&&(f=0,i=31&e[0],u=0,a=1);a<s;)if(t=e[a++],u)if(1!==u)if(t)if(1===t){if(f>=0)n={data:e.subarray(f,a-u-1),type:i},d.push(n);else{var p=this._getLastNalUnit();if(p&&(c&&a<=4-c&&p.state&&(p.data=p.data.subarray(0,p.data.byteLength-c)),(r=a-u-1)>0)){var h=new Uint8Array(p.data.byteLength+r);h.set(p.data,0),h.set(e.subarray(0,r),p.data.byteLength),p.data=h}}a<s?(o=31&e[a],f=a,i=o,u=0):u=-1}else u=0;else u=3;else u=t?0:2;else u=t?0:1;if(f>=0&&u>=0&&(n={data:e.subarray(f,s),type:i,state:u},d.push(n)),0===d.length){var m=this._getLastNalUnit();if(m){var y=new Uint8Array(m.data.byteLength+e.byteLength);y.set(m.data,0),y.set(e,m.data.byteLength),m.data=y}}return l.naluState=u,d},e.prototype.discardEPB=function(e){for(var t,r,n=e.byteLength,o=[],i=1;i<n-2;)0===e[i]&&0===e[i+1]&&3===e[i+2]?(o.push(i+2),i+=2):i++;if(0===o.length)return e;t=n-o.length,r=new Uint8Array(t);var a=0;for(i=0;i<t;a++,i++)a===o[0]&&(a++,o.shift()),r[i]=e[a];return r},e.prototype._parseAACPES=function(e){var t,r,n,o,i,a=this._audioTrack,s=e.data,l=e.pts,u=this.aacOverFlow,c=this.aacLastPTS;if(u){var f=new Uint8Array(u.byteLength+s.byteLength);f.set(u,0),f.set(s,u.byteLength),s=f}for(n=0,i=s.length;n<i-1&&!d(s,n);n++);if(n){var m,g;if(n<i-1?(m="AAC PES did not start with ADTS header,offset:"+n,g=!1):(m="no ADTS header found in AAC PES",g=!0),N.b.warn("parsing error:"+m),this.observer.trigger(j.a.ERROR,{type:A.b.MEDIA_ERROR,details:A.a.FRAG_PARSING_ERROR,fatal:g,reason:m}),g)return}if(p(a,this.observer,s,n,this.audioCodec),r=0,t=h(a.samplerate),u&&c){var v=c+t;Math.abs(v-l)>1&&(N.b.log("AAC: align PTS for overlapping frames by "+Math.round((v-l)/90)),l=v)}for(;n<i;)if(d(s,n)&&n+5<i){var b=y(a,s,n,l,r);if(!b)break;n+=b.length,o=b.sample.pts,r++}else n++;u=n<i?s.subarray(n,i):null,this.aacOverFlow=u,this.aacLastPTS=o},e.prototype._parseMPEGPES=function(e){for(var t=e.data,r=t.length,n=0,o=0,i=e.pts;o<r;)if(z.isHeader(t,o)){var a=z.appendFrame(this._audioTrack,t,o,i,n);if(!a)break;o+=a.length,n++}else o++},e.prototype._parseID3PES=function(e){this._id3Track.samples.push(e)},e}(),J=$,Z=function(){function e(t,r,n){T(this,e),this.observer=t,this.config=n,this.remuxer=r}return e.prototype.resetInitSegment=function(e,t,r,n){this._audioTrack={container:"audio/mpeg",type:"audio",id:-1,sequenceNumber:0,isAAC:!1,samples:[],len:0,manifestCodec:t,duration:n,inputTimeScale:9e4}},e.prototype.resetTimeStamp=function(){},e.probe=function(e){var t,r,n=U.a.getID3Data(e,0);if(n&&void 0!==U.a.getTimeStamp(n))for(t=n.length,r=Math.min(e.length-1,t+100);t<r;t++)if(z.probe(e,t))return N.b.log("MPEG Audio sync word found !"),!0;return!1},e.prototype.append=function(e,t,r,n){for(var o=U.a.getID3Data(e,0),i=90*U.a.getTimeStamp(o),a=o.length,s=e.length,l=0,u=0,c=this._audioTrack,d=[{pts:i,dts:i,data:o}];a<s;)if(z.isHeader(e,a)){var f=z.appendFrame(c,e,a,i,l);if(!f)break;a+=f.length,u=f.sample.pts,l++}else U.a.isHeader(e,a)?(o=U.a.getID3Data(e,a),d.push({pts:u,dts:u,data:o}),a+=o.length):a++;this.remuxer.remux(c,{samples:[]},{samples:d,inputTimeScale:9e4},{samples:[]},t,r,n)},e.prototype.destroy=function(){},e}(),ee=Z,te=function(){function e(){w(this,e)}return e.getSilentFrame=function(e,t){switch(e){case"mp4a.40.2":if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]);break;default:if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null},e}(),re=te,ne=Math.pow(2,32)-1,oe=function(){function e(){S(this,e)}return e.init=function(){e.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],".mp3":[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[]};var t;for(t in e.types)e.types.hasOwnProperty(t)&&(e.types[t]=[t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2),t.charCodeAt(3)]);var r=new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),n=new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]);e.HDLR_TYPES={video:r,audio:n};var o=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),i=new Uint8Array([0,0,0,0,0,0,0,0]);e.STTS=e.STSC=e.STCO=i,e.STSZ=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),e.VMHD=new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),e.SMHD=new Uint8Array([0,0,0,0,0,0,0,0]),e.STSD=new Uint8Array([0,0,0,0,0,0,0,1]);var a=new Uint8Array([105,115,111,109]),s=new Uint8Array([97,118,99,49]),l=new Uint8Array([0,0,0,1]);e.FTYP=e.box(e.types.ftyp,a,l,a,s),e.DINF=e.box(e.types.dinf,e.box(e.types.dref,o))},e.box=function(e){for(var t,r=Array.prototype.slice.call(arguments,1),n=8,o=r.length,i=o;o--;)n+=r[o].byteLength;for(t=new Uint8Array(n),t[0]=n>>24&255,t[1]=n>>16&255,t[2]=n>>8&255,t[3]=255&n,t.set(e,4),o=0,n=8;o<i;o++)t.set(r[o],n),n+=r[o].byteLength;return t},e.hdlr=function(t){return e.box(e.types.hdlr,e.HDLR_TYPES[t])},e.mdat=function(t){return e.box(e.types.mdat,t)},e.mdhd=function(t,r){r*=t;var n=Math.floor(r/(ne+1)),o=Math.floor(r%(ne+1));return e.box(e.types.mdhd,new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,t>>24&255,t>>16&255,t>>8&255,255&t,n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o,85,196,0,0]))},e.mdia=function(t){return e.box(e.types.mdia,e.mdhd(t.timescale,t.duration),e.hdlr(t.type),e.minf(t))},e.mfhd=function(t){return e.box(e.types.mfhd,new Uint8Array([0,0,0,0,t>>24,t>>16&255,t>>8&255,255&t]))},e.minf=function(t){return"audio"===t.type?e.box(e.types.minf,e.box(e.types.smhd,e.SMHD),e.DINF,e.stbl(t)):e.box(e.types.minf,e.box(e.types.vmhd,e.VMHD),e.DINF,e.stbl(t))},e.moof=function(t,r,n){return e.box(e.types.moof,e.mfhd(t),e.traf(n,r))},e.moov=function(t){for(var r=t.length,n=[];r--;)n[r]=e.trak(t[r]);return e.box.apply(null,[e.types.moov,e.mvhd(t[0].timescale,t[0].duration)].concat(n).concat(e.mvex(t)))},e.mvex=function(t){for(var r=t.length,n=[];r--;)n[r]=e.trex(t[r]);return e.box.apply(null,[e.types.mvex].concat(n))},e.mvhd=function(t,r){r*=t;var n=Math.floor(r/(ne+1)),o=Math.floor(r%(ne+1)),i=new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,t>>24&255,t>>16&255,t>>8&255,255&t,n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return e.box(e.types.mvhd,i)},e.sdtp=function(t){var r,n,o=t.samples||[],i=new Uint8Array(4+o.length);for(n=0;n<o.length;n++)r=o[n].flags,i[n+4]=r.dependsOn<<4|r.isDependedOn<<2|r.hasRedundancy;return e.box(e.types.sdtp,i)},e.stbl=function(t){return e.box(e.types.stbl,e.stsd(t),e.box(e.types.stts,e.STTS),e.box(e.types.stsc,e.STSC),e.box(e.types.stsz,e.STSZ),e.box(e.types.stco,e.STCO))},e.avc1=function(t){var r,n,o,i=[],a=[];for(r=0;r<t.sps.length;r++)n=t.sps[r],o=n.byteLength,i.push(o>>>8&255),i.push(255&o),i=i.concat(Array.prototype.slice.call(n));for(r=0;r<t.pps.length;r++)n=t.pps[r],o=n.byteLength,a.push(o>>>8&255),a.push(255&o),a=a.concat(Array.prototype.slice.call(n));var s=e.box(e.types.avcC,new Uint8Array([1,i[3],i[4],i[5],255,224|t.sps.length].concat(i).concat([t.pps.length]).concat(a))),l=t.width,u=t.height,c=t.pixelRatio[0],d=t.pixelRatio[1];return e.box(e.types.avc1,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,l>>8&255,255&l,u>>8&255,255&u,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),s,e.box(e.types.btrt,new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192])),e.box(e.types.pasp,new Uint8Array([c>>24,c>>16&255,c>>8&255,255&c,d>>24,d>>16&255,d>>8&255,255&d])))},e.esds=function(e){var t=e.config.length;return new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e.config).concat([6,1,2]))},e.mp4a=function(t){var r=t.samplerate;return e.box(e.types.mp4a,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t.channelCount,0,16,0,0,0,0,r>>8&255,255&r,0,0]),e.box(e.types.esds,e.esds(t)))},e.mp3=function(t){var r=t.samplerate;return e.box(e.types[".mp3"],new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t.channelCount,0,16,0,0,0,0,r>>8&255,255&r,0,0]))},e.stsd=function(t){return"audio"===t.type?t.isAAC||"mp3"!==t.codec?e.box(e.types.stsd,e.STSD,e.mp4a(t)):e.box(e.types.stsd,e.STSD,e.mp3(t)):e.box(e.types.stsd,e.STSD,e.avc1(t))},e.tkhd=function(t){var r=t.id,n=t.duration*t.timescale,o=t.width,i=t.height,a=Math.floor(n/(ne+1)),s=Math.floor(n%(ne+1));return e.box(e.types.tkhd,new Uint8Array([1,0,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,r>>24&255,r>>16&255,r>>8&255,255&r,0,0,0,0,a>>24,a>>16&255,a>>8&255,255&a,s>>24,s>>16&255,s>>8&255,255&s,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,o>>8&255,255&o,0,0,i>>8&255,255&i,0,0]))},e.traf=function(t,r){var n=e.sdtp(t),o=t.id,i=Math.floor(r/(ne+1)),a=Math.floor(r%(ne+1));return e.box(e.types.traf,e.box(e.types.tfhd,new Uint8Array([0,0,0,0,o>>24,o>>16&255,o>>8&255,255&o])),e.box(e.types.tfdt,new Uint8Array([1,0,0,0,i>>24,i>>16&255,i>>8&255,255&i,a>>24,a>>16&255,a>>8&255,255&a])),e.trun(t,n.length+16+20+8+16+8+8),n)},e.trak=function(t){return t.duration=t.duration||4294967295,e.box(e.types.trak,e.tkhd(t),e.mdia(t))},e.trex=function(t){var r=t.id;return e.box(e.types.trex,new Uint8Array([0,0,0,0,r>>24,r>>16&255,r>>8&255,255&r,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]))},e.trun=function(t,r){var n,o,i,a,s,l,u=t.samples||[],c=u.length,d=12+16*c,f=new Uint8Array(d);for(r+=8+d,f.set([0,0,15,1,c>>>24&255,c>>>16&255,c>>>8&255,255&c,r>>>24&255,r>>>16&255,r>>>8&255,255&r],0),n=0;n<c;n++)o=u[n],i=o.duration,a=o.size,s=o.flags,l=o.cts,f.set([i>>>24&255,i>>>16&255,i>>>8&255,255&i,a>>>24&255,a>>>16&255,a>>>8&255,255&a,s.isLeading<<2|s.dependsOn,s.isDependedOn<<6|s.hasRedundancy<<4|s.paddingValue<<1|s.isNonSync,61440&s.degradPrio,15&s.degradPrio,l>>>24&255,l>>>16&255,l>>>8&255,255&l],12+16*n);return e.box(e.types.trun,f)},e.initSegment=function(t){e.types||e.init();var r,n=e.moov(t);return r=new Uint8Array(e.FTYP.byteLength+n.byteLength),r.set(e.FTYP),r.set(n,e.FTYP.byteLength),r},e}(),ie=oe,ae=function(){function e(t,r,n,o){C(this,e),this.observer=t,this.config=r,this.typeSupported=n;var i=navigator.userAgent;this.isSafari=o&&o.indexOf("Apple")>-1&&i&&!i.match("CriOS"),this.ISGenerated=!1}return e.prototype.destroy=function(){},e.prototype.resetTimeStamp=function(e){this._initPTS=this._initDTS=e},e.prototype.resetInitSegment=function(){this.ISGenerated=!1},e.prototype.remux=function(e,t,r,n,o,i,a){if(this.ISGenerated||this.generateIS(e,t,o),this.ISGenerated){var s=e.samples.length,l=t.samples.length,u=o,c=o;if(s&&l){var d=(e.samples[0].dts-t.samples[0].dts)/t.inputTimeScale;u+=Math.max(0,d),c+=Math.max(0,-d)}if(s){e.timescale||(N.b.warn("regenerate InitSegment as audio detected"),this.generateIS(e,t,o));var f=this.remuxAudio(e,u,i,a);if(l){var p=void 0;f&&(p=f.endPTS-f.startPTS),t.timescale||(N.b.warn("regenerate InitSegment as video detected"),this.generateIS(e,t,o)),this.remuxVideo(t,c,i,p,a)}}else{var h=void 0;l&&(h=this.remuxVideo(t,c,i,a)),h&&e.codec&&this.remuxEmptyAudio(e,u,i,h)}}r.samples.length&&this.remuxID3(r,o),n.samples.length&&this.remuxText(n,o),this.observer.trigger(j.a.FRAG_PARSED)},e.prototype.generateIS=function(e,t,r){var n,o,i=this.observer,a=e.samples,s=t.samples,l=this.typeSupported,u="audio/mp4",c={},d={tracks:c},f=void 0===this._initPTS;if(f&&(n=o=1/0),e.config&&a.length&&(e.timescale=e.samplerate,N.b.log("audio sampling rate : "+e.samplerate),e.isAAC||(l.mpeg?(u="audio/mpeg",e.codec=""):l.mp3&&(e.codec="mp3")),c.audio={container:u,codec:e.codec,initSegment:!e.isAAC&&l.mpeg?new Uint8Array:ie.initSegment([e]),metadata:{channelCount:e.channelCount}},f&&(n=o=a[0].pts-e.inputTimeScale*r)),t.sps&&t.pps&&s.length){var p=t.inputTimeScale;t.timescale=p,c.video={container:"video/mp4",codec:t.codec,initSegment:ie.initSegment([t]),metadata:{width:t.width,height:t.height}},f&&(n=Math.min(n,s[0].pts-p*r),o=Math.min(o,s[0].dts-p*r),this.observer.trigger(j.a.INIT_PTS_FOUND,{initPTS:n}))}Object.keys(c).length?(i.trigger(j.a.FRAG_PARSING_INIT_SEGMENT,d),this.ISGenerated=!0,f&&(this._initPTS=n,this._initDTS=o)):i.trigger(j.a.ERROR,{type:A.b.MEDIA_ERROR,details:A.a.FRAG_PARSING_ERROR,fatal:!1,reason:"no audio/video samples found"})},e.prototype.remuxVideo=function(e,t,r,n,o){var i,a,s,l,u,c,d,f=8,p=e.timescale,h=e.samples,m=[],y=h.length,g=this._PTSNormalize,v=this._initDTS,b=this.nextAvcDts,_=this.isSafari;_&&(r|=h.length&&b&&(o&&Math.abs(t-b/p)<.1||Math.abs(h[0].pts-b-v)<p/5)),r||(b=t*p),h.forEach(function(e){e.pts=g(e.pts-v,b),e.dts=g(e.dts-v,b)}),h.sort(function(e,t){var r=e.dts-t.dts,n=e.pts-t.pts;return r||(n||e.id-t.id)});var E=h.reduce(function(e,t){return Math.max(Math.min(e,t.pts-t.dts),-18e3)},0);if(E<0){N.b.warn("PTS < DTS detected in video samples, shifting DTS by "+Math.round(E/90)+" ms to overcome this issue");for(var T=0;T<h.length;T++)h[T].dts+=E}var w=h[0];u=Math.max(w.dts,0),l=Math.max(w.pts,0);var S=Math.round((u-b)/90);r&&S&&(S>1?N.b.log("AVC:"+S+" ms hole between fragments detected,filling it"):S<-1&&N.b.log("AVC:"+-S+" ms overlapping between fragments detected"),u=b,h[0].dts=u,l=Math.max(l-S,b),h[0].pts=l,N.b.log("Video/PTS/DTS adjusted: "+Math.round(l/90)+"/"+Math.round(u/90)+",delta:"+S+" ms")),w=h[h.length-1],d=Math.max(w.dts,0),c=Math.max(w.pts,0,d),_&&(i=Math.round((d-u)/(h.length-1)));for(var C=0,R=0,k=0;k<y;k++){for(var x=h[k],O=x.units,P=O.length,L=0,D=0;D<P;D++)L+=O[D].data.length;R+=L,C+=P,x.length=L,x.dts=_?u+k*i:Math.max(x.dts,u),x.pts=Math.max(x.pts,x.dts)}var I=R+4*C+8;try{a=new Uint8Array(I)}catch(e){return void this.observer.trigger(j.a.ERROR,{type:A.b.MUX_ERROR,details:A.a.REMUX_ALLOC_ERROR,fatal:!1,bytes:I,reason:"fail allocating video mdat "+I})}var M=new DataView(a.buffer);M.setUint32(0,I),a.set(ie.types.mdat,4);for(var F=0;F<y;F++){for(var U=h[F],B=U.units,G=0,H=void 0,W=0,V=B.length;W<V;W++){var K=B[W],z=K.data,q=K.data.byteLength;M.setUint32(f,q),f+=4,a.set(z,f),f+=q,G+=4+q}if(_)H=Math.max(0,i*Math.round((U.pts-U.dts)/i));else{if(F<y-1)i=h[F+1].dts-U.dts;else{var Y=this.config,X=U.dts-h[F>0?F-1:F].dts;if(Y.stretchShortVideoTrack){var Q=Y.maxBufferHole,$=Y.maxSeekHole,J=Math.floor(Math.min(Q,$)*p),Z=(n?l+n*p:this.nextAudioPts)-U.pts;Z>J?(i=Z-X,i<0&&(i=X),N.b.log("It is approximately "+Z/90+" ms to the next segment; using duration "+i/90+" ms for the last video frame.")):i=X}else i=X}H=Math.round(U.pts-U.dts)}m.push({size:G,duration:i,cts:H,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:U.key?2:1,isNonSync:U.key?0:1}})}this.nextAvcDts=d+i;var ee=e.dropped;if(e.len=0,e.nbNalu=0,e.dropped=0,m.length&&navigator.userAgent.toLowerCase().indexOf("chrome")>-1){var te=m[0].flags;te.dependsOn=2,te.isNonSync=0}e.samples=m,s=ie.moof(e.sequenceNumber++,u,e),e.samples=[];var re={data1:s,data2:a,startPTS:l/p,endPTS:(c+i)/p,startDTS:u/p,endDTS:this.nextAvcDts/p,type:"video",nb:m.length,dropped:ee};return this.observer.trigger(j.a.FRAG_PARSING_DATA,re),re},e.prototype.remuxAudio=function(e,t,r,n){var o,i,a,s,l,u,c,d=e.inputTimeScale,f=e.timescale,p=d/f,h=e.isAAC?1024:1152,m=h*p,y=this._PTSNormalize,g=this._initDTS,v=!e.isAAC&&this.typeSupported.mpeg,b=e.samples,_=[],E=this.nextAudioPts;if(r|=b.length&&E&&(n&&Math.abs(t-E/d)<.1||Math.abs(b[0].pts-E-g)<20*m),r||(E=t*d),b.forEach(function(e){e.pts=e.dts=y(e.pts-g,E)}),b.sort(function(e,t){return e.pts-t.pts}),n&&e.isAAC)for(var T=this.config.maxAudioFramesDrift,w=0,S=E;w<b.length;){var C,R=b[w],k=R.pts;C=k-S;var x=Math.abs(1e3*C/d);if(C<=-T*m)N.b.warn("Dropping 1 audio frame @ "+(S/d).toFixed(3)+"s due to "+Math.round(x)+" ms overlap."),b.splice(w,1),e.len-=R.unit.length;else if(C>=T*m&&x<1e4&&S){var O=Math.round(C/m);N.b.warn("Injecting "+O+" audio frame @ "+(S/d).toFixed(3)+"s due to "+Math.round(1e3*C/d)+" ms gap.");for(var P=0;P<O;P++){var L=Math.max(S,0);a=re.getSilentFrame(e.manifestCodec||e.codec,e.channelCount),a||(N.b.log("Unable to get silent frame for given audio codec; duplicating last frame instead."),a=R.unit.subarray()),b.splice(w,0,{unit:a,pts:L,dts:L}),e.len+=a.length,S+=m,w++}R.pts=R.dts=S,S+=m,w++}else Math.abs(C),R.pts=R.dts=S,S+=m,w++}for(var D=0,I=b.length;D<I;D++){var M=b[D],F=M.unit,U=M.pts;if(void 0!==c)i.duration=Math.round((U-c)/p);else{var B=Math.round(1e3*(U-E)/d),G=0;if(r&&e.isAAC&&B){if(B>0&&B<1e4)G=Math.round((U-E)/m),N.b.log(B+" ms hole between AAC samples detected,filling it"),G>0&&(a=re.getSilentFrame(e.manifestCodec||e.codec,e.channelCount),a||(a=F.subarray()),e.len+=G*a.length);else if(B<-12){N.b.log("drop overlapping AAC sample, expected/parsed/delta:"+(E/d).toFixed(3)+"s/"+(U/d).toFixed(3)+"s/"+-B+"ms"),e.len-=F.byteLength;continue}U=E}if(u=Math.max(0,U),!(e.len>0))return;var H=v?e.len:e.len+8;o=v?0:8;try{s=new Uint8Array(H)}catch(e){return void this.observer.trigger(j.a.ERROR,{type:A.b.MUX_ERROR,details:A.a.REMUX_ALLOC_ERROR,fatal:!1,bytes:H,reason:"fail allocating audio mdat "+H})}if(!v){new DataView(s.buffer).setUint32(0,H),s.set(ie.types.mdat,4)}for(var W=0;W<G;W++)a=re.getSilentFrame(e.manifestCodec||e.codec,e.channelCount),a||(N.b.log("Unable to get silent frame for given audio codec; duplicating this frame instead."),a=F.subarray()),s.set(a,o),o+=a.byteLength,i={size:a.byteLength,cts:0,duration:1024,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}},_.push(i)}s.set(F,o);var V=F.byteLength;o+=V,i={size:V,cts:0,duration:0,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}},_.push(i),c=U}var K=0,z=_.length;if(z>=2&&(K=_[z-2].duration,i.duration=K),z){this.nextAudioPts=E=c+p*K,e.len=0,e.samples=_,l=v?new Uint8Array:ie.moof(e.sequenceNumber++,u/p,e),e.samples=[];var q=u/d,Y=E/d,X={data1:l,data2:s,startPTS:q,endPTS:Y,startDTS:q,endDTS:Y,type:"audio",nb:z};return this.observer.trigger(j.a.FRAG_PARSING_DATA,X),X}return null},e.prototype.remuxEmptyAudio=function(e,t,r,n){var o=e.inputTimeScale,i=e.samplerate?e.samplerate:o,a=o/i,s=this.nextAudioPts,l=(void 0!==s?s:n.startDTS*o)+this._initDTS,u=n.endDTS*o+this._initDTS,c=1024*a,d=Math.ceil((u-l)/c),f=re.getSilentFrame(e.manifestCodec||e.codec,e.channelCount);if(N.b.warn("remux empty Audio"),!f)return void N.b.trace("Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!");for(var p=[],h=0;h<d;h++){var m=l+h*c;p.push({unit:f,pts:m,dts:m}),e.len+=f.length}e.samples=p,this.remuxAudio(e,t,r)},e.prototype.remuxID3=function(e,t){var r,n=e.samples.length,o=e.inputTimeScale,i=this._initPTS,a=this._initDTS;if(n){for(var s=0;s<n;s++)r=e.samples[s],r.pts=(r.pts-i)/o,r.dts=(r.dts-a)/o;this.observer.trigger(j.a.FRAG_PARSING_METADATA,{samples:e.samples})}e.samples=[],t=t},e.prototype.remuxText=function(e,t){e.samples.sort(function(e,t){return e.pts-t.pts});var r,n=e.samples.length,o=e.inputTimeScale,i=this._initPTS;if(n){for(var a=0;a<n;a++)r=e.samples[a],r.pts=(r.pts-i)/o;this.observer.trigger(j.a.FRAG_PARSING_USERDATA,{samples:e.samples})}e.samples=[],t=t},e.prototype._PTSNormalize=function(e,t){var r;if(void 0===t)return e;for(r=t<e?-8589934592:8589934592;Math.abs(e-t)>4294967296;)e+=r;return e},e}(),se=ae,le=function(){function e(t){R(this,e),this.observer=t}return e.prototype.destroy=function(){},e.prototype.resetTimeStamp=function(){},e.prototype.resetInitSegment=function(){},e.prototype.remux=function(e,t,r,n,o,i,a,s){var l=this.observer,u="";e&&(u+="audio"),t&&(u+="video"),l.trigger(j.a.FRAG_PARSING_DATA,{data1:s,startPTS:o,startDTS:o,type:u,nb:1,dropped:0}),l.trigger(j.a.FRAG_PARSED)},e}(),ue=le,ce=function(){function e(t,r,n,o){k(this,e),this.observer=t,this.typeSupported=r,this.config=n,this.vendor=o}return e.prototype.destroy=function(){var e=this.demuxer;e&&e.destroy()},e.prototype.push=function(e,t,r,n,o,i,a,s,l,u,c,d){if(e.byteLength>0&&null!=t&&null!=t.key&&"AES-128"===t.method){var f=this.decrypter;null==f&&(f=this.decrypter=new F(this.observer,this.config));var p,h=this;try{p=performance.now()}catch(e){p=Date.now()}f.decrypt(e,t.key.buffer,t.iv.buffer,function(e){var f;try{f=performance.now()}catch(e){f=Date.now()}h.observer.trigger(j.a.FRAG_DECRYPTED,{stats:{tstart:p,tdecrypt:f}}),h.pushDecrypted(new Uint8Array(e),t,new Uint8Array(r),n,o,i,a,s,l,u,c,d)})}else this.pushDecrypted(new Uint8Array(e),t,new Uint8Array(r),n,o,i,a,s,l,u,c,d)},e.prototype.pushDecrypted=function(e,t,r,n,o,i,a,s,l,u,c,d){var f=this.demuxer;if(!f||a&&!this.probe(e)){for(var p=this.observer,h=this.typeSupported,m=this.config,y=[{demux:J,remux:se},{demux:G,remux:se},{demux:ee,remux:se},{demux:V,remux:ue}],g=0,v=y.length;g<v;g++){var b=y[g],_=b.demux.probe;if(_(e)){var E=this.remuxer=new b.remux(p,m,h,this.vendor);f=new b.demux(p,E,m,h),this.probe=_;break}}if(!f)return void p.trigger(j.a.ERROR,{type:A.b.MEDIA_ERROR,details:A.a.FRAG_PARSING_ERROR,fatal:!0,reason:"no demux matching with content found"});this.demuxer=f}var T=this.remuxer;(a||s)&&(f.resetInitSegment(r,n,o,u),T.resetInitSegment()),a&&(f.resetTimeStamp(d),T.resetTimeStamp(d)),"function"==typeof f.setDecryptData&&f.setDecryptData(t),f.append(e,i,l,c)},e}();t.a=ce},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){var r=Me[t];return!!r&&!0===r[e.slice(0,4)]}function a(e){return MediaSource.isTypeSupported('video/mp4;codecs="'+e+'"')}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t,r){var n=e[t],o=e[r],i=o.startPTS;isNaN(i)?o.start=r>t?n.start+n.duration:Math.max(n.start-o.duration,0):r>t?(n.duration=i-n.start,n.duration<0&&Ae.b.warn("negative duration computed for frag "+n.sn+",level "+n.level+", there should be some duration drift between playlist and fragment!")):(o.duration=n.start-i,o.duration<0&&Ae.b.warn("negative duration computed for frag "+o.sn+",level "+o.level+", there should be some duration drift between playlist and fragment!"))}function v(e,t,r,n,o,i){var a=r;if(!isNaN(t.startPTS)){var s=Math.abs(t.startPTS-r);isNaN(t.deltaPTS)?t.deltaPTS=s:t.deltaPTS=Math.max(s,t.deltaPTS),a=Math.max(r,t.startPTS),r=Math.min(r,t.startPTS),n=Math.max(n,t.endPTS),o=Math.min(o,t.startDTS),i=Math.max(i,t.endDTS)}var l=r-t.start;t.start=t.startPTS=r,t.maxStartPTS=a,t.endPTS=n,t.startDTS=o,t.endDTS=i,t.duration=n-r;var u=t.sn;if(!e||u<e.startSN||u>e.endSN)return 0;var c,d,f;for(c=u-e.startSN,d=e.fragments,d[c]=t,f=c;f>0;f--)g(d,f,f-1);for(f=c;f<d.length-1;f++)g(d,f,f+1);return e.PTSKnown=!0,l}function b(e,t){var r,n=Math.max(e.startSN,t.startSN)-t.startSN,o=Math.min(e.endSN,t.endSN)-t.startSN,i=t.startSN-e.startSN,a=e.fragments,s=t.fragments,l=0;if(o<n)return void(t.PTSKnown=!1);for(var u=n;u<=o;u++){var c=a[i+u],d=s[u];d&&c&&(l=c.cc-d.cc,isNaN(c.startPTS)||(d.start=d.startPTS=c.startPTS,d.endPTS=c.endPTS,d.duration=c.duration,d.backtracked=c.backtracked,d.dropped=c.dropped,r=d))}if(l)for(Ae.b.log("discontinuity sliding from playlist, take drift into account"),u=0;u<s.length;u++)s[u].cc+=l;if(r)v(t,r,r.startPTS,r.endPTS,r.startDTS,r.endDTS);else if(i>=0&&i<a.length){var f=a[i].start;for(u=0;u<s.length;u++)s[u].start+=f}t.PTSKnown=e.PTSKnown}function _(e,t){for(var r=null,n=0;n<e.length;n+=1){var o=e[n];if(o&&o.cc===t){r=o;break}}return r}function E(e,t){return Je.search(e,function(e){return e.cc<t?1:e.cc>t?-1:0})}function T(e,t,r){var n=!1;return t&&t.details&&r&&(r.endCC>r.startCC||e&&e.cc<r.startCC)&&(n=!0),n}function w(e,t){var r=e.fragments,n=t.fragments;if(!n.length||!r.length)return void Ae.b.log("No fragments to align");var o=_(r,n[0].cc);return!o||o&&!o.startPTS?void Ae.b.log("No frag in previous level to align on"):o}function S(e,t){t.fragments.forEach(function(t){if(t){var r=t.start+e;t.start=t.startPTS=r,t.endPTS=r+t.duration}}),t.PTSKnown=!0}function C(e,t,r){if(T(e,t,r)){var n=w(t.details,r);n&&(Ae.b.log("Adjusting PTS using last level due to CC increase within current level"),S(n.start,r))}if(!1===r.PTSKnown&&t&&t.details){var o=t.details.programDateTime,i=r.programDateTime,a=(i-o)/1e3+t.details.fragments[0].start;isNaN(a)||(Ae.b.log("adjusting PTS using programDateTime delta, sliding:"+a.toFixed(3)),S(a,r))}}function R(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function k(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function j(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function A(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function x(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function O(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function P(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function L(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function D(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function I(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function N(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function M(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function F(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function U(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function B(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function G(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function H(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function W(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function V(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function K(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function z(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function q(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function Y(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function X(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function J(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function Z(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ee(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function te(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function re(){this.window=window,this.state="INITIAL",this.buffer="",this.decoder=new Vt,this.regionList=[]}function ne(e){function t(e,t,r,n){return 3600*(0|e)+60*(0|t)+(0|r)+(0|n)/1e3}var r=e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return r?r[3]?t(r[1],r[2],r[3].replace(":",""),r[4]):r[1]>59?t(r[1],r[2],0,r[4]):t(0,r[1],r[2],r[4]):null}function oe(){this.values=Object.create(null)}function ie(e,t,r,n){var o=n?e.split(n):[e];for(var i in o)if("string"==typeof o[i]){var a=o[i].split(r);if(2===a.length){var s=a[0],l=a[1];t(s,l)}}}function ae(e,t,r){function n(){var t=ne(e);if(null===t)throw new Error("Malformed timestamp: "+i);return e=e.replace(/^[^\sa-zA-Z-]+/,""),t}function o(){e=e.replace(/^\s+/,"")}var i=e;if(o(),t.startTime=n(),o(),"--\x3e"!==e.substr(0,3))throw new Error("Malformed time stamp (time stamps must be separated by '--\x3e'): "+i);e=e.substr(3),o(),t.endTime=n(),o(),function(e,t){var n=new oe;ie(e,function(e,t){switch(e){case"region":for(var o=r.length-1;o>=0;o--)if(r[o].id===t){n.set(e,r[o].region);break}break;case"vertical":n.alt(e,t,["rl","lr"]);break;case"line":var i=t.split(","),a=i[0];n.integer(e,a),n.percent(e,a)&&n.set("snapToLines",!1),n.alt(e,a,["auto"]),2===i.length&&n.alt("lineAlign",i[1],["start",zt,"end"]);break;case"position":i=t.split(","),n.percent(e,i[0]),2===i.length&&n.alt("positionAlign",i[1],["start",zt,"end","line-left","line-right","auto"]);break;case"size":n.percent(e,t);break;case"align":n.alt(e,t,["start",zt,"end","left","right"])}},/:/,/\s/),t.region=n.get("region",null),t.vertical=n.get("vertical","");var o=n.get("line","auto");"auto"===o&&-1===Kt.line&&(o=-1),t.line=o,t.lineAlign=n.get("lineAlign","start"),t.snapToLines=n.get("snapToLines",!0),t.size=n.get("size",100),t.align=n.get("align",zt);var i=n.get("position","auto");"auto"===i&&50===Kt.position&&(i="start"===t.align||"left"===t.align?0:"end"===t.align||"right"===t.align?100:50),t.position=i}(e,t)}function se(e){return e.replace(/<br(?: \/)?>/gi,"\n")}function le(e,t,r,n){for(var o,i,a,s,l,u=window.VTTCue||window.TextTrackCue,c=0;c<n.rows.length;c++)if(o=n.rows[c],a=!0,s=0,l="",!o.isEmpty()){for(var d=0;d<o.chars.length;d++)o.chars[d].uchar.match(/\s/)&&a?s++:(l+=o.chars[d].uchar,a=!1);o.cueStartTime=t,t===r&&(r+=1e-4),i=new u(t,r,se(l.trim())),s>=16?s--:s++,navigator.userAgent.match(/Firefox\//)?i.line=c+1:i.line=c>7?c-2:c+1,i.align="left",i.position=Math.max(0,Math.min(100,s/32*100+(navigator.userAgent.match(/Firefox\//)?50:0))),e.addCue(i)}}function ue(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ce(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function de(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function fe(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function pe(e){if(e&&e.cues)for(;e.cues.length>0;)e.removeCue(e.cues[0])}function he(e,t){return e&&e.label===t.name&&!(e.textTrack1||e.textTrack2)}function me(e,t,r,n){return Math.min(t,n)-Math.max(e,r)}function ye(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ge(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function ve(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function be(e){for(var t=[],r=0;r<e.length;r++)"subtitles"===e[r].kind&&t.push(e[r]);return t}function _e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ee(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function Te(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function we(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var Se={};r.d(Se,"newCue",function(){return le});var Ce=r(5),Re=r.n(Ce),ke=r(1),je=r(2),Ae=r(0),xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Oe=function(){function e(t){n(this,e),this.hls=t,this.onEvent=this.onEvent.bind(this);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];this.handledEvents=o,this.useGenericHandler=!0,this.registerListeners()}return e.prototype.destroy=function(){this.unregisterListeners()},e.prototype.isEventHandler=function(){return"object"===xe(this.handledEvents)&&this.handledEvents.length&&"function"==typeof this.onEvent},e.prototype.registerListeners=function(){this.isEventHandler()&&this.handledEvents.forEach(function(e){if("hlsEventGeneric"===e)throw new Error("Forbidden event name: "+e);this.hls.on(e,this.onEvent)},this)},e.prototype.unregisterListeners=function(){this.isEventHandler()&&this.handledEvents.forEach(function(e){this.hls.off(e,this.onEvent)},this)},e.prototype.onEvent=function(e,t){this.onEventGeneric(e,t)},e.prototype.onEventGeneric=function(e,t){var r=function(e,t){var r="on"+e.replace("hls","");if("function"!=typeof this[r])throw new Error("Event "+e+" has no generic handler in this "+this.constructor.name+" class (tried "+r+")");return this[r].bind(this,t)};try{r.call(this,e,t).call()}catch(t){Ae.b.error("internal error happened while processing "+e+":"+t.message),this.hls.trigger(ke.a.ERROR,{type:je.b.OTHER_ERROR,details:je.a.INTERNAL_EXCEPTION,fatal:!1,event:e,err:t})}},e}(),Pe=Oe,Le=/^(\d+)x(\d+)$/,De=/\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g,Ie=function(){function e(t){o(this,e),"string"==typeof t&&(t=e.parseAttrList(t));for(var r in t)t.hasOwnProperty(r)&&(this[r]=t[r])}return e.prototype.decimalInteger=function(e){var t=parseInt(this[e],10);return t>Number.MAX_SAFE_INTEGER?1/0:t},e.prototype.hexadecimalInteger=function(e){if(this[e]){var t=(this[e]||"0x").slice(2);t=(1&t.length?"0":"")+t;for(var r=new Uint8Array(t.length/2),n=0;n<t.length/2;n++)r[n]=parseInt(t.slice(2*n,2*n+2),16);return r}return null},e.prototype.hexadecimalIntegerAsNumber=function(e){var t=parseInt(this[e],16);return t>Number.MAX_SAFE_INTEGER?1/0:t},e.prototype.decimalFloatingPoint=function(e){return parseFloat(this[e])},e.prototype.enumeratedString=function(e){return this[e]},e.prototype.decimalResolution=function(e){var t=Le.exec(this[e]);if(null!==t)return{width:parseInt(t[1],10),height:parseInt(t[2],10)}},e.parseAttrList=function(e){var t,r={};for(De.lastIndex=0;null!==(t=De.exec(e));){var n=t[2];0===n.indexOf('"')&&n.lastIndexOf('"')===n.length-1&&(n=n.slice(1,-1)),r[t[1]]=n}return r},e}(),Ne=Ie,Me={audio:{a3ds:!0,"ac-3":!0,"ac-4":!0,alac:!0,alaw:!0,dra1:!0,"dts+":!0,"dts-":!0,dtsc:!0,dtse:!0,dtsh:!0,"ec-3":!0,enca:!0,g719:!0,g726:!0,m4ae:!0,mha1:!0,mha2:!0,mhm1:!0,mhm2:!0,mlpa:!0,mp4a:!0,"raw ":!0,Opus:!0,samr:!0,sawb:!0,sawp:!0,sevc:!0,sqcp:!0,ssmv:!0,twos:!0,ulaw:!0},video:{avc1:!0,avc2:!0,avc3:!0,avc4:!0,avcp:!0,drac:!0,dvav:!0,dvhe:!0,encv:!0,hev1:!0,hvc1:!0,mjp2:!0,mp4v:!0,mvc1:!0,mvc2:!0,mvc3:!0,mvc4:!0,resv:!0,rv60:!0,s263:!0,svc1:!0,svc2:!0,"vc-1":!0,vp08:!0,vp09:!0}},Fe=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Ue=/#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)/g,Be=/#EXT-X-MEDIA:(.*)/g,Ge=new RegExp([/#EXTINF:(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,/|(?!#)(\S+)/.source,/|#EXT-X-BYTERANGE:*(.+)/.source,/|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,/|#.*/.source].join(""),"g"),He=/(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)(.*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/,We=function(){function e(){u(this,e),this.method=null,this.key=null,this.iv=null,this._uri=null}return Fe(e,[{key:"uri",get:function(){return!this._uri&&this.reluri&&(this._uri=Re.a.buildAbsoluteURL(this.baseuri,this.reluri,{alwaysNormalize:!0})),this._uri}}]),e}(),Ve=function(){function e(){u(this,e),this._url=null,this._byteRange=null,this._decryptdata=null,this.tagList=[]}return e.prototype.createInitializationVector=function(e){for(var t=new Uint8Array(16),r=12;r<16;r++)t[r]=e>>8*(15-r)&255;return t},e.prototype.fragmentDecryptdataFromLevelkey=function(e,t){var r=e;return e&&e.method&&e.uri&&!e.iv&&(r=new We,r.method=e.method,r.baseuri=e.baseuri,r.reluri=e.reluri,r.iv=this.createInitializationVector(t)),r},e.prototype.cloneObj=function(e){return JSON.parse(JSON.stringify(e))},Fe(e,[{key:"url",get:function(){return!this._url&&this.relurl&&(this._url=Re.a.buildAbsoluteURL(this.baseurl,this.relurl,{alwaysNormalize:!0})),this._url},set:function(e){this._url=e}},{key:"programDateTime",get:function(){return!this._programDateTime&&this.rawProgramDateTime&&(this._programDateTime=new Date(Date.parse(this.rawProgramDateTime))),this._programDateTime}},{key:"byteRange",get:function(){if(!this._byteRange){var e=this._byteRange=[];if(this.rawByteRange){var t=this.rawByteRange.split("@",2);if(1===t.length){var r=this.lastByteRangeEndOffset;e[0]=r||0}else e[0]=parseInt(t[1]);e[1]=parseInt(t[0])+e[0]}}return this._byteRange}},{key:"byteRangeStartOffset",get:function(){return this.byteRange[0]}},{key:"byteRangeEndOffset",get:function(){return this.byteRange[1]}},{key:"decryptdata",get:function(){return this._decryptdata||(this._decryptdata=this.fragmentDecryptdataFromLevelkey(this.levelkey,this.sn)),this._decryptdata}}]),e}(),Ke=function(e){function t(r){u(this,t);var n=s(this,e.call(this,r,ke.a.MANIFEST_LOADING,ke.a.LEVEL_LOADING,ke.a.AUDIO_TRACK_LOADING,ke.a.SUBTITLE_TRACK_LOADING));return n.loaders={},n}return l(t,e),t.prototype.destroy=function(){for(var e in this.loaders){var t=this.loaders[e];t&&t.destroy()}this.loaders={},Pe.prototype.destroy.call(this)},t.prototype.onManifestLoading=function(e){this.load(e.url,{type:"manifest"})},t.prototype.onLevelLoading=function(e){this.load(e.url,{type:"level",level:e.level,id:e.id})},t.prototype.onAudioTrackLoading=function(e){this.load(e.url,{type:"audioTrack",id:e.id})},t.prototype.onSubtitleTrackLoading=function(e){this.load(e.url,{type:"subtitleTrack",id:e.id})},t.prototype.load=function(e,t){var r=this.loaders[t.type];if(r){var n=r.context;if(n&&n.url===e)return void Ae.b.trace("playlist request ongoing");Ae.b.warn("abort previous loader for type:"+t.type),r.abort()}var o=this.hls.config,i=void 0,a=void 0,s=void 0,l=void 0;"manifest"===t.type?(i=o.manifestLoadingMaxRetry,a=o.manifestLoadingTimeOut,s=o.manifestLoadingRetryDelay,l=o.manifestLoadingMaxRetryTimeout):(i=o.levelLoadingMaxRetry,a=o.levelLoadingTimeOut,s=o.levelLoadingRetryDelay,l=o.levelLoadingMaxRetryTimeout,Ae.b.log("loading playlist for "+t.type+" "+(t.level||t.id))),r=this.loaders[t.type]=t.loader=void 0!==o.pLoader?new o.pLoader(o):new o.loader(o),t.url=e,t.responseType="";var u=void 0,c=void 0;u={timeout:a,maxRetry:i,retryDelay:s,maxRetryDelay:l},c={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)},r.load(t,u,c)},t.prototype.resolve=function(e,t){return Re.a.buildAbsoluteURL(t,e,{alwaysNormalize:!0})},t.prototype.parseMasterPlaylist=function(e,t){var r=[],n=void 0;for(Ue.lastIndex=0;null!=(n=Ue.exec(e));){var o={},a=o.attrs=new Ne(n[1]);o.url=this.resolve(n[2],t);var s=a.decimalResolution("RESOLUTION");s&&(o.width=s.width,o.height=s.height),o.bitrate=a.decimalInteger("AVERAGE-BANDWIDTH")||a.decimalInteger("BANDWIDTH"),o.name=a.NAME,function(e,t){["video","audio"].forEach(function(r){var n=e.filter(function(e){return i(e,r)});if(n.length){var o=n.filter(function(e){return 0===e.lastIndexOf("avc1",0)||0===e.lastIndexOf("mp4a",0)});t[r+"Codec"]=o.length>0?o[0]:n[0],e=e.filter(function(e){return-1===n.indexOf(e)})}}),t.unknownCodecs=e}([].concat((a.CODECS||"").split(/[ ,]+/)),o),o.videoCodec&&-1!==o.videoCodec.indexOf("avc1")&&(o.videoCodec=this.avc1toavcoti(o.videoCodec)),r.push(o)}return r},t.prototype.parseMasterPlaylistMedia=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=void 0,i=[],a=0;for(Be.lastIndex=0;null!=(o=Be.exec(e));){var s={},l=new Ne(o[1]);l.TYPE===r&&(s.groupId=l["GROUP-ID"],s.name=l.NAME,s.type=r,s.default="YES"===l.DEFAULT,s.autoselect="YES"===l.AUTOSELECT,s.forced="YES"===l.FORCED,l.URI&&(s.url=this.resolve(l.URI,t)),s.lang=l.LANGUAGE,s.name||(s.name=s.lang),n&&(s.audioCodec=n),s.id=a++,i.push(s))}return i},t.prototype.avc1toavcoti=function(e){var t,r=e.split(".");return r.length>2?(t=r.shift()+".",t+=parseInt(r.shift()).toString(16),t+=("000"+parseInt(r.shift()).toString(16)).substr(-4)):t=e,t},t.prototype.parseLevelPlaylist=function(e,t,r,n){var o,i,a=0,s=0,l={type:null,version:null,url:t,fragments:[],live:!0,startSN:0},u=new We,c=0,d=null,f=new Ve;for(Ge.lastIndex=0;null!==(o=Ge.exec(e));){var p=o[1];if(p){f.duration=parseFloat(p);var h=(" "+o[2]).slice(1);f.title=h||null,f.tagList.push(h?["INF",p,h]:["INF",p])}else if(o[3]){if(!isNaN(f.duration)){var m=a++;f.type=n,f.start=s,f.levelkey=u,f.sn=m,f.level=r,f.cc=c,f.baseurl=t,f.relurl=(" "+o[3]).slice(1),l.fragments.push(f),d=f,s+=f.duration,f=new Ve}}else if(o[4]){if(f.rawByteRange=(" "+o[4]).slice(1),d){var y=d.byteRangeEndOffset;y&&(f.lastByteRangeEndOffset=y)}}else if(o[5])f.rawProgramDateTime=(" "+o[5]).slice(1),f.tagList.push(["PROGRAM-DATE-TIME",f.rawProgramDateTime]),void 0===l.programDateTime&&(l.programDateTime=new Date(new Date(Date.parse(o[5]))-1e3*s));else{for(o=o[0].match(He),i=1;i<o.length&&void 0===o[i];i++);var g=(" "+o[i+1]).slice(1),v=(" "+o[i+2]).slice(1);switch(o[i]){case"#":f.tagList.push(v?[g,v]:[g]);break;case"PLAYLIST-TYPE":l.type=g.toUpperCase();break;case"MEDIA-SEQUENCE":a=l.startSN=parseInt(g);break;case"TARGETDURATION":l.targetduration=parseFloat(g);break;case"VERSION":l.version=parseInt(g);break;case"EXTM3U":break;case"ENDLIST":l.live=!1;break;case"DIS":c++,f.tagList.push(["DIS"]);break;case"DISCONTINUITY-SEQ":c=parseInt(g);break;case"KEY":var b=g,_=new Ne(b),E=_.enumeratedString("METHOD"),T=_.URI,w=_.hexadecimalInteger("IV");E&&(u=new We,T&&["AES-128","SAMPLE-AES"].indexOf(E)>=0&&(u.method=E,u.baseuri=t,u.reluri=T,u.key=null,u.iv=w));break;case"START":var S=g,C=new Ne(S),R=C.decimalFloatingPoint("TIME-OFFSET");isNaN(R)||(l.startTimeOffset=R);break;case"MAP":var k=new Ne(g);f.relurl=k.URI,f.rawByteRange=k.BYTERANGE,f.baseurl=t,f.level=r,f.type=n,f.sn="initSegment",l.initSegment=f,f=new Ve;break;default:Ae.b.warn("line parsed but not handled: "+o)}}}return f=d,f&&!f.relurl&&(l.fragments.pop(),s-=f.duration),l.totalduration=s,l.averagetargetduration=s/l.fragments.length,l.endSN=a-1,l.startCC=l.fragments[0]?l.fragments[0].cc:0,l.endCC=c,l},t.prototype.loadsuccess=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=e.data,i=e.url,a=r.type,s=r.id,l=r.level,u=this.hls;if(this.loaders[a]=void 0,void 0!==i&&0!==i.indexOf("data:")||(i=r.url),t.tload=performance.now(),0===o.indexOf("#EXTM3U"))if(o.indexOf("#EXTINF:")>0){var c="audioTrack"!==a&&"subtitleTrack"!==a,d=isNaN(l)?isNaN(s)?0:s:l,f=this.parseLevelPlaylist(o,i,d,"audioTrack"===a?"audio":"subtitleTrack"===a?"subtitle":"main");f.tload=t.tload,"manifest"===a&&u.trigger(ke.a.MANIFEST_LOADED,{levels:[{url:i,details:f}],audioTracks:[],url:i,stats:t,networkDetails:n}),t.tparsed=performance.now(),f.targetduration?c?u.trigger(ke.a.LEVEL_LOADED,{details:f,level:l||0,id:s||0,stats:t,networkDetails:n}):"audioTrack"===a?u.trigger(ke.a.AUDIO_TRACK_LOADED,{details:f,id:s,stats:t,networkDetails:n}):"subtitleTrack"===a&&u.trigger(ke.a.SUBTITLE_TRACK_LOADED,{details:f,id:s,stats:t,networkDetails:n}):u.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:je.a.MANIFEST_PARSING_ERROR,fatal:!0,url:i,reason:"invalid targetduration",networkDetails:n})}else{var p=this.parseMasterPlaylist(o,i);if(p.length){var h=this.parseMasterPlaylistMedia(o,i,"AUDIO",p[0].audioCodec),m=this.parseMasterPlaylistMedia(o,i,"SUBTITLES");if(h.length){var y=!1;h.forEach(function(e){e.url||(y=!0)}),!1===y&&p[0].audioCodec&&!p[0].attrs.AUDIO&&(Ae.b.log("audio codec signaled in quality level, but no embedded audio track signaled, create one"),h.unshift({type:"main",name:"main"}))}u.trigger(ke.a.MANIFEST_LOADED,{levels:p,audioTracks:h,subtitles:m,url:i,stats:t,networkDetails:n})}else u.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:je.a.MANIFEST_PARSING_ERROR,fatal:!0,url:i,reason:"no level found in manifest",networkDetails:n})}else u.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:je.a.MANIFEST_PARSING_ERROR,fatal:!0,url:i,reason:"no EXTM3U delimiter",networkDetails:n})},t.prototype.loaderror=function(e,t){var r,n,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=t.loader;switch(t.type){case"manifest":r=je.a.MANIFEST_LOAD_ERROR,n=!0;break;case"level":r=je.a.LEVEL_LOAD_ERROR,n=!1;break;case"audioTrack":r=je.a.AUDIO_TRACK_LOAD_ERROR,n=!1}i&&(i.abort(),this.loaders[t.type]=void 0),this.hls.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:r,fatal:n,url:i.url,loader:i,response:e,context:t,networkDetails:o})},t.prototype.loadtimeout=function(e,t){var r,n,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=t.loader;switch(t.type){case"manifest":r=je.a.MANIFEST_LOAD_TIMEOUT,n=!0;break;case"level":r=je.a.LEVEL_LOAD_TIMEOUT,n=!1;break;case"audioTrack":r=je.a.AUDIO_TRACK_LOAD_TIMEOUT,n=!1}i&&(i.abort(),this.loaders[t.type]=void 0),this.hls.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:r,fatal:n,url:i.url,loader:i,context:t,networkDetails:o})},t}(Pe),ze=Ke,qe=function(e){function t(r){c(this,t);var n=d(this,e.call(this,r,ke.a.FRAG_LOADING));return n.loaders={},n}return f(t,e),t.prototype.destroy=function(){var e=this.loaders;for(var t in e){var r=e[t];r&&r.destroy()}this.loaders={},Pe.prototype.destroy.call(this)},t.prototype.onFragLoading=function(e){var t=e.frag,r=t.type,n=this.loaders[r],o=this.hls.config;t.loaded=0,n&&(Ae.b.warn("abort previous fragment loader for type:"+r),n.abort()),n=this.loaders[r]=t.loader=void 0!==o.fLoader?new o.fLoader(o):new o.loader(o);var i=void 0,a=void 0,s=void 0;i={url:t.url,frag:t,responseType:"arraybuffer",progressData:!1};var l=t.byteRangeStartOffset,u=t.byteRangeEndOffset;isNaN(l)||isNaN(u)||(i.rangeStart=l,i.rangeEnd=u),a={timeout:o.fragLoadingTimeOut,maxRetry:0,retryDelay:0,maxRetryDelay:o.fragLoadingMaxRetryTimeout},s={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this),onProgress:this.loadprogress.bind(this)},n.load(i,a,s)},t.prototype.loadsuccess=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=e.data,i=r.frag;i.loader=void 0,this.loaders[i.type]=void 0,this.hls.trigger(ke.a.FRAG_LOADED,{payload:o,frag:i,stats:t,networkDetails:n})},t.prototype.loaderror=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=t.loader;n&&n.abort(),this.loaders[t.type]=void 0,this.hls.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:je.a.FRAG_LOAD_ERROR,fatal:!1,frag:t.frag,response:e,networkDetails:r})},t.prototype.loadtimeout=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=t.loader;n&&n.abort(),this.loaders[t.type]=void 0,this.hls.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:je.a.FRAG_LOAD_TIMEOUT,fatal:!1,frag:t.frag,networkDetails:r})},t.prototype.loadprogress=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=t.frag;o.loaded=e.loaded,this.hls.trigger(ke.a.FRAG_LOAD_PROGRESS,{frag:o,stats:e,networkDetails:n})},t}(Pe),Ye=qe,Xe=function(e){function t(r){p(this,t);var n=h(this,e.call(this,r,ke.a.KEY_LOADING));return n.loaders={},n.decryptkey=null,n.decrypturl=null,n}return m(t,e),t.prototype.destroy=function(){for(var e in this.loaders){var t=this.loaders[e];t&&t.destroy()}this.loaders={},Pe.prototype.destroy.call(this)},t.prototype.onKeyLoading=function(e){var t=e.frag,r=t.type,n=this.loaders[r],o=t.decryptdata,i=o.uri;if(i!==this.decrypturl||null===this.decryptkey){var a=this.hls.config;n&&(Ae.b.warn("abort previous key loader for type:"+r),n.abort()),t.loader=this.loaders[r]=new a.loader(a),this.decrypturl=i,this.decryptkey=null;var s=void 0,l=void 0,u=void 0;s={url:i,frag:t,responseType:"arraybuffer"},l={timeout:a.fragLoadingTimeOut,maxRetry:a.fragLoadingMaxRetry,retryDelay:a.fragLoadingRetryDelay,maxRetryDelay:a.fragLoadingMaxRetryTimeout},u={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)},t.loader.load(s,l,u)}else this.decryptkey&&(o.key=this.decryptkey,this.hls.trigger(ke.a.KEY_LOADED,{frag:t}))},t.prototype.loadsuccess=function(e,t,r){var n=r.frag;this.decryptkey=n.decryptdata.key=new Uint8Array(e.data),n.loader=void 0,this.loaders[n.type]=void 0,this.hls.trigger(ke.a.KEY_LOADED,{frag:n})},t.prototype.loaderror=function(e,t){var r=t.frag,n=r.loader;n&&n.abort(),this.loaders[t.type]=void 0,this.hls.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:je.a.KEY_LOAD_ERROR,fatal:!1,frag:r,response:e})},t.prototype.loadtimeout=function(e,t){var r=t.frag,n=r.loader;n&&n.abort(),this.loaders[t.type]=void 0,this.hls.trigger(ke.a.ERROR,{type:je.b.NETWORK_ERROR,details:je.a.KEY_LOAD_TIMEOUT,fatal:!1,frag:r})},t}(Pe),Qe=Xe,$e={search:function(e,t){for(var r=0,n=e.length-1,o=null,i=null;r<=n;){o=(r+n)/2|0,i=e[o];var a=t(i);if(a>0)r=o+1;else{if(!(a<0))return i;n=o-1}}return null}},Je=$e,Ze={isBuffered:function(e,t){if(e)for(var r=e.buffered,n=0;n<r.length;n++)if(t>=r.start(n)&&t<=r.end(n))return!0;return!1},bufferInfo:function(e,t,r){if(e){var n,o=e.buffered,i=[];for(n=0;n<o.length;n++)i.push({start:o.start(n),end:o.end(n)});return this.bufferedInfo(i,t,r)}return{len:0,start:t,end:t,nextStart:void 0}},bufferedInfo:function(e,t,r){var n,o,i,a,s,l=[];for(e.sort(function(e,t){var r=e.start-t.start;return r||t.end-e.end}),s=0;s<e.length;s++){var u=l.length;if(u){var c=l[u-1].end;e[s].start-c<r?e[s].end>c&&(l[u-1].end=e[s].end):l.push(e[s])}else l.push(e[s])}for(s=0,n=0,o=i=t;s<l.length;s++){var d=l[s].start,f=l[s].end;if(t+r>=d&&t<f)o=d,i=f,n=i-t;else if(t+r<d){a=d;break}}return{len:n,start:o,end:i,nextStart:a}}},et=Ze,tt=r(6),rt=r(4),nt=r.n(rt),ot=r(8),it=r.n(ot),at=function(){function e(t,r){y(this,e),this.hls=t,this.id=r;var n=this.observer=new nt.a,o=t.config;n.trigger=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n.emit.apply(n,[e,e].concat(r))},n.off=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n.removeListener.apply(n,[e].concat(r))};var i=function(e,r){r=r||{},r.frag=this.frag,r.id=this.id,t.trigger(e,r)}.bind(this);n.on(ke.a.FRAG_DECRYPTED,i),n.on(ke.a.FRAG_PARSING_INIT_SEGMENT,i),n.on(ke.a.FRAG_PARSING_DATA,i),n.on(ke.a.FRAG_PARSED,i),n.on(ke.a.ERROR,i),n.on(ke.a.FRAG_PARSING_METADATA,i),n.on(ke.a.FRAG_PARSING_USERDATA,i),n.on(ke.a.INIT_PTS_FOUND,i);var a={mp4:MediaSource.isTypeSupported("video/mp4"),mpeg:MediaSource.isTypeSupported("audio/mpeg"),mp3:MediaSource.isTypeSupported('audio/mp4; codecs="mp3"')},s=navigator.vendor;if(o.enableWorker&&"undefined"!=typeof Worker){Ae.b.log("demuxing in webworker");var l=void 0;try{l=this.w=it()(9),this.onwmsg=this.onWorkerMessage.bind(this),l.addEventListener("message",this.onwmsg),l.onerror=function(e){t.trigger(ke.a.ERROR,{type:je.b.OTHER_ERROR,details:je.a.INTERNAL_EXCEPTION,fatal:!0,event:"demuxerWorker",err:{message:e.message+" ("+e.filename+":"+e.lineno+")"}})},l.postMessage({cmd:"init",typeSupported:a,vendor:s,id:r,config:JSON.stringify(o)})}catch(e){Ae.b.error("error while initializing DemuxerWorker, fallback on DemuxerInline"),l&&URL.revokeObjectURL(l.objectURL),this.demuxer=new tt.a(n,a,o,s),this.w=void 0}}else this.demuxer=new tt.a(n,a,o,s)}return e.prototype.destroy=function(){var e=this.w;if(e)e.removeEventListener("message",this.onwmsg),e.terminate(),this.w=null;else{var t=this.demuxer;t&&(t.destroy(),this.demuxer=null)}var r=this.observer;r&&(r.removeAllListeners(),this.observer=null)},e.prototype.push=function(e,t,r,n,o,i,a,s){var l=this.w,u=isNaN(o.startDTS)?o.start:o.startDTS,c=o.decryptdata,d=this.frag,f=!(d&&o.cc===d.cc),p=!(d&&o.level===d.level),h=d&&o.sn===d.sn+1,m=!p&&h;if(f&&Ae.b.log(this.id+":discontinuity detected"),p&&Ae.b.log(this.id+":switch detected"),this.frag=o,l)l.postMessage({cmd:"demux",data:e,decryptdata:c,initSegment:t,audioCodec:r,videoCodec:n,timeOffset:u,discontinuity:f,trackSwitch:p,contiguous:m,duration:i,accurateTimeOffset:a,defaultInitPTS:s},[e]);else{var y=this.demuxer;y&&y.push(e,c,t,r,n,u,f,p,m,i,a,s)}},e.prototype.onWorkerMessage=function(e){var t=e.data,r=this.hls;switch(t.event){case"init":URL.revokeObjectURL(this.w.objectURL);break;case ke.a.FRAG_PARSING_DATA:t.data.data1=new Uint8Array(t.data1),t.data2&&(t.data.data2=new Uint8Array(t.data2));default:t.data=t.data||{},t.data.frag=this.frag,t.data.id=this.id,r.trigger(t.event,t.data)}},e}(),st=at,lt={toString:function(e){for(var t="",r=e.length,n=0;n<r;n++)t+="["+e.start(n).toFixed(3)+","+e.end(n).toFixed(3)+"]";return t}},ut=lt,ct=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),dt={STOPPED:"STOPPED",IDLE:"IDLE",KEY_LOADING:"KEY_LOADING",FRAG_LOADING:"FRAG_LOADING",FRAG_LOADING_WAITING_RETRY:"FRAG_LOADING_WAITING_RETRY",WAITING_LEVEL:"WAITING_LEVEL",PARSING:"PARSING",PARSED:"PARSED",BUFFER_FLUSHING:"BUFFER_FLUSHING",ENDED:"ENDED",ERROR:"ERROR"},ft=function(e){function t(r){R(this,t);var n=k(this,e.call(this,r,ke.a.MEDIA_ATTACHED,ke.a.MEDIA_DETACHING,ke.a.MANIFEST_LOADING,ke.a.MANIFEST_PARSED,ke.a.LEVEL_LOADED,ke.a.KEY_LOADED,ke.a.FRAG_LOADED,ke.a.FRAG_LOAD_EMERGENCY_ABORTED,ke.a.FRAG_PARSING_INIT_SEGMENT,ke.a.FRAG_PARSING_DATA,ke.a.FRAG_PARSED,ke.a.ERROR,ke.a.AUDIO_TRACK_SWITCHING,ke.a.AUDIO_TRACK_SWITCHED,ke.a.BUFFER_CREATED,ke.a.BUFFER_APPENDED,ke.a.BUFFER_FLUSHED));return n.config=r.config,n.audioCodecSwap=!1,n.ticks=0,n._state=dt.STOPPED,n.ontick=n.tick.bind(n),n}return j(t,e),t.prototype.destroy=function(){this.stopLoad(),this.timer&&(clearInterval(this.timer),this.timer=null),Pe.prototype.destroy.call(this),this.state=dt.STOPPED},t.prototype.startLoad=function(e){if(this.levels){var t=this.lastCurrentTime,r=this.hls;if(this.stopLoad(),this.timer||(this.timer=setInterval(this.ontick,100)),this.level=-1,this.fragLoadError=0,!this.startFragRequested){var n=r.startLevel;-1===n&&(n=0,this.bitrateTest=!0),this.level=r.nextLoadLevel=n,this.loadedmetadata=!1}t>0&&-1===e&&(Ae.b.log("override startPosition with lastCurrentTime @"+t.toFixed(3)),e=t),this.state=dt.IDLE,this.nextLoadPosition=this.startPosition=this.lastCurrentTime=e,this.tick()}else this.forceStartLoad=!0,this.state=dt.STOPPED},t.prototype.stopLoad=function(){var e=this.fragCurrent;e&&(e.loader&&e.loader.abort(),this.fragCurrent=null),this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.state=dt.STOPPED,this.forceStartLoad=!1},t.prototype.tick=function(){1===++this.ticks&&(this.doTick(),this.ticks>1&&setTimeout(this.tick,1),this.ticks=0)},t.prototype.doTick=function(){switch(this.state){case dt.ERROR:break;case dt.BUFFER_FLUSHING:this.fragLoadError=0;break;case dt.IDLE:this._doTickIdle();break;case dt.WAITING_LEVEL:var e=this.levels[this.level];e&&e.details&&(this.state=dt.IDLE);break;case dt.FRAG_LOADING_WAITING_RETRY:var t=performance.now(),r=this.retryDate;(!r||t>=r||this.media&&this.media.seeking)&&(Ae.b.log("mediaController: retryDate reached, switch back to IDLE state"),this.state=dt.IDLE);break;case dt.ERROR:case dt.STOPPED:case dt.FRAG_LOADING:case dt.PARSING:case dt.PARSED:case dt.ENDED:}this._checkBuffer(),this._checkFragmentChanged()},t.prototype._doTickIdle=function(){var e=this.hls,t=e.config,r=this.media;if(void 0!==this.levelLastLoaded&&(r||!this.startFragRequested&&t.startFragPrefetch)){var n=void 0;n=this.loadedmetadata?r.currentTime:this.nextLoadPosition;var o=e.nextLoadLevel,i=this.levels[o];if(i){var a=i.bitrate,s=void 0;s=a?Math.max(8*t.maxBufferSize/a,t.maxBufferLength):t.maxBufferLength,s=Math.min(s,t.maxMaxBufferLength);var l=et.bufferInfo(this.mediaBuffer?this.mediaBuffer:r,n,t.maxBufferHole),u=l.len;if(!(u>=s)){Ae.b.trace("buffer length of "+u.toFixed(3)+" is below max of "+s.toFixed(3)+". checking for more payload ..."),this.level=e.nextLoadLevel=o;var c=i.details;if(void 0===c||c.live&&this.levelLastLoaded!==o)return void(this.state=dt.WAITING_LEVEL);var d=this.fragPrevious;if(!c.live&&d&&!d.backtracked&&d.sn===c.endSN&&!l.nextStart){if(Math.min(r.duration,d.start+d.duration)-Math.max(l.end,d.start)<=Math.max(.2,d.duration)){var f={};return this.altAudio&&(f.type="video"),this.hls.trigger(ke.a.BUFFER_EOS,f),void(this.state=dt.ENDED)}}this._fetchPayloadOrEos(n,l,c)}}}},t.prototype._fetchPayloadOrEos=function(e,t,r){var n=this.fragPrevious,o=this.level,i=r.fragments,a=i.length;if(0!==a){var s=i[0].start,l=i[a-1].start+i[a-1].duration,u=t.end,c=void 0;if(r.initSegment&&!r.initSegment.data)c=r.initSegment;else if(r.live){var d=this.config.initialLiveManifestSize;if(a<d)return void Ae.b.warn("Can not start playback of a level, reason: not enough fragments "+a+" < "+d);if(null===(c=this._ensureFragmentAtLivePoint(r,u,s,l,n,i,a)))return}else u<s&&(c=i[0]);c||(c=this._findFragment(s,n,a,i,u,l,r)),c&&this._loadFragmentOrKey(c,o,r,e,u)}},t.prototype._ensureFragmentAtLivePoint=function(e,t,r,n,o,i,a){var s=this.hls.config,l=this.media,u=void 0,c=void 0!==s.liveMaxLatencyDuration?s.liveMaxLatencyDuration:s.liveMaxLatencyDurationCount*e.targetduration;if(t<Math.max(r-s.maxFragLookUpTolerance,n-c)){var d=this.liveSyncPosition=this.computeLivePosition(r,e);Ae.b.log("buffer end: "+t.toFixed(3)+" is located too far from the end of live sliding playlist, reset currentTime to : "+d.toFixed(3)),t=d,l&&l.readyState&&l.duration>d&&(l.currentTime=d),this.nextLoadPosition=d}if(e.PTSKnown&&t>n&&l&&l.readyState)return null;if(this.startFragRequested&&!e.PTSKnown){if(o){var f=o.sn+1;if(f>=e.startSN&&f<=e.endSN){var p=i[f-e.startSN];o.cc===p.cc&&(u=p,Ae.b.log("live playlist, switching playlist, load frag with next SN: "+u.sn))}u||(u=Je.search(i,function(e){return o.cc-e.cc}))&&Ae.b.log("live playlist, switching playlist, load frag with same CC: "+u.sn)}u||(u=i[Math.min(a-1,Math.round(a/2))],Ae.b.log("live playlist, switching playlist, unknown, load middle frag : "+u.sn))}return u},t.prototype._findFragment=function(e,t,r,n,o,i,a){var s=this.hls.config,l=void 0,u=void 0,c=s.maxFragLookUpTolerance,d=t?n[t.sn-n[0].sn+1]:void 0,f=function(e){var t=Math.min(c,e.duration+(e.deltaPTS?e.deltaPTS:0));return e.start+e.duration-t<=o?1:e.start-t>o&&e.start?-1:0};if(o<i?(o>i-c&&(c=0),u=d&&!f(d)?d:Je.search(n,f)):u=n[r-1],u){l=u;var p=l.sn-a.startSN,h=t&&l.level===t.level,m=n[p-1],y=n[p+1];if(t&&l.sn===t.sn)if(h&&!l.backtracked)if(l.sn<a.endSN){var g=t.deltaPTS;g&&g>s.maxBufferHole&&t.dropped&&p?(l=m,Ae.b.warn("SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this"),t.loadCounter--):(l=y,Ae.b.log("SN just loaded, load next one: "+l.sn))}else l=null;else l.backtracked&&(y&&y.backtracked?(Ae.b.warn("Already backtracked from fragment "+y.sn+", will not backtrack to fragment "+l.sn+". Loading fragment "+y.sn),l=y):(Ae.b.warn("Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe"),l.dropped=0,m?(m.loadCounter&&m.loadCounter--,l=m,l.backtracked=!0):p&&(l=null)))}return l},t.prototype._loadFragmentOrKey=function(e,t,r,n,o){var i=this.hls,a=i.config;if(!e.decryptdata||null==e.decryptdata.uri||null!=e.decryptdata.key){if(Ae.b.log("Loading "+e.sn+" of ["+r.startSN+" ,"+r.endSN+"],level "+t+", currentTime:"+n.toFixed(3)+",bufferEnd:"+o.toFixed(3)),void 0!==this.fragLoadIdx?this.fragLoadIdx++:this.fragLoadIdx=0,e.loadCounter){e.loadCounter++;var s=a.fragLoadingLoopThreshold;if(e.loadCounter>s&&Math.abs(this.fragLoadIdx-e.loadIdx)<s)return void i.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.FRAG_LOOP_LOADING_ERROR,fatal:!1,frag:e})}else e.loadCounter=1;return e.loadIdx=this.fragLoadIdx,e.autoLevel=i.autoLevelEnabled,e.bitrateTest=this.bitrateTest,this.fragCurrent=e,this.startFragRequested=!0,isNaN(e.sn)||e.bitrateTest||(this.nextLoadPosition=e.start+e.duration),i.trigger(ke.a.FRAG_LOADING,{frag:e}),this.demuxer||(this.demuxer=new st(i,"main")),void(this.state=dt.FRAG_LOADING)}Ae.b.log("Loading key for "+e.sn+" of ["+r.startSN+" ,"+r.endSN+"],level "+t),this.state=dt.KEY_LOADING,i.trigger(ke.a.KEY_LOADING,{frag:e})},t.prototype.getBufferedFrag=function(e){return Je.search(this._bufferedFrags,function(t){return e<t.startPTS?-1:e>t.endPTS?1:0})},t.prototype.followingBufferedFrag=function(e){return e?this.getBufferedFrag(e.endPTS+.5):null},t.prototype._checkFragmentChanged=function(){var e,t,r=this.media;if(r&&r.readyState&&!1===r.seeking&&(t=r.currentTime,t>r.playbackRate*this.lastCurrentTime&&(this.lastCurrentTime=t),et.isBuffered(r,t)?e=this.getBufferedFrag(t):et.isBuffered(r,t+.1)&&(e=this.getBufferedFrag(t+.1)),e)){var n=e;if(n!==this.fragPlaying){this.hls.trigger(ke.a.FRAG_CHANGED,{frag:n});var o=n.level;this.fragPlaying&&this.fragPlaying.level===o||this.hls.trigger(ke.a.LEVEL_SWITCHED,{level:o}),this.fragPlaying=n}}},t.prototype.immediateLevelSwitch=function(){if(Ae.b.log("immediateLevelSwitch"),!this.immediateSwitch){this.immediateSwitch=!0;var e=this.media,t=void 0;e?(t=e.paused,e.pause()):t=!0,this.previouslyPaused=t}var r=this.fragCurrent;r&&r.loader&&r.loader.abort(),this.fragCurrent=null,void 0!==this.fragLoadIdx&&(this.fragLoadIdx+=2*this.config.fragLoadingLoopThreshold),this.flushMainBuffer(0,Number.POSITIVE_INFINITY)},t.prototype.immediateLevelSwitchEnd=function(){var e=this.media;e&&e.buffered.length&&(this.immediateSwitch=!1,et.isBuffered(e,e.currentTime)&&(e.currentTime-=1e-4),this.previouslyPaused||e.play())},t.prototype.nextLevelSwitch=function(){var e=this.media;if(e&&e.readyState){var t=void 0,r=void 0,n=void 0;if(void 0!==this.fragLoadIdx&&(this.fragLoadIdx+=2*this.config.fragLoadingLoopThreshold),r=this.getBufferedFrag(e.currentTime),r&&r.startPTS>1&&this.flushMainBuffer(0,r.startPTS-1),e.paused)t=0;else{var o=this.hls.nextLoadLevel,i=this.levels[o],a=this.fragLastKbps;t=a&&this.fragCurrent?this.fragCurrent.duration*i.bitrate/(1e3*a)+1:0}if((n=this.getBufferedFrag(e.currentTime+t))&&(n=this.followingBufferedFrag(n))){var s=this.fragCurrent;s&&s.loader&&s.loader.abort(),this.fragCurrent=null,this.flushMainBuffer(n.maxStartPTS,Number.POSITIVE_INFINITY)}}},t.prototype.flushMainBuffer=function(e,t){this.state=dt.BUFFER_FLUSHING;var r={startOffset:e,endOffset:t};this.altAudio&&(r.type="video"),this.hls.trigger(ke.a.BUFFER_FLUSHING,r)},t.prototype.onMediaAttached=function(e){var t=this.media=this.mediaBuffer=e.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvseeked=this.onMediaSeeked.bind(this),this.onvended=this.onMediaEnded.bind(this),t.addEventListener("seeking",this.onvseeking),t.addEventListener("seeked",this.onvseeked),t.addEventListener("ended",this.onvended);var r=this.config;this.levels&&r.autoStartLoad&&this.hls.startLoad(r.startPosition)},t.prototype.onMediaDetaching=function(){var e=this.media;e&&e.ended&&(Ae.b.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0);var t=this.levels;t&&t.forEach(function(e){e.details&&e.details.fragments.forEach(function(e){e.loadCounter=void 0,e.backtracked=void 0})}),e&&(e.removeEventListener("seeking",this.onvseeking),e.removeEventListener("seeked",this.onvseeked),e.removeEventListener("ended",this.onvended),this.onvseeking=this.onvseeked=this.onvended=null),this.media=this.mediaBuffer=null,this.loadedmetadata=!1,this.stopLoad()},t.prototype.onMediaSeeking=function(){var e=this.media,t=e?e.currentTime:void 0,r=this.config;isNaN(t)||Ae.b.log("media seeking to "+t.toFixed(3));var n=this.mediaBuffer?this.mediaBuffer:e,o=et.bufferInfo(n,t,this.config.maxBufferHole);if(this.state===dt.FRAG_LOADING){var i=this.fragCurrent;if(0===o.len&&i){var a=r.maxFragLookUpTolerance,s=i.start-a,l=i.start+i.duration+a;t<s||t>l?(i.loader&&(Ae.b.log("seeking outside of buffer while fragment load in progress, cancel fragment load"),i.loader.abort()),this.fragCurrent=null,this.fragPrevious=null,this.state=dt.IDLE):Ae.b.log("seeking outside of buffer but within currently loaded fragment range")}}else this.state===dt.ENDED&&(0===o.len&&(this.fragPrevious=0),this.state=dt.IDLE);e&&(this.lastCurrentTime=t),this.state!==dt.FRAG_LOADING&&void 0!==this.fragLoadIdx&&(this.fragLoadIdx+=2*r.fragLoadingLoopThreshold),this.loadedmetadata||(this.nextLoadPosition=this.startPosition=t),this.tick()},t.prototype.onMediaSeeked=function(){var e=this.media,t=e?e.currentTime:void 0;isNaN(t)||Ae.b.log("media seeked to "+t.toFixed(3)),this.tick()},t.prototype.onMediaEnded=function(){Ae.b.log("media ended"),this.startPosition=this.lastCurrentTime=0},t.prototype.onManifestLoading=function(){Ae.b.log("trigger BUFFER_RESET"),this.hls.trigger(ke.a.BUFFER_RESET),this._bufferedFrags=[],this.stalled=!1,this.startPosition=this.lastCurrentTime=0},t.prototype.onManifestParsed=function(e){var t,r=!1,n=!1;e.levels.forEach(function(e){(t=e.audioCodec)&&(-1!==t.indexOf("mp4a.40.2")&&(r=!0),-1!==t.indexOf("mp4a.40.5")&&(n=!0))}),this.audioCodecSwitch=r&&n,this.audioCodecSwitch&&Ae.b.log("both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"),this.levels=e.levels,this.startFragRequested=!1;var o=this.config;(o.autoStartLoad||this.forceStartLoad)&&this.hls.startLoad(o.startPosition)},t.prototype.onLevelLoaded=function(e){var t=e.details,r=e.level,n=this.levels[this.levelLastLoaded],o=this.levels[r],i=t.totalduration,a=0;if(Ae.b.log("level "+r+" loaded ["+t.startSN+","+t.endSN+"],duration:"+i),t.live){var s=o.details;s&&t.fragments.length>0?(b(s,t),a=t.fragments[0].start,this.liveSyncPosition=this.computeLivePosition(a,s),t.PTSKnown&&!isNaN(a)?Ae.b.log("live playlist sliding:"+a.toFixed(3)):(Ae.b.log("live playlist - outdated PTS, unknown sliding"),C(this.fragPrevious,n,t))):(Ae.b.log("live playlist - first load, unknown sliding"),t.PTSKnown=!1,C(this.fragPrevious,n,t))}else t.PTSKnown=!1;if(o.details=t,this.levelLastLoaded=r,this.hls.trigger(ke.a.LEVEL_UPDATED,{details:t,level:r}),!1===this.startFragRequested){if(-1===this.startPosition||-1===this.lastCurrentTime){var l=t.startTimeOffset;isNaN(l)?t.live?(this.startPosition=this.computeLivePosition(a,t),Ae.b.log("configure startPosition to "+this.startPosition)):this.startPosition=0:(l<0&&(Ae.b.log("negative start time offset "+l+", count from end of last fragment"),l=a+i+l),Ae.b.log("start time offset found in playlist, adjust startPosition to "+l),this.startPosition=l),this.lastCurrentTime=this.startPosition}this.nextLoadPosition=this.startPosition}this.state===dt.WAITING_LEVEL&&(this.state=dt.IDLE),this.tick()},t.prototype.onKeyLoaded=function(){this.state===dt.KEY_LOADING&&(this.state=dt.IDLE,this.tick())},t.prototype.onFragLoaded=function(e){var t=this.fragCurrent,r=e.frag;if(this.state===dt.FRAG_LOADING&&t&&"main"===r.type&&r.level===t.level&&r.sn===t.sn){var n=e.stats,o=this.levels[t.level],i=o.details;if(Ae.b.log("Loaded  "+t.sn+" of ["+i.startSN+" ,"+i.endSN+"],level "+t.level),this.bitrateTest=!1,this.stats=n,!0===r.bitrateTest&&this.hls.nextLoadLevel)this.state=dt.IDLE,this.startFragRequested=!1,n.tparsed=n.tbuffered=performance.now(),this.hls.trigger(ke.a.FRAG_BUFFERED,{stats:n,frag:t,id:"main"}),this.tick();else if("initSegment"===r.sn)this.state=dt.IDLE,n.tparsed=n.tbuffered=performance.now(),i.initSegment.data=e.payload,this.hls.trigger(ke.a.FRAG_BUFFERED,{stats:n,frag:t,id:"main"}),this.tick();else{this.state=dt.PARSING;var a=i.totalduration,s=t.level,l=t.sn,u=this.config.defaultAudioCodec||o.audioCodec;this.audioCodecSwap&&(Ae.b.log("swapping playlist audio codec"),void 0===u&&(u=this.lastAudioCodec),u&&(u=-1!==u.indexOf("mp4a.40.5")?"mp4a.40.2":"mp4a.40.5")),this.pendingBuffering=!0,this.appended=!1,Ae.b.log("Parsing "+l+" of ["+i.startSN+" ,"+i.endSN+"],level "+s+", cc "+t.cc);var c=this.demuxer;c||(c=this.demuxer=new st(this.hls,"main"));var d=this.media,f=d&&d.seeking,p=!f&&(i.PTSKnown||!i.live),h=i.initSegment?i.initSegment.data:[];c.push(e.payload,h,u,o.videoCodec,t,a,p,void 0)}}this.fragLoadError=0},t.prototype.onFragParsingInitSegment=function(e){var t=this.fragCurrent,r=e.frag;if(t&&"main"===e.id&&r.sn===t.sn&&r.level===t.level&&this.state===dt.PARSING){var n,o,i=e.tracks;if(i.audio&&this.altAudio&&delete i.audio,o=i.audio){var a=this.levels[this.level].audioCodec,s=navigator.userAgent.toLowerCase();a&&this.audioCodecSwap&&(Ae.b.log("swapping playlist audio codec"),a=-1!==a.indexOf("mp4a.40.5")?"mp4a.40.2":"mp4a.40.5"),this.audioCodecSwitch&&1!==o.metadata.channelCount&&-1===s.indexOf("firefox")&&(a="mp4a.40.5"),-1!==s.indexOf("android")&&"audio/mpeg"!==o.container&&(a="mp4a.40.2",Ae.b.log("Android: force audio codec to "+a)),o.levelCodec=a,o.id=e.id}o=i.video,o&&(o.levelCodec=this.levels[this.level].videoCodec,o.id=e.id),this.hls.trigger(ke.a.BUFFER_CODECS,i);for(n in i){o=i[n],Ae.b.log("main track:"+n+",container:"+o.container+",codecs[level/parsed]=["+o.levelCodec+"/"+o.codec+"]");var l=o.initSegment;l&&(this.appended=!0,this.pendingBuffering=!0,this.hls.trigger(ke.a.BUFFER_APPENDING,{type:n,data:l,parent:"main",content:"initSegment"}))}this.tick()}},t.prototype.onFragParsingData=function(e){var t=this,r=this.fragCurrent,n=e.frag;if(r&&"main"===e.id&&n.sn===r.sn&&n.level===r.level&&("audio"!==e.type||!this.altAudio)&&this.state===dt.PARSING){var o=this.levels[this.level],i=r;if(isNaN(e.endPTS)&&(e.endPTS=e.startPTS+r.duration,e.endDTS=e.startDTS+r.duration),Ae.b.log("Parsed "+e.type+",PTS:["+e.startPTS.toFixed(3)+","+e.endPTS.toFixed(3)+"],DTS:["+e.startDTS.toFixed(3)+"/"+e.endDTS.toFixed(3)+"],nb:"+e.nb+",dropped:"+(e.dropped||0)),"video"===e.type)if(i.dropped=e.dropped,i.dropped){if(!i.backtracked)return Ae.b.warn("missing video frame(s), backtracking fragment"),i.backtracked=!0,this.nextLoadPosition=e.startPTS,this.state=dt.IDLE,this.fragPrevious=i,void this.tick();Ae.b.warn("Already backtracked on this fragment, appending with the gap")}else i.backtracked=!1;var a=v(o.details,i,e.startPTS,e.endPTS,e.startDTS,e.endDTS),s=this.hls;s.trigger(ke.a.LEVEL_PTS_UPDATED,{details:o.details,level:this.level,drift:a,type:e.type,start:e.startPTS,end:e.endPTS}),[e.data1,e.data2].forEach(function(r){r&&r.length&&t.state===dt.PARSING&&(t.appended=!0,t.pendingBuffering=!0,s.trigger(ke.a.BUFFER_APPENDING,{type:e.type,data:r,parent:"main",content:"data"}))}),this.tick()}},t.prototype.onFragParsed=function(e){var t=this.fragCurrent,r=e.frag;t&&"main"===e.id&&r.sn===t.sn&&r.level===t.level&&this.state===dt.PARSING&&(this.stats.tparsed=performance.now(),this.state=dt.PARSED,this._checkAppendedParsed())},t.prototype.onAudioTrackSwitching=function(e){var t=!!e.url,r=e.id;if(!t){if(this.mediaBuffer!==this.media){Ae.b.log("switching on main audio, use media.buffered to schedule main fragment loading"),this.mediaBuffer=this.media;var n=this.fragCurrent;n.loader&&(Ae.b.log("switching to main audio track, cancel main fragment load"),n.loader.abort()),this.fragCurrent=null,this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.state=dt.IDLE}var o=this.hls;o.trigger(ke.a.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"}),o.trigger(ke.a.AUDIO_TRACK_SWITCHED,{id:r}),this.altAudio=!1}},t.prototype.onAudioTrackSwitched=function(e){var t=e.id,r=!!this.hls.audioTracks[t].url;if(r){var n=this.videoBuffer;n&&this.mediaBuffer!==n&&(Ae.b.log("switching on alternate audio, use video.buffered to schedule main fragment loading"),this.mediaBuffer=n)}this.altAudio=r,this.tick()},t.prototype.onBufferCreated=function(e){var t=e.tracks,r=void 0,n=void 0,o=!1;for(var i in t){var a=t[i];"main"===a.id?(n=i,r=a,"video"===i&&(this.videoBuffer=t[i].buffer)):o=!0}o&&r?(Ae.b.log("alternate track found, use "+n+".buffered to schedule main fragment loading"),this.mediaBuffer=r.buffer):this.mediaBuffer=this.media},t.prototype.onBufferAppended=function(e){if("main"===e.parent){var t=this.state;t!==dt.PARSING&&t!==dt.PARSED||(this.pendingBuffering=e.pending>0,this._checkAppendedParsed())}},t.prototype._checkAppendedParsed=function(){if(!(this.state!==dt.PARSED||this.appended&&this.pendingBuffering)){var e=this.fragCurrent;if(e){var t=this.mediaBuffer?this.mediaBuffer:this.media;Ae.b.log("main buffered : "+ut.toString(t.buffered));var r=this._bufferedFrags.filter(function(e){return et.isBuffered(t,(e.startPTS+e.endPTS)/2)});r.push(e),this._bufferedFrags=r.sort(function(e,t){return e.startPTS-t.startPTS}),this.fragPrevious=e;var n=this.stats;n.tbuffered=performance.now(),this.fragLastKbps=Math.round(8*n.total/(n.tbuffered-n.tfirst)),this.hls.trigger(ke.a.FRAG_BUFFERED,{stats:n,frag:e,id:"main"}),this.state=dt.IDLE}this.tick()}},t.prototype.onError=function(e){var t=e.frag||this.fragCurrent;if(!t||"main"===t.type){var r=!!this.media&&et.isBuffered(this.media,this.media.currentTime)&&et.isBuffered(this.media,this.media.currentTime+.5);switch(e.details){case je.a.FRAG_LOAD_ERROR:case je.a.FRAG_LOAD_TIMEOUT:case je.a.KEY_LOAD_ERROR:case je.a.KEY_LOAD_TIMEOUT:if(!e.fatal)if(this.fragLoadError+1<=this.config.fragLoadingMaxRetry){var n=Math.min(Math.pow(2,this.fragLoadError)*this.config.fragLoadingRetryDelay,this.config.fragLoadingMaxRetryTimeout);t.loadCounter=0,Ae.b.warn("mediaController: frag loading failed, retry in "+n+" ms"),this.retryDate=performance.now()+n,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.fragLoadError++,this.state=dt.FRAG_LOADING_WAITING_RETRY}else Ae.b.error("mediaController: "+e.details+" reaches max retry, redispatch as fatal ..."),e.fatal=!0,this.state=dt.ERROR;break;case je.a.FRAG_LOOP_LOADING_ERROR:e.fatal||(r?(this._reduceMaxBufferLength(t.duration),this.state=dt.IDLE):t.autoLevel&&0!==t.level||(e.fatal=!0,this.state=dt.ERROR));break;case je.a.LEVEL_LOAD_ERROR:case je.a.LEVEL_LOAD_TIMEOUT:this.state!==dt.ERROR&&(e.fatal?(this.state=dt.ERROR,Ae.b.warn("streamController: "+e.details+",switch to "+this.state+" state ...")):e.levelRetry||this.state!==dt.WAITING_LEVEL||(this.state=dt.IDLE));break;case je.a.BUFFER_FULL_ERROR:"main"!==e.parent||this.state!==dt.PARSING&&this.state!==dt.PARSED||(r?(this._reduceMaxBufferLength(this.config.maxBufferLength),this.state=dt.IDLE):(Ae.b.warn("buffer full error also media.currentTime is not buffered, flush everything"),this.fragCurrent=null,this.flushMainBuffer(0,Number.POSITIVE_INFINITY)))}}},t.prototype._reduceMaxBufferLength=function(e){var t=this.config;t.maxMaxBufferLength>=e&&(t.maxMaxBufferLength/=2,Ae.b.warn("main:reduce max buffer length to "+t.maxMaxBufferLength+"s"),void 0!==this.fragLoadIdx&&(this.fragLoadIdx+=2*t.fragLoadingLoopThreshold))},t.prototype._checkBuffer=function(){var e=this.media,t=this.config;if(e&&e.readyState){var r=e.currentTime,n=this.mediaBuffer?this.mediaBuffer:e,o=n.buffered;if(!this.loadedmetadata&&o.length){this.loadedmetadata=!0;var i=e.seeking?r:this.startPosition,a=et.isBuffered(n,i),s=o.start(0),l=!a&&Math.abs(i-s)<t.maxSeekHole;(r!==i||l)&&(Ae.b.log("target start position:"+i),l&&(i=s,Ae.b.log("target start position not buffered, seek to buffered.start(0) "+i)),Ae.b.log("adjust currentTime from "+r+" to "+i),e.currentTime=i)}else if(this.immediateSwitch)this.immediateLevelSwitchEnd();else{var u=et.bufferInfo(e,r,0),c=!(e.paused||e.ended||0===e.buffered.length),d=r!==this.lastCurrentTime;if(d)this.stallReported&&(Ae.b.warn("playback not stuck anymore @"+r+", after "+Math.round(performance.now()-this.stalled)+"ms"),this.stallReported=!1),this.stalled=void 0,this.nudgeRetry=0;else if(c){var f=performance.now(),p=this.hls;if(this.stalled){var h=f-this.stalled,m=u.len,y=this.nudgeRetry||0;if(m<=.5&&h>1e3*t.lowBufferWatchdogPeriod){this.stallReported||(this.stallReported=!0,Ae.b.warn("playback stalling in low buffer @"+r),p.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.BUFFER_STALLED_ERROR,fatal:!1,buffer:m}));var g=u.nextStart,v=g-r;if(g&&v<t.maxSeekHole&&v>0){this.nudgeRetry=++y;var b=y*t.nudgeOffset;Ae.b.log("adjust currentTime from "+e.currentTime+" to next buffered @ "+g+" + nudge "+b),e.currentTime=g+b,this.stalled=void 0,p.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.BUFFER_SEEK_OVER_HOLE,fatal:!1,hole:g+b-r})}}else if(m>.5&&h>1e3*t.highBufferWatchdogPeriod)if(this.stallReported||(this.stallReported=!0,Ae.b.warn("playback stalling in high buffer @"+r),p.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.BUFFER_STALLED_ERROR,fatal:!1,buffer:m})),this.stalled=void 0,this.nudgeRetry=++y,y<t.nudgeMaxRetry){var _=e.currentTime,E=_+y*t.nudgeOffset;Ae.b.log("adjust currentTime from "+_+" to "+E),e.currentTime=E,p.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.BUFFER_NUDGE_ON_STALL,fatal:!1})}else Ae.b.error("still stuck in high buffer @"+r+" after "+t.nudgeMaxRetry+", raise fatal error"),p.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.BUFFER_STALLED_ERROR,fatal:!0})}else this.stalled=f,this.stallReported=!1}}}},t.prototype.onFragLoadEmergencyAborted=function(){this.state=dt.IDLE,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.tick()},t.prototype.onBufferFlushed=function(){var e=this.mediaBuffer?this.mediaBuffer:this.media;this._bufferedFrags=this._bufferedFrags.filter(function(t){return et.isBuffered(e,(t.startPTS+t.endPTS)/2)}),void 0!==this.fragLoadIdx&&(this.fragLoadIdx+=2*this.config.fragLoadingLoopThreshold),this.state=dt.IDLE,this.fragPrevious=null},t.prototype.swapAudioCodec=function(){this.audioCodecSwap=!this.audioCodecSwap},t.prototype.computeLivePosition=function(e,t){var r=void 0!==this.config.liveSyncDuration?this.config.liveSyncDuration:this.config.liveSyncDurationCount*t.targetduration;return e+Math.max(0,t.totalduration-r)},ct(t,[{key:"state",set:function(e){if(this.state!==e){var t=this.state;this._state=e,Ae.b.log("main stream:"+t+"->"+e),this.hls.trigger(ke.a.STREAM_STATE_TRANSITION,{previousState:t,nextState:e})}},get:function(){return this._state}},{key:"currentLevel",get:function(){var e=this.media;if(e){var t=this.getBufferedFrag(e.currentTime);if(t)return t.level}return-1}},{key:"nextBufferedFrag",get:function(){var e=this.media;return e?this.followingBufferedFrag(this.getBufferedFrag(e.currentTime)):null}},{key:"nextLevel",get:function(){var e=this.nextBufferedFrag;return e?e.level:-1}},{key:"liveSyncPosition",get:function(){return this._liveSyncPosition},set:function(e){this._liveSyncPosition=e}}]),t}(Pe),pt=ft,ht=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),mt=function(e){function t(r){A(this,t);var n=x(this,e.call(this,r,ke.a.MANIFEST_LOADED,ke.a.LEVEL_LOADED,ke.a.FRAG_LOADED,ke.a.ERROR));return n._manualLevel=-1,n.timer=null,n}return O(t,e),t.prototype.destroy=function(){this.cleanTimer(),this._manualLevel=-1},t.prototype.cleanTimer=function(){null!==this.timer&&(clearTimeout(this.timer),this.timer=null)},t.prototype.startLoad=function(){this.canload=!0;var e=this._levels;e&&e.forEach(function(e){e.loadError=0;var t=e.details;t&&t.live&&(e.details=void 0)}),this.timer&&this.tick()},t.prototype.stopLoad=function(){this.canload=!1},t.prototype.onManifestLoaded=function(e){var t=[],r=void 0,n={},o=null,i=!1,s=!1,l=/chrome|firefox/.test(navigator.userAgent.toLowerCase());if(e.levels.forEach(function(e){e.loadError=0,e.fragmentError=!1,i=i||!!e.videoCodec,s=s||!!e.audioCodec||!(!e.attrs||!e.attrs.AUDIO),!0===l&&e.audioCodec&&-1!==e.audioCodec.indexOf("mp4a.40.34")&&(e.audioCodec=void 0),o=n[e.bitrate],void 0===o?(e.url=[e.url],e.urlId=0,n[e.bitrate]=e,t.push(e)):o.url.push(e.url)}),!0===i&&!0===s&&(t=t.filter(function(e){return!!e.videoCodec})),t=t.filter(function(e){var t=e.audioCodec,r=e.videoCodec;return(!t||a(t))&&(!r||a(r))}),t.length>0){r=t[0].bitrate,t.sort(function(e,t){return e.bitrate-t.bitrate}),this._levels=t;for(var u=0;u<t.length;u++)if(t[u].bitrate===r){this._firstLevel=u,Ae.b.log("manifest loaded,"+t.length+" level(s) found, first bitrate:"+r);break}this.hls.trigger(ke.a.MANIFEST_PARSED,{levels:t,firstLevel:this._firstLevel,stats:e.stats,audio:s,video:i,altAudio:e.audioTracks.length>0})}else this.hls.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.MANIFEST_INCOMPATIBLE_CODECS_ERROR,fatal:!0,url:this.hls.url,reason:"no level with compatible codecs found in manifest"})},t.prototype.setLevelInternal=function(e){var t=this._levels,r=this.hls;if(e>=0&&e<t.length){if(this.cleanTimer(),this._level!==e){Ae.b.log("switching to level "+e),this._level=e;var n=t[e];n.level=e,r.trigger(ke.a.LEVEL_SWITCH,n),r.trigger(ke.a.LEVEL_SWITCHING,n)}var o=t[e],i=o.details;if(!i||!0===i.live){var a=o.urlId;r.trigger(ke.a.LEVEL_LOADING,{url:o.url[a],level:e,id:a})}}else r.trigger(ke.a.ERROR,{type:je.b.OTHER_ERROR,details:je.a.LEVEL_SWITCH_ERROR,level:e,fatal:!1,reason:"invalid level idx"})},t.prototype.onError=function(e){var t=this;if(!0===e.fatal)return void(e.type===je.b.NETWORK_ERROR&&this.cleanTimer());var r=e.details,n=!1,o=!1,i=void 0,a=void 0,s=this.hls,l=s.config,u=s.media;switch(r){case je.a.FRAG_LOAD_ERROR:case je.a.FRAG_LOAD_TIMEOUT:case je.a.FRAG_LOOP_LOADING_ERROR:case je.a.KEY_LOAD_ERROR:case je.a.KEY_LOAD_TIMEOUT:i=e.frag.level,o=!0;break;case je.a.LEVEL_LOAD_ERROR:case je.a.LEVEL_LOAD_TIMEOUT:i=e.context.level,n=!0;break;case je.a.REMUX_ALLOC_ERROR:i=e.level}if(void 0!==i){a=this._levels[i],a.loadError++,a.fragmentError=o;var c=a.url.length;if(c>1&&a.loadError<c)a.urlId=(a.urlId+1)%c,a.details=void 0,Ae.b.warn("level controller,"+r+" for level "+i+": switching to redundant stream id "+a.urlId);else if(-1===this._manualLevel&&0!==i)Ae.b.warn("level controller,"+r+": switch-down for next fragment"),this.hls.nextAutoLevel=Math.max(0,i-1);else if(a&&a.details&&a.details.live)Ae.b.warn("level controller,"+r+" on live stream, discard"),!0===n&&(this._level=void 0);else if(!0===n){var d=!!u&&et.isBuffered(u,u.currentTime)&&et.isBuffered(u,u.currentTime+.5);!0===d?(Ae.b.warn("level controller,"+r+", but media buffered, retry in "+l.levelLoadingRetryDelay+"ms"),this.timer=setTimeout(function(){return t.tick()},l.levelLoadingRetryDelay),e.levelRetry=!0):(Ae.b.error("cannot recover "+r+" error"),this._level=void 0,this.cleanTimer(),e.fatal=!0)}}},t.prototype.onFragLoaded=function(e){var t=e.frag;if(void 0!==t&&"main"===t.type){var r=this._levels[t.level];void 0!==r&&(r.fragmentError=!1,r.loadError=0)}},t.prototype.onLevelLoaded=function(e){var t=this,r=e.level;if(r===this._level){var n=this._levels[r];!1===n.fragmentError&&(n.loadError=0);var o=e.details;if(o.live){var i=1e3*(o.averagetargetduration?o.averagetargetduration:o.targetduration),a=n.details;a&&o.endSN===a.endSN&&(i/=2,Ae.b.log("same live playlist, reload twice faster")),i-=performance.now()-e.stats.trequest,i=Math.max(1e3,Math.round(i)),Ae.b.log("live playlist, reload in "+i+" ms"),this.timer=setTimeout(function(){return t.tick()},i)}else this.cleanTimer()}},t.prototype.tick=function(){var e=this._level;if(void 0!==e&&this.canload){var t=this._levels[e];if(t&&t.url){var r=t.urlId;this.hls.trigger(ke.a.LEVEL_LOADING,{url:t.url[r],level:e,id:r})}}},ht(t,[{key:"levels",get:function(){return this._levels}},{key:"level",get:function(){return this._level},set:function(e){var t=this._levels;t&&t.length>e&&(this._level===e&&void 0!==t[e].details||this.setLevelInternal(e))}},{key:"manualLevel",get:function(){return this._manualLevel},set:function(e){this._manualLevel=e,void 0===this._startLevel&&(this._startLevel=e),-1!==e&&(this.level=e)}},{key:"firstLevel",get:function(){return this._firstLevel},set:function(e){this._firstLevel=e}},{key:"startLevel",get:function(){if(void 0===this._startLevel){var e=this.hls.config.startLevel;return void 0!==e?e:this._firstLevel}return this._startLevel},set:function(e){this._startLevel=e}},{key:"nextLoadLevel",get:function(){return-1!==this._manualLevel?this._manualLevel:this.hls.nextAutoLevel},set:function(e){this.level=e,-1===this._manualLevel&&(this.hls.nextAutoLevel=e)}}]),t}(Pe),yt=mt,gt=r(3),vt=function(e){function t(r){P(this,t);var n=L(this,e.call(this,r,ke.a.MEDIA_ATTACHED,ke.a.MEDIA_DETACHING,ke.a.FRAG_PARSING_METADATA));return n.id3Track=void 0,n.media=void 0,n}return D(t,e),t.prototype.destroy=function(){Pe.prototype.destroy.call(this)},t.prototype.onMediaAttached=function(e){this.media=e.media,this.media},t.prototype.onMediaDetaching=function(){this.media=void 0},t.prototype.onFragParsingMetadata=function(e){var t=e.frag,r=e.samples;this.id3Track||(this.id3Track=this.media.addTextTrack("metadata","id3"),this.id3Track.mode="hidden");for(var n=window.WebKitDataCue||window.VTTCue||window.TextTrackCue,o=0;o<r.length;o++){var i=gt.a.getID3Frames(r[o].data);if(i){var a=r[o].pts,s=o<r.length-1?r[o+1].pts:t.endPTS;a===s&&(s+=1e-4);for(var l=0;l<i.length;l++){var u=i[l];if(!gt.a.isTimeStampFrame(u)){var c=new n(a,s,"");c.value=u,this.id3Track.addCue(c)}}}}},t}(Pe),bt=vt,_t=function(){function e(t){I(this,e),this.alpha_=t?Math.exp(Math.log(.5)/t):0,this.estimate_=0,this.totalWeight_=0}return e.prototype.sample=function(e,t){var r=Math.pow(this.alpha_,e);this.estimate_=t*(1-r)+r*this.estimate_,this.totalWeight_+=e},e.prototype.getTotalWeight=function(){return this.totalWeight_},e.prototype.getEstimate=function(){if(this.alpha_){var e=1-Math.pow(this.alpha_,this.totalWeight_);return this.estimate_/e}return this.estimate_},e}(),Et=_t,Tt=function(){function e(t,r,n,o){N(this,e),this.hls=t,this.defaultEstimate_=o,this.minWeight_=.001,this.minDelayMs_=50,this.slow_=new Et(r),this.fast_=new Et(n)}return e.prototype.sample=function(e,t){e=Math.max(e,this.minDelayMs_);var r=8e3*t/e,n=e/1e3;this.fast_.sample(n,r),this.slow_.sample(n,r)},e.prototype.canEstimate=function(){var e=this.fast_;return e&&e.getTotalWeight()>=this.minWeight_},e.prototype.getEstimate=function(){return this.canEstimate()?Math.min(this.fast_.getEstimate(),this.slow_.getEstimate()):this.defaultEstimate_},e.prototype.destroy=function(){},e}(),wt=Tt,St=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Ct=function(e){function t(r){M(this,t);var n=F(this,e.call(this,r,ke.a.FRAG_LOADING,ke.a.FRAG_LOADED,ke.a.FRAG_BUFFERED,ke.a.ERROR));return n.lastLoadedFragLevel=0,n._nextAutoLevel=-1,n.hls=r,n.timer=null,n._bwEstimator=null,n.onCheck=n._abandonRulesCheck.bind(n),n}return U(t,e),t.prototype.destroy=function(){this.clearTimer(),Pe.prototype.destroy.call(this)},t.prototype.onFragLoading=function(e){var t=e.frag;if("main"===t.type){if(this.timer||(this.timer=setInterval(this.onCheck,100)),!this._bwEstimator){var r=this.hls,n=e.frag.level,o=r.levels[n].details.live,i=r.config,a=void 0,s=void 0;o?(a=i.abrEwmaFastLive,s=i.abrEwmaSlowLive):(a=i.abrEwmaFastVoD,s=i.abrEwmaSlowVoD),this._bwEstimator=new wt(r,s,a,i.abrEwmaDefaultEstimate)}this.fragCurrent=t}},t.prototype._abandonRulesCheck=function(){var e=this.hls,t=e.media,r=this.fragCurrent,n=r.loader,o=e.minAutoLevel;if(!n||n.stats&&n.stats.aborted)return Ae.b.warn("frag loader destroy or aborted, disarm abandonRules"),void this.clearTimer();var i=n.stats;if(t&&i&&(!t.paused&&0!==t.playbackRate||!t.readyState)&&r.autoLevel&&r.level){var a=performance.now()-i.trequest,s=Math.abs(t.playbackRate);if(a>500*r.duration/s){var l=e.levels,u=Math.max(1,i.bw?i.bw/8:1e3*i.loaded/a),c=l[r.level],d=c.realBitrate?Math.max(c.realBitrate,c.bitrate):c.bitrate,f=i.total?i.total:Math.max(i.loaded,Math.round(r.duration*d/8)),p=t.currentTime,h=(f-i.loaded)/u,m=(et.bufferInfo(t,p,e.config.maxBufferHole).end-p)/s;if(m<2*r.duration/s&&h>m){var y=void 0,g=void 0;for(g=r.level-1;g>o;g--){var v=l[g].realBitrate?Math.max(l[g].realBitrate,l[g].bitrate):l[g].bitrate;if((y=r.duration*v/(6.4*u))<m)break}y<h&&(Ae.b.warn("loading too slow, abort fragment loading and switch to level "+g+":fragLoadedDelay["+g+"]<fragLoadedDelay["+(r.level-1)+"];bufferStarvationDelay:"+y.toFixed(1)+"<"+h.toFixed(1)+":"+m.toFixed(1)),e.nextLoadLevel=g,this._bwEstimator.sample(a,i.loaded),n.abort(),this.clearTimer(),e.trigger(ke.a.FRAG_LOAD_EMERGENCY_ABORTED,{frag:r,stats:i}))}}}},t.prototype.onFragLoaded=function(e){var t=e.frag;if("main"===t.type&&!isNaN(t.sn)){if(this.clearTimer(),this.lastLoadedFragLevel=t.level,this._nextAutoLevel=-1,this.hls.config.abrMaxWithRealBitrate){var r=this.hls.levels[t.level],n=(r.loaded?r.loaded.bytes:0)+e.stats.loaded,o=(r.loaded?r.loaded.duration:0)+e.frag.duration;r.loaded={bytes:n,duration:o},r.realBitrate=Math.round(8*n/o)}if(e.frag.bitrateTest){var i=e.stats;i.tparsed=i.tbuffered=i.tload,this.onFragBuffered(e)}}},t.prototype.onFragBuffered=function(e){var t=e.stats,r=e.frag;if(!(!0===t.aborted||1!==r.loadCounter||"main"!==r.type||isNaN(r.sn)||r.bitrateTest&&t.tload!==t.tbuffered)){var n=t.tparsed-t.trequest;Ae.b.log("latency/loading/parsing/append/kbps:"+Math.round(t.tfirst-t.trequest)+"/"+Math.round(t.tload-t.tfirst)+"/"+Math.round(t.tparsed-t.tload)+"/"+Math.round(t.tbuffered-t.tparsed)+"/"+Math.round(8*t.loaded/(t.tbuffered-t.trequest))),this._bwEstimator.sample(n,t.loaded),t.bwEstimate=this._bwEstimator.getEstimate(),r.bitrateTest?this.bitrateTestDelay=n/1e3:this.bitrateTestDelay=0}},t.prototype.onError=function(e){switch(e.details){case je.a.FRAG_LOAD_ERROR:case je.a.FRAG_LOAD_TIMEOUT:this.clearTimer()}},t.prototype.clearTimer=function(){clearInterval(this.timer),this.timer=null},t.prototype._findBestLevel=function(e,t,r,n,o,i,a,s,l){for(var u=o;u>=n;u--){var c=l[u],d=c.details,f=d?d.totalduration/d.fragments.length:t,p=!!d&&d.live,h=void 0;h=u<=e?a*r:s*r;var m=l[u].realBitrate?Math.max(l[u].realBitrate,l[u].bitrate):l[u].bitrate,y=m*f/h;if(Ae.b.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: "+u+"/"+Math.round(h)+"/"+m+"/"+f+"/"+i+"/"+y),h>m&&(!y||p&&!this.bitrateTestDelay||y<i))return u}return-1},St(t,[{key:"nextAutoLevel",get:function(){var e=this._nextAutoLevel,t=this._bwEstimator;if(!(-1===e||t&&t.canEstimate()))return e;var r=this._nextABRAutoLevel;return-1!==e&&(r=Math.min(e,r)),r},set:function(e){this._nextAutoLevel=e}},{key:"_nextABRAutoLevel",get:function(){var e=this.hls,t=e.maxAutoLevel,r=e.levels,n=e.config,o=e.minAutoLevel,i=e.media,a=this.lastLoadedFragLevel,s=this.fragCurrent?this.fragCurrent.duration:0,l=i?i.currentTime:0,u=i&&0!==i.playbackRate?Math.abs(i.playbackRate):1,c=this._bwEstimator?this._bwEstimator.getEstimate():n.abrEwmaDefaultEstimate,d=(et.bufferInfo(i,l,n.maxBufferHole).end-l)/u,f=this._findBestLevel(a,s,c,o,t,d,n.abrBandWidthFactor,n.abrBandWidthUpFactor,r);if(f>=0)return f;Ae.b.trace("rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering");var p=s?Math.min(s,n.maxStarvationDelay):n.maxStarvationDelay,h=n.abrBandWidthFactor,m=n.abrBandWidthUpFactor;if(0===d){var y=this.bitrateTestDelay;if(y){p=(s?Math.min(s,n.maxLoadingDelay):n.maxLoadingDelay)-y,Ae.b.trace("bitrate test took "+Math.round(1e3*y)+"ms, set first fragment max fetchDuration to "+Math.round(1e3*p)+" ms"),h=m=1}}return f=this._findBestLevel(a,s,c,o,t,d+p,h,m,r),Math.max(f,0)}}]),t}(Pe),Rt=Ct,kt=function(e){function t(r){B(this,t);var n=G(this,e.call(this,r,ke.a.MEDIA_ATTACHING,ke.a.MEDIA_DETACHING,ke.a.MANIFEST_PARSED,ke.a.BUFFER_RESET,ke.a.BUFFER_APPENDING,ke.a.BUFFER_CODECS,ke.a.BUFFER_EOS,ke.a.BUFFER_FLUSHING,ke.a.LEVEL_PTS_UPDATED,ke.a.LEVEL_UPDATED));return n._msDuration=null,n._levelDuration=null,n.onsbue=n.onSBUpdateEnd.bind(n),n.onsbe=n.onSBUpdateError.bind(n),n.pendingTracks={},n.tracks={},n}return H(t,e),t.prototype.destroy=function(){Pe.prototype.destroy.call(this)},t.prototype.onLevelPtsUpdated=function(e){var t=e.type,r=this.tracks.audio;if("audio"===t&&r&&"audio/mpeg"===r.container){var n=this.sourceBuffer.audio;if(Math.abs(n.timestampOffset-e.start)>.1){var o=n.updating;try{n.abort()}catch(e){o=!0,Ae.b.warn("can not abort audio buffer: "+e)}o?this.audioTimestampOffset=e.start:(Ae.b.warn("change mpeg audio timestamp offset from "+n.timestampOffset+" to "+e.start),n.timestampOffset=e.start)}}},t.prototype.onManifestParsed=function(e){var t=e.audio,r=e.video||e.levels.length&&e.audio,n=0;e.altAudio&&(t||r)&&(n=(t?1:0)+(r?1:0),Ae.b.log(n+" sourceBuffer(s) expected")),this.sourceBufferNb=n},t.prototype.onMediaAttaching=function(e){var t=this.media=e.media;if(t){var r=this.mediaSource=new MediaSource;this.onmso=this.onMediaSourceOpen.bind(this),this.onmse=this.onMediaSourceEnded.bind(this),this.onmsc=this.onMediaSourceClose.bind(this),r.addEventListener("sourceopen",this.onmso),r.addEventListener("sourceended",this.onmse),r.addEventListener("sourceclose",this.onmsc),t.src=URL.createObjectURL(r)}},t.prototype.onMediaDetaching=function(){Ae.b.log("media source detaching");var e=this.mediaSource;if(e){if("open"===e.readyState)try{e.endOfStream()}catch(e){Ae.b.warn("onMediaDetaching:"+e.message+" while calling endOfStream")}e.removeEventListener("sourceopen",this.onmso),e.removeEventListener("sourceended",this.onmse),e.removeEventListener("sourceclose",this.onmsc),this.media&&(URL.revokeObjectURL(this.media.src),this.media.removeAttribute("src"),this.media.load()),this.mediaSource=null,this.media=null,this.pendingTracks={},this.tracks={},this.sourceBuffer={},this.flushRange=[],this.segments=[],this.appended=0}this.onmso=this.onmse=this.onmsc=null,this.hls.trigger(ke.a.MEDIA_DETACHED)},t.prototype.onMediaSourceOpen=function(){Ae.b.log("media source opened"),this.hls.trigger(ke.a.MEDIA_ATTACHED,{media:this.media});var e=this.mediaSource;e&&e.removeEventListener("sourceopen",this.onmso),this.checkPendingTracks()},t.prototype.checkPendingTracks=function(){var e=this.pendingTracks,t=Object.keys(e).length;t&&(this.sourceBufferNb<=t||0===this.sourceBufferNb)&&(this.createSourceBuffers(e),this.pendingTracks={},this.doAppending())},t.prototype.onMediaSourceClose=function(){Ae.b.log("media source closed")},t.prototype.onMediaSourceEnded=function(){Ae.b.log("media source ended")},t.prototype.onSBUpdateEnd=function(){if(this.audioTimestampOffset){var e=this.sourceBuffer.audio;Ae.b.warn("change mpeg audio timestamp offset from "+e.timestampOffset+" to "+this.audioTimestampOffset),e.timestampOffset=this.audioTimestampOffset,delete this.audioTimestampOffset}this._needsFlush&&this.doFlush(),this._needsEos&&this.checkEos(),this.appending=!1;var t=this.parent,r=this.segments.reduce(function(e,r){return r.parent===t?e+1:e},0);this.hls.trigger(ke.a.BUFFER_APPENDED,{parent:t,pending:r}),this._needsFlush||this.doAppending(),this.updateMediaElementDuration()},t.prototype.onSBUpdateError=function(e){Ae.b.error("sourceBuffer error:",e),this.hls.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.BUFFER_APPENDING_ERROR,fatal:!1})},t.prototype.onBufferReset=function(){var e=this.sourceBuffer;for(var t in e){var r=e[t];try{this.mediaSource.removeSourceBuffer(r),r.removeEventListener("updateend",this.onsbue),r.removeEventListener("error",this.onsbe)}catch(e){}}this.sourceBuffer={},this.flushRange=[],this.segments=[],this.appended=0},t.prototype.onBufferCodecs=function(e){if(0===Object.keys(this.sourceBuffer).length){for(var t in e)this.pendingTracks[t]=e[t];var r=this.mediaSource;r&&"open"===r.readyState&&this.checkPendingTracks()}},t.prototype.createSourceBuffers=function(e){var t=this.sourceBuffer,r=this.mediaSource;for(var n in e)if(!t[n]){var o=e[n],i=o.levelCodec||o.codec,a=o.container+";codecs="+i;Ae.b.log("creating sourceBuffer("+a+")");try{var s=t[n]=r.addSourceBuffer(a);s.addEventListener("updateend",this.onsbue),s.addEventListener("error",this.onsbe),this.tracks[n]={codec:i,container:o.container},o.buffer=s}catch(e){Ae.b.error("error while trying to add sourceBuffer:"+e.message),this.hls.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.BUFFER_ADD_CODEC_ERROR,fatal:!1,err:e,mimeType:a})}}this.hls.trigger(ke.a.BUFFER_CREATED,{tracks:e})},t.prototype.onBufferAppending=function(e){this._needsFlush||(this.segments?this.segments.push(e):this.segments=[e],this.doAppending())},t.prototype.onBufferAppendFail=function(e){Ae.b.error("sourceBuffer error:",e.event),this.hls.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.BUFFER_APPENDING_ERROR,fatal:!1})},t.prototype.onBufferEos=function(e){var t=this.sourceBuffer,r=e.type;for(var n in t)r&&n!==r||t[n].ended||(t[n].ended=!0,Ae.b.log(n+" sourceBuffer now EOS"));this.checkEos()},t.prototype.checkEos=function(){var e=this.sourceBuffer,t=this.mediaSource;if(!t||"open"!==t.readyState)return void(this._needsEos=!1);for(var r in e){var n=e[r];if(!n.ended)return;if(n.updating)return void(this._needsEos=!0)}Ae.b.log("all media data available, signal endOfStream() to MediaSource and stop loading fragment");try{t.endOfStream()}catch(e){Ae.b.warn("exception while calling mediaSource.endOfStream()")}this._needsEos=!1},t.prototype.onBufferFlushing=function(e){this.flushRange.push({start:e.startOffset,end:e.endOffset,type:e.type}),this.flushBufferCounter=0,this.doFlush()},t.prototype.onLevelUpdated=function(e){var t=e.details;0!==t.fragments.length&&(this._levelDuration=t.totalduration+t.fragments[0].start,this.updateMediaElementDuration())},t.prototype.updateMediaElementDuration=function(){var e=this.media,t=this.mediaSource,r=this.sourceBuffer,n=this._levelDuration;if(null!==n&&e&&t&&r&&0!==e.readyState&&"open"===t.readyState){for(var o in r)if(r[o].updating)return;null===this._msDuration&&(this._msDuration=t.duration);var i=e.duration;(n>this._msDuration&&n>i||i===1/0||isNaN(i))&&(Ae.b.log("Updating mediasource duration to "+n.toFixed(3)),this._msDuration=t.duration=n)}},t.prototype.doFlush=function(){for(;this.flushRange.length;){var e=this.flushRange[0];if(!this.flushBuffer(e.start,e.end,e.type))return void(this._needsFlush=!0);this.flushRange.shift(),this.flushBufferCounter=0}if(0===this.flushRange.length){this._needsFlush=!1;var t=0,r=this.sourceBuffer;try{for(var n in r)t+=r[n].buffered.length}catch(e){Ae.b.error("error while accessing sourceBuffer.buffered")}this.appended=t,this.hls.trigger(ke.a.BUFFER_FLUSHED)}},t.prototype.doAppending=function(){var e=this.hls,t=this.sourceBuffer,r=this.segments;if(Object.keys(t).length){if(this.media.error)return this.segments=[],void Ae.b.error("trying to append although a media error occured, flush segment and abort");if(this.appending)return;if(r&&r.length){var n=r.shift();try{var o=n.type,i=t[o];i?i.updating?r.unshift(n):(i.ended=!1,this.parent=n.parent,i.appendBuffer(n.data),this.appendError=0,this.appended++,this.appending=!0):this.onSBUpdateEnd()}catch(t){Ae.b.error("error while trying to append buffer:"+t.message),r.unshift(n);var a={type:je.b.MEDIA_ERROR,parent:n.parent};if(22===t.code)return this.segments=[],a.details=je.a.BUFFER_FULL_ERROR,a.fatal=!1,void e.trigger(ke.a.ERROR,a);if(this.appendError?this.appendError++:this.appendError=1,a.details=je.a.BUFFER_APPEND_ERROR,this.appendError>e.config.appendErrorMaxRetry)return Ae.b.log("fail "+e.config.appendErrorMaxRetry+" times to append segment in sourceBuffer"),r=[],a.fatal=!0,void e.trigger(ke.a.ERROR,a);a.fatal=!1,e.trigger(ke.a.ERROR,a)}}}},t.prototype.flushBuffer=function(e,t,r){var n,o,i,a,s,l,u=this.sourceBuffer;if(Object.keys(u).length){if(Ae.b.log("flushBuffer,pos/start/end: "+this.media.currentTime.toFixed(3)+"/"+e+"/"+t),this.flushBufferCounter<this.appended){for(var c in u)if(!r||c===r){if(n=u[c],n.ended=!1,n.updating)return Ae.b.warn("cannot flush, sb updating in progress"),!1;try{for(o=0;o<n.buffered.length;o++)if(i=n.buffered.start(o),a=n.buffered.end(o),-1!==navigator.userAgent.toLowerCase().indexOf("firefox")&&t===Number.POSITIVE_INFINITY?(s=e,l=t):(s=Math.max(i,e),l=Math.min(a,t)),Math.min(l,a)-s>.5)return this.flushBufferCounter++,Ae.b.log("flush "+c+" ["+s+","+l+"], of ["+i+","+a+"], pos:"+this.media.currentTime),n.remove(s,l),!1}catch(e){Ae.b.warn("exception while accessing sourcebuffer, it might have been removed from MediaSource")}}}else Ae.b.warn("abort flushing too many retries");Ae.b.log("buffer flushed")}return!0},t}(Pe),jt=kt,At=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),xt=function(e){function t(r){return W(this,t),V(this,e.call(this,r,ke.a.FPS_DROP_LEVEL_CAPPING,ke.a.MEDIA_ATTACHING,ke.a.MANIFEST_PARSED))}return K(t,e),t.prototype.destroy=function(){this.hls.config.capLevelToPlayerSize&&(this.media=this.restrictedLevels=null,this.autoLevelCapping=Number.POSITIVE_INFINITY,this.timer&&(this.timer=clearInterval(this.timer)))},t.prototype.onFpsDropLevelCapping=function(e){t.isLevelAllowed(e.droppedLevel,this.restrictedLevels)&&this.restrictedLevels.push(e.droppedLevel)},t.prototype.onMediaAttaching=function(e){this.media=e.media instanceof HTMLVideoElement?e.media:null},t.prototype.onManifestParsed=function(e){var t=this.hls;this.restrictedLevels=[],t.config.capLevelToPlayerSize&&(this.autoLevelCapping=Number.POSITIVE_INFINITY,this.levels=e.levels,t.firstLevel=this.getMaxLevel(e.firstLevel),clearInterval(this.timer),this.timer=setInterval(this.detectPlayerSize.bind(this),1e3),this.detectPlayerSize())},t.prototype.detectPlayerSize=function(){if(this.media){var e=this.levels?this.levels.length:0;if(e){var t=this.hls;t.autoLevelCapping=this.getMaxLevel(e-1),t.autoLevelCapping>this.autoLevelCapping&&t.streamController.nextLevelSwitch(),this.autoLevelCapping=t.autoLevelCapping}}},t.prototype.getMaxLevel=function(e){var r=this;if(!this.levels)return-1;var n=this.levels.filter(function(n,o){return t.isLevelAllowed(o,r.restrictedLevels)&&o<=e});return t.getMaxLevelByMediaSize(n,this.mediaWidth,this.mediaHeight)},t.isLevelAllowed=function(e){return-1===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:[]).indexOf(e)},t.getMaxLevelByMediaSize=function(e,t,r){if(!e||e&&!e.length)return-1;for(var n=e.length-1,o=0;o<e.length;o+=1){var i=e[o];if((i.width>=t||i.height>=r)&&function(e,t){return!t||(e.width!==t.width||e.height!==t.height)}(i,e[o+1])){n=o;break}}return n},At(t,[{key:"mediaWidth",get:function(){var e=void 0,r=this.media;return r&&(e=r.width||r.clientWidth||r.offsetWidth,e*=t.contentScaleFactor),e}},{key:"mediaHeight",get:function(){var e=void 0,r=this.media;return r&&(e=r.height||r.clientHeight||r.offsetHeight,e*=t.contentScaleFactor),e}}],[{key:"contentScaleFactor",get:function(){var e=1;try{e=window.devicePixelRatio}catch(e){}return e}}]),t}(Pe),Ot=xt,Pt=function(e){function t(r){return z(this,t),q(this,e.call(this,r,ke.a.MEDIA_ATTACHING))}return Y(t,e),t.prototype.destroy=function(){this.timer&&clearInterval(this.timer),this.isVideoPlaybackQualityAvailable=!1},t.prototype.onMediaAttaching=function(e){var t=this.hls.config;if(t.capLevelOnFPSDrop){"function"==typeof(this.video=e.media instanceof HTMLVideoElement?e.media:null).getVideoPlaybackQuality&&(this.isVideoPlaybackQualityAvailable=!0),clearInterval(this.timer),this.timer=setInterval(this.checkFPSInterval.bind(this),t.fpsDroppedMonitoringPeriod)}},t.prototype.checkFPS=function(e,t,r){var n=performance.now();if(t){if(this.lastTime){var o=n-this.lastTime,i=r-this.lastDroppedFrames,a=t-this.lastDecodedFrames,s=1e3*i/o,l=this.hls;if(l.trigger(ke.a.FPS_DROP,{currentDropped:i,currentDecoded:a,totalDroppedFrames:r}),s>0&&i>l.config.fpsDroppedMonitoringThreshold*a){var u=l.currentLevel;Ae.b.warn("drop FPS ratio greater than max allowed value for currentLevel: "+u),u>0&&(-1===l.autoLevelCapping||l.autoLevelCapping>=u)&&(u-=1,l.trigger(ke.a.FPS_DROP_LEVEL_CAPPING,{level:u,droppedLevel:l.currentLevel}),l.autoLevelCapping=u,l.streamController.nextLevelSwitch())}}this.lastTime=n,this.lastDroppedFrames=r,this.lastDecodedFrames=t}},t.prototype.checkFPSInterval=function(){var e=this.video;if(e)if(this.isVideoPlaybackQualityAvailable){var t=e.getVideoPlaybackQuality();this.checkFPS(e,t.totalVideoFrames,t.droppedVideoFrames)}else this.checkFPS(e,e.webkitDecodedFrameCount,e.webkitDroppedFrameCount)},t}(Pe),Lt=Pt,Dt=function(){function e(t){X(this,e),t&&t.xhrSetup&&(this.xhrSetup=t.xhrSetup)}return e.prototype.destroy=function(){this.abort(),this.loader=null},e.prototype.abort=function(){var e=this.loader;e&&4!==e.readyState&&(this.stats.aborted=!0,e.abort()),window.clearTimeout(this.requestTimeout),this.requestTimeout=null,window.clearTimeout(this.retryTimeout),this.retryTimeout=null},e.prototype.load=function(e,t,r){this.context=e,this.config=t,this.callbacks=r,this.stats={trequest:performance.now(),retry:0},this.retryDelay=t.retryDelay,this.loadInternal()},e.prototype.loadInternal=function(){var e,t=this.context;e=this.loader=new XMLHttpRequest;var r=this.stats;r.tfirst=0,r.loaded=0;var n=this.xhrSetup;try{if(n)try{n(e,t.url)}catch(r){e.open("GET",t.url,!0),n(e,t.url)}e.readyState||e.open("GET",t.url,!0)}catch(r){return void this.callbacks.onError({code:e.status,text:r.message},t,e)}t.rangeEnd&&e.setRequestHeader("Range","bytes="+t.rangeStart+"-"+(t.rangeEnd-1)),e.onreadystatechange=this.readystatechange.bind(this),e.onprogress=this.loadprogress.bind(this),e.responseType=t.responseType,this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),this.config.timeout),e.send()},e.prototype.readystatechange=function(e){var t=e.currentTarget,r=t.readyState,n=this.stats,o=this.context,i=this.config;if(!n.aborted&&r>=2)if(window.clearTimeout(this.requestTimeout),0===n.tfirst&&(n.tfirst=Math.max(performance.now(),n.trequest)),4===r){var a=t.status;if(a>=200&&a<300){n.tload=Math.max(n.tfirst,performance.now());var s=void 0,l=void 0;"arraybuffer"===o.responseType?(s=t.response,l=s.byteLength):(s=t.responseText,l=s.length),n.loaded=n.total=l;var u={url:t.responseURL,data:s};this.callbacks.onSuccess(u,n,o,t)}else n.retry>=i.maxRetry||a>=400&&a<499?(Ae.b.error(a+" while loading "+o.url),this.callbacks.onError({code:a,text:t.statusText},o,t)):(Ae.b.warn(a+" while loading "+o.url+", retrying in "+this.retryDelay+"..."),this.destroy(),this.retryTimeout=window.setTimeout(this.loadInternal.bind(this),this.retryDelay),this.retryDelay=Math.min(2*this.retryDelay,i.maxRetryDelay),n.retry++)}else this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),i.timeout)},e.prototype.loadtimeout=function(){Ae.b.warn("timeout while loading "+this.context.url),this.callbacks.onTimeout(this.stats,this.context,null)},e.prototype.loadprogress=function(e){var t=e.currentTarget,r=this.stats;r.loaded=e.loaded,e.lengthComputable&&(r.total=e.total);var n=this.callbacks.onProgress;n&&n(r,this.context,null,t)},e}(),It=Dt,Nt=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Mt=function(e){function t(r){Q(this,t);var n=$(this,e.call(this,r,ke.a.MANIFEST_LOADING,ke.a.MANIFEST_LOADED,ke.a.AUDIO_TRACK_LOADED,ke.a.ERROR));return n.ticks=0,n.ontick=n.tick.bind(n),n}return J(t,e),t.prototype.destroy=function(){this.cleanTimer(),Pe.prototype.destroy.call(this)},t.prototype.cleanTimer=function(){this.timer&&(clearTimeout(this.timer),this.timer=null)},t.prototype.tick=function(){1===++this.ticks&&(this.doTick(),this.ticks>1&&setTimeout(this.tick,1),this.ticks=0)},t.prototype.doTick=function(){this.updateTrack(this.trackId)},t.prototype.onError=function(e){e.fatal&&e.type===je.b.NETWORK_ERROR&&this.cleanTimer()},t.prototype.onManifestLoading=function(){this.tracks=[],this.trackId=-1},t.prototype.onManifestLoaded=function(e){var t=this,r=e.audioTracks||[],n=!1;this.tracks=r,this.hls.trigger(ke.a.AUDIO_TRACKS_UPDATED,{audioTracks:r});var o=0;r.forEach(function(e){if(e.default&&!n)return t.audioTrack=o,void(n=!0);o++}),!1===n&&r.length&&(Ae.b.log("no default audio track defined, use first audio track as default"),this.audioTrack=0)},t.prototype.onAudioTrackLoaded=function(e){e.id<this.tracks.length&&(Ae.b.log("audioTrack "+e.id+" loaded"),this.tracks[e.id].details=e.details,e.details.live&&!this.timer&&(this.timer=setInterval(this.ontick,1e3*e.details.targetduration)),!e.details.live&&this.timer&&this.cleanTimer())},t.prototype.setAudioTrackInternal=function(e){if(e>=0&&e<this.tracks.length){this.cleanTimer(),this.trackId=e,Ae.b.log("switching to audioTrack "+e);var t=this.tracks[e],r=this.hls,n=t.type,o=t.url,i={id:e,type:n,url:o};r.trigger(ke.a.AUDIO_TRACK_SWITCH,i),r.trigger(ke.a.AUDIO_TRACK_SWITCHING,i);var a=t.details;!o||void 0!==a&&!0!==a.live||(Ae.b.log("(re)loading playlist for audioTrack "+e),r.trigger(ke.a.AUDIO_TRACK_LOADING,{url:o,id:e}))}},t.prototype.updateTrack=function(e){if(e>=0&&e<this.tracks.length){this.cleanTimer(),this.trackId=e,Ae.b.log("updating audioTrack "+e);var t=this.tracks[e],r=t.url,n=t.details;!r||void 0!==n&&!0!==n.live||(Ae.b.log("(re)loading playlist for audioTrack "+e),this.hls.trigger(ke.a.AUDIO_TRACK_LOADING,{url:r,id:e}))}},Nt(t,[{key:"audioTracks",get:function(){return this.tracks}},{key:"audioTrack",get:function(){return this.trackId},set:function(e){this.trackId===e&&void 0!==this.tracks[e].details||this.setAudioTrackInternal(e)}}]),t}(Pe),Ft=Mt,Ut=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Bt={STOPPED:"STOPPED",STARTING:"STARTING",IDLE:"IDLE",PAUSED:"PAUSED",KEY_LOADING:"KEY_LOADING",FRAG_LOADING:"FRAG_LOADING",FRAG_LOADING_WAITING_RETRY:"FRAG_LOADING_WAITING_RETRY",WAITING_TRACK:"WAITING_TRACK",PARSING:"PARSING",PARSED:"PARSED",BUFFER_FLUSHING:"BUFFER_FLUSHING",ENDED:"ENDED",ERROR:"ERROR",WAITING_INIT_PTS:"WAITING_INIT_PTS"},Gt=function(e){function t(r){Z(this,t);var n=ee(this,e.call(this,r,ke.a.MEDIA_ATTACHED,ke.a.MEDIA_DETACHING,ke.a.AUDIO_TRACKS_UPDATED,ke.a.AUDIO_TRACK_SWITCHING,ke.a.AUDIO_TRACK_LOADED,ke.a.KEY_LOADED,ke.a.FRAG_LOADED,ke.a.FRAG_PARSING_INIT_SEGMENT,ke.a.FRAG_PARSING_DATA,ke.a.FRAG_PARSED,ke.a.ERROR,ke.a.BUFFER_CREATED,ke.a.BUFFER_APPENDED,ke.a.BUFFER_FLUSHED,ke.a.INIT_PTS_FOUND));return n.config=r.config,n.audioCodecSwap=!1,n.ticks=0,n._state=Bt.STOPPED,n.ontick=n.tick.bind(n),n.initPTS=[],n.waitingFragment=null,n.videoTrackCC=null,n}return te(t,e),t.prototype.destroy=function(){this.stopLoad(),this.timer&&(clearInterval(this.timer),this.timer=null),Pe.prototype.destroy.call(this),this.state=Bt.STOPPED},t.prototype.onInitPtsFound=function(e){var t=e.id,r=e.frag.cc,n=e.initPTS;"main"===t&&(this.initPTS[r]=n,this.videoTrackCC=r,Ae.b.log("InitPTS for cc:"+r+" found from video track:"+n),this.state===Bt.WAITING_INIT_PTS&&this.tick())},t.prototype.startLoad=function(e){if(this.tracks){var t=this.lastCurrentTime;this.stopLoad(),this.timer||(this.timer=setInterval(this.ontick,100)),this.fragLoadError=0,t>0&&-1===e?(Ae.b.log("audio:override startPosition with lastCurrentTime @"+t.toFixed(3)),this.state=Bt.IDLE):(this.lastCurrentTime=this.startPosition?this.startPosition:e,this.state=Bt.STARTING),this.nextLoadPosition=this.startPosition=this.lastCurrentTime,this.tick()}else this.startPosition=e,this.state=Bt.STOPPED},t.prototype.stopLoad=function(){var e=this.fragCurrent;e&&(e.loader&&e.loader.abort(),this.fragCurrent=null),this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.state=Bt.STOPPED},t.prototype.tick=function(){1===++this.ticks&&(this.doTick(),this.ticks>1&&setTimeout(this.tick,1),this.ticks=0)},t.prototype.doTick=function(){var e,t,r,n=this.hls,o=n.config;switch(this.state){case Bt.ERROR:case Bt.PAUSED:case Bt.BUFFER_FLUSHING:break;case Bt.STARTING:this.state=Bt.WAITING_TRACK,this.loadedmetadata=!1;break;case Bt.IDLE:var i=this.tracks;if(!i)break;if(!this.media&&(this.startFragRequested||!o.startFragPrefetch))break;if(this.loadedmetadata)e=this.media.currentTime;else if(void 0===(e=this.nextLoadPosition))break;var a=this.mediaBuffer?this.mediaBuffer:this.media,s=this.videoBuffer?this.videoBuffer:this.media,l=et.bufferInfo(a,e,o.maxBufferHole),u=et.bufferInfo(s,e,o.maxBufferHole),c=l.len,d=l.end,f=this.fragPrevious,p=Math.max(o.maxBufferLength,u.len),h=this.audioSwitch,m=this.trackId;if((c<p||h)&&m<i.length){if(void 0===(r=i[m].details)){this.state=Bt.WAITING_TRACK;break}if(!h&&!r.live&&f&&f.sn===r.endSN&&(!this.media.seeking||this.media.duration-d<f.duration/2)){this.hls.trigger(ke.a.BUFFER_EOS,{type:"audio"}),this.state=Bt.ENDED;break}var y=r.fragments,g=y.length,v=y[0].start,b=y[g-1].start+y[g-1].duration,_=void 0;if(h)if(r.live&&!r.PTSKnown)Ae.b.log("switching audiotrack, live stream, unknown PTS,load first fragment"),d=0;else if(d=e,r.PTSKnown&&e<v){if(!(l.end>v||l.nextStart))return;Ae.b.log("alt audio track ahead of main track, seek to start of alt audio track"),this.media.currentTime=v+.05}if(r.initSegment&&!r.initSegment.data)_=r.initSegment;else if(d<=v){if(_=y[0],null!==this.videoTrackCC&&_.cc!==this.videoTrackCC&&(_=E(y,this.videoTrackCC)),r.live&&_.loadIdx&&_.loadIdx===this.fragLoadIdx){var T=l.nextStart?l.nextStart:v;return Ae.b.log("no alt audio available @currentTime:"+this.media.currentTime+", seeking @"+(T+.05)),void(this.media.currentTime=T+.05)}}else{var w=void 0,S=o.maxFragLookUpTolerance,C=f?y[f.sn-y[0].sn+1]:void 0,R=function(e){var t=Math.min(S,e.duration);return e.start+e.duration-t<=d?1:e.start-t>d&&e.start?-1:0};d<b?(d>b-S&&(S=0),w=C&&!R(C)?C:Je.search(y,R)):w=y[g-1],w&&(_=w,v=w.start,f&&_.level===f.level&&_.sn===f.sn&&(_.sn<r.endSN?(_=y[_.sn+1-r.startSN],Ae.b.log("SN just loaded, load next one: "+_.sn)):_=null))}if(_)if(_.decryptdata&&null!=_.decryptdata.uri&&null==_.decryptdata.key)Ae.b.log("Loading key for "+_.sn+" of ["+r.startSN+" ,"+r.endSN+"],track "+m),this.state=Bt.KEY_LOADING,n.trigger(ke.a.KEY_LOADING,{frag:_});else{if(Ae.b.log("Loading "+_.sn+", cc: "+_.cc+" of ["+r.startSN+" ,"+r.endSN+"],track "+m+", currentTime:"+e+",bufferEnd:"+d.toFixed(3)),void 0!==this.fragLoadIdx?this.fragLoadIdx++:this.fragLoadIdx=0,_.loadCounter){_.loadCounter++;var k=o.fragLoadingLoopThreshold;if(_.loadCounter>k&&Math.abs(this.fragLoadIdx-_.loadIdx)<k)return void n.trigger(ke.a.ERROR,{type:je.b.MEDIA_ERROR,details:je.a.FRAG_LOOP_LOADING_ERROR,fatal:!1,frag:_})}else _.loadCounter=1;_.loadIdx=this.fragLoadIdx,this.fragCurrent=_,this.startFragRequested=!0,isNaN(_.sn)||(this.nextLoadPosition=_.start+_.duration),n.trigger(ke.a.FRAG_LOADING,{frag:_}),this.state=Bt.FRAG_LOADING}}break;case Bt.WAITING_TRACK:t=this.tracks[this.trackId],t&&t.details&&(this.state=Bt.IDLE);break;case Bt.FRAG_LOADING_WAITING_RETRY:var j=performance.now(),A=this.retryDate;a=this.media;var x=a&&a.seeking;(!A||j>=A||x)&&(Ae.b.log("audioStreamController: retryDate reached, switch back to IDLE state"),this.state=Bt.IDLE);break;case Bt.WAITING_INIT_PTS:var O=this.videoTrackCC;if(void 0===this.initPTS[O])break;var P=this.waitingFragment;if(P){var L=P.frag.cc;O!==L?(t=this.tracks[this.trackId],t.details&&t.details.live&&(Ae.b.warn("Waiting fragment CC ("+L+") does not match video track CC ("+O+")"),this.waitingFragment=null,this.state=Bt.IDLE)):(this.state=Bt.FRAG_LOADING,this.onFragLoaded(this.waitingFragment),this.waitingFragment=null)}else this.state=Bt.IDLE;break;case Bt.STOPPED:case Bt.FRAG_LOADING:case Bt.PARSING:case Bt.PARSED:case Bt.ENDED:}},t.prototype.onMediaAttached=function(e){var t=this.media=this.mediaBuffer=e.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvended=this.onMediaEnded.bind(this),t.addEventListener("seeking",this.onvseeking),t.addEventListener("ended",this.onvended);var r=this.config;this.tracks&&r.autoStartLoad&&this.startLoad(r.startPosition)},t.prototype.onMediaDetaching=function(){var e=this.media;e&&e.ended&&(Ae.b.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0);var t=this.tracks;t&&t.forEach(function(e){e.details&&e.details.fragments.forEach(function(e){e.loadCounter=void 0})}),e&&(e.removeEventListener("seeking",this.onvseeking),e.removeEventListener("ended",this.onvended),this.onvseeking=this.onvseeked=this.onvended=null),this.media=this.mediaBuffer=this.videoBuffer=null,this.loadedmetadata=!1,this.stopLoad()},t.prototype.onMediaSeeking=function(){this.state===Bt.ENDED&&(this.state=Bt.IDLE),this.media&&(this.lastCurrentTime=this.media.currentTime),void 0!==this.fragLoadIdx&&(this.fragLoadIdx+=2*this.config.fragLoadingLoopThreshold),this.tick()},t.prototype.onMediaEnded=function(){this.startPosition=this.lastCurrentTime=0},t.prototype.onAudioTracksUpdated=function(e){Ae.b.log("audio tracks updated"),this.tracks=e.audioTracks},t.prototype.onAudioTrackSwitching=function(e){var t=!!e.url;this.trackId=e.id,this.fragCurrent=null,this.state=Bt.PAUSED,this.waitingFragment=null,t?this.timer||(this.timer=setInterval(this.ontick,100)):this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),t&&(this.audioSwitch=!0,this.state=Bt.IDLE,void 0!==this.fragLoadIdx&&(this.fragLoadIdx+=2*this.config.fragLoadingLoopThreshold)),this.tick()},t.prototype.onAudioTrackLoaded=function(e){var t=e.details,r=e.id,n=this.tracks[r],o=t.totalduration,i=0;if(Ae.b.log("track "+r+" loaded ["+t.startSN+","+t.endSN+"],duration:"+o),t.live){var a=n.details;a&&t.fragments.length>0?(b(a,t),i=t.fragments[0].start,t.PTSKnown?Ae.b.log("live audio playlist sliding:"+i.toFixed(3)):Ae.b.log("live audio playlist - outdated PTS, unknown sliding")):(t.PTSKnown=!1,Ae.b.log("live audio playlist - first load, unknown sliding"))}else t.PTSKnown=!1;if(n.details=t,!this.startFragRequested){if(-1===this.startPosition){var s=t.startTimeOffset;isNaN(s)?this.startPosition=0:(Ae.b.log("start time offset found in playlist, adjust startPosition to "+s),this.startPosition=s)}this.nextLoadPosition=this.startPosition}this.state===Bt.WAITING_TRACK&&(this.state=Bt.IDLE),this.tick()},t.prototype.onKeyLoaded=function(){this.state===Bt.KEY_LOADING&&(this.state=Bt.IDLE,this.tick())},t.prototype.onFragLoaded=function(e){var t=this.fragCurrent,r=e.frag;if(this.state===Bt.FRAG_LOADING&&t&&"audio"===r.type&&r.level===t.level&&r.sn===t.sn){var n=this.tracks[this.trackId],o=n.details,i=o.totalduration,a=t.level,s=t.sn,l=t.cc,u=this.config.defaultAudioCodec||n.audioCodec||"mp4a.40.2",c=this.stats=e.stats;if("initSegment"===s)this.state=Bt.IDLE,c.tparsed=c.tbuffered=performance.now(),o.initSegment.data=e.payload,this.hls.trigger(ke.a.FRAG_BUFFERED,{stats:c,frag:t,id:"audio"}),this.tick();else{this.state=Bt.PARSING,this.appended=!1,this.demuxer||(this.demuxer=new st(this.hls,"audio"));var d=this.initPTS[l],f=o.initSegment?o.initSegment.data:[];if(o.initSegment||void 0!==d){this.pendingBuffering=!0,Ae.b.log("Demuxing "+s+" of ["+o.startSN+" ,"+o.endSN+"],track "+a);this.demuxer.push(e.payload,f,u,null,t,i,!1,d)}else Ae.b.log("unknown video PTS for continuity counter "+l+", waiting for video PTS before demuxing audio frag "+s+" of ["+o.startSN+" ,"+o.endSN+"],track "+a),this.waitingFragment=e,this.state=Bt.WAITING_INIT_PTS}}this.fragLoadError=0},t.prototype.onFragParsingInitSegment=function(e){var t=this.fragCurrent,r=e.frag;if(t&&"audio"===e.id&&r.sn===t.sn&&r.level===t.level&&this.state===Bt.PARSING){var n=e.tracks,o=void 0;if(n.video&&delete n.video,o=n.audio){o.levelCodec=o.codec,o.id=e.id,this.hls.trigger(ke.a.BUFFER_CODECS,n),Ae.b.log("audio track:audio,container:"+o.container+",codecs[level/parsed]=["+o.levelCodec+"/"+o.codec+"]");var i=o.initSegment;if(i){var a={type:"audio",data:i,parent:"audio",content:"initSegment"};this.audioSwitch?this.pendingData=[a]:(this.appended=!0,this.pendingBuffering=!0,this.hls.trigger(ke.a.BUFFER_APPENDING,a))}this.tick()}}},t.prototype.onFragParsingData=function(e){var t=this,r=this.fragCurrent,n=e.frag;if(r&&"audio"===e.id&&"audio"===e.type&&n.sn===r.sn&&n.level===r.level&&this.state===Bt.PARSING){var o=this.trackId,i=this.tracks[o],a=this.hls;isNaN(e.endPTS)&&(e.endPTS=e.startPTS+r.duration,e.endDTS=e.startDTS+r.duration),Ae.b.log("parsed "+e.type+",PTS:["+e.startPTS.toFixed(3)+","+e.endPTS.toFixed(3)+"],DTS:["+e.startDTS.toFixed(3)+"/"+e.endDTS.toFixed(3)+"],nb:"+e.nb),v(i.details,r,e.startPTS,e.endPTS);var s=this.audioSwitch,l=this.media,u=!1;if(s&&l)if(l.readyState){var c=l.currentTime;Ae.b.log("switching audio track : currentTime:"+c),c>=e.startPTS&&(Ae.b.log("switching audio track : flushing all audio"),this.state=Bt.BUFFER_FLUSHING,a.trigger(ke.a.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"}),u=!0,this.audioSwitch=!1,a.trigger(ke.a.AUDIO_TRACK_SWITCHED,{id:o}))}else this.audioSwitch=!1,a.trigger(ke.a.AUDIO_TRACK_SWITCHED,{id:o});var d=this.pendingData;this.audioSwitch||([e.data1,e.data2].forEach(function(t){t&&t.length&&d.push({type:e.type,data:t,parent:"audio",content:"data"})}),!u&&d.length&&(d.forEach(function(e){t.state===Bt.PARSING&&(t.pendingBuffering=!0,t.hls.trigger(ke.a.BUFFER_APPENDING,e))}),this.pendingData=[],this.appended=!0)),this.tick()}},t.prototype.onFragParsed=function(e){var t=this.fragCurrent,r=e.frag;t&&"audio"===e.id&&r.sn===t.sn&&r.level===t.level&&this.state===Bt.PARSING&&(this.stats.tparsed=performance.now(),this.state=Bt.PARSED,this._checkAppendedParsed())},t.prototype.onBufferCreated=function(e){var t=e.tracks.audio;t&&(this.mediaBuffer=t.buffer,this.loadedmetadata=!0),e.tracks.video&&(this.videoBuffer=e.tracks.video.buffer)},t.prototype.onBufferAppended=function(e){if("audio"===e.parent){var t=this.state;t!==Bt.PARSING&&t!==Bt.PARSED||(this.pendingBuffering=e.pending>0,this._checkAppendedParsed())}},t.prototype._checkAppendedParsed=function(){if(!(this.state!==Bt.PARSED||this.appended&&this.pendingBuffering)){var e=this.fragCurrent,t=this.stats,r=this.hls;if(e){this.fragPrevious=e,t.tbuffered=performance.now(),r.trigger(ke.a.FRAG_BUFFERED,{stats:t,frag:e,id:"audio"});var n=this.mediaBuffer?this.mediaBuffer:this.media;Ae.b.log("audio buffered : "+ut.toString(n.buffered)),this.audioSwitch&&this.appended&&(this.audioSwitch=!1,r.trigger(ke.a.AUDIO_TRACK_SWITCHED,{id:this.trackId})),this.state=Bt.IDLE}this.tick()}},t.prototype.onError=function(e){var t=e.frag;if(!t||"audio"===t.type)switch(e.details){case je.a.FRAG_LOAD_ERROR:case je.a.FRAG_LOAD_TIMEOUT:if(!e.fatal){var r=this.fragLoadError;r?r++:r=1;var n=this.config;if(r<=n.fragLoadingMaxRetry){this.fragLoadError=r,t.loadCounter=0;var o=Math.min(Math.pow(2,r-1)*n.fragLoadingRetryDelay,n.fragLoadingMaxRetryTimeout);Ae.b.warn("audioStreamController: frag loading failed, retry in "+o+" ms"),this.retryDate=performance.now()+o,this.state=Bt.FRAG_LOADING_WAITING_RETRY}else Ae.b.error("audioStreamController: "+e.details+" reaches max retry, redispatch as fatal ..."),e.fatal=!0,this.state=Bt.ERROR}break;case je.a.FRAG_LOOP_LOADING_ERROR:case je.a.AUDIO_TRACK_LOAD_ERROR:case je.a.AUDIO_TRACK_LOAD_TIMEOUT:case je.a.KEY_LOAD_ERROR:case je.a.KEY_LOAD_TIMEOUT:this.state!==Bt.ERROR&&(this.state=e.fatal?Bt.ERROR:Bt.IDLE,Ae.b.warn("audioStreamController: "+e.details+" while loading frag,switch to "+this.state+" state ..."));break;case je.a.BUFFER_FULL_ERROR:if("audio"===e.parent&&(this.state===Bt.PARSING||this.state===Bt.PARSED)){var i=this.mediaBuffer,a=this.media.currentTime;if(i&&et.isBuffered(i,a)&&et.isBuffered(i,a+.5)){var s=this.config;s.maxMaxBufferLength>=s.maxBufferLength&&(s.maxMaxBufferLength/=2,Ae.b.warn("audio:reduce max buffer length to "+s.maxMaxBufferLength+"s"),this.fragLoadIdx+=2*s.fragLoadingLoopThreshold),this.state=Bt.IDLE}else Ae.b.warn("buffer full error also media.currentTime is not buffered, flush audio buffer"),this.fragCurrent=null,this.state=Bt.BUFFER_FLUSHING,this.hls.trigger(ke.a.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"})}}},t.prototype.onBufferFlushed=function(){var e=this,t=this.pendingData;t&&t.length?(Ae.b.log("appending pending audio data on Buffer Flushed"),t.forEach(function(t){e.hls.trigger(ke.a.BUFFER_APPENDING,t)}),this.appended=!0,this.pendingData=[],this.state=Bt.PARSED):(this.state=Bt.IDLE,this.fragPrevious=null,this.tick())},Ut(t,[{key:"state",set:function(e){if(this.state!==e){var t=this.state;this._state=e,Ae.b.log("audio stream:"+t+"->"+e)}},get:function(){return this._state}}]),t}(Pe),Ht=Gt,Wt=function(){function e(e){return"string"==typeof e&&(!!i[e.toLowerCase()]&&e.toLowerCase())}function t(e){return"string"==typeof e&&(!!a[e.toLowerCase()]&&e.toLowerCase())}function r(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)e[n]=r[n]}return e}function n(n,i,a){var s=this,l=function(){if("undefined"!=typeof navigator)return/MSIE\s8\.0/.test(navigator.userAgent)}(),u={};l?s=document.createElement("custom"):u.enumerable=!0,s.hasBeenReset=!1;var c="",d=!1,f=n,p=i,h=a,m=null,y="",g=!0,v="auto",b="start",_=50,E="middle",T=50,w="middle";if(Object.defineProperty(s,"id",r({},u,{get:function(){return c},set:function(e){c=""+e}})),Object.defineProperty(s,"pauseOnExit",r({},u,{get:function(){return d},set:function(e){d=!!e}})),Object.defineProperty(s,"startTime",r({},u,{get:function(){return f},set:function(e){if("number"!=typeof e)throw new TypeError("Start time must be set to a number.");f=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"endTime",r({},u,{get:function(){return p},set:function(e){if("number"!=typeof e)throw new TypeError("End time must be set to a number.");p=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"text",r({},u,{get:function(){return h},set:function(e){h=""+e,this.hasBeenReset=!0}})),Object.defineProperty(s,"region",r({},u,{get:function(){return m},set:function(e){m=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"vertical",r({},u,{get:function(){return y},set:function(t){var r=e(t);if(!1===r)throw new SyntaxError("An invalid or illegal string was specified.");y=r,this.hasBeenReset=!0}})),Object.defineProperty(s,"snapToLines",r({},u,{get:function(){return g},set:function(e){g=!!e,this.hasBeenReset=!0}})),Object.defineProperty(s,"line",r({},u,{get:function(){return v},set:function(e){if("number"!=typeof e&&e!==o)throw new SyntaxError("An invalid number or illegal string was specified.");v=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"lineAlign",r({},u,{get:function(){return b},set:function(e){var r=t(e);if(!r)throw new SyntaxError("An invalid or illegal string was specified.");b=r,this.hasBeenReset=!0}})),Object.defineProperty(s,"position",r({},u,{get:function(){return _},set:function(e){if(e<0||e>100)throw new Error("Position must be between 0 and 100.");_=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"positionAlign",r({},u,{get:function(){return E},set:function(e){var r=t(e);if(!r)throw new SyntaxError("An invalid or illegal string was specified.");E=r,this.hasBeenReset=!0}})),Object.defineProperty(s,"size",r({},u,{get:function(){return T},set:function(e){if(e<0||e>100)throw new Error("Size must be between 0 and 100.");T=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"align",r({},u,{get:function(){return w},set:function(e){var r=t(e);if(!r)throw new SyntaxError("An invalid or illegal string was specified.");w=r,this.hasBeenReset=!0}})),s.displayState=void 0,l)return s}if("undefined"!=typeof window&&window.VTTCue)return window.VTTCue;var o="auto",i={"":!0,lr:!0,rl:!0},a={start:!0,middle:!0,end:!0,left:!0,right:!0};return n.prototype.getCueAsHTML=function(){return window.WebVTT.convertCueToDOMTree(window,this.text)},n}(),Vt=function(){return{decode:function(e){if(!e)return"";if("string"!=typeof e)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(e))}}};oe.prototype={set:function(e,t){this.get(e)||""===t||(this.values[e]=t)},get:function(e,t,r){return r?this.has(e)?this.values[e]:t[r]:this.has(e)?this.values[e]:t},has:function(e){return e in this.values},alt:function(e,t,r){for(var n=0;n<r.length;++n)if(t===r[n]){this.set(e,t);break}},integer:function(e,t){/^-?\d+$/.test(t)&&this.set(e,parseInt(t,10))},percent:function(e,t){return!!(t.match(/^([\d]{1,3})(\.[\d]*)?%$/)&&(t=parseFloat(t))>=0&&t<=100)&&(this.set(e,t),!0)}};var Kt=new Wt(0,0,0),zt="middle"===Kt.align?"middle":"center";re.prototype={parse:function(e){function t(){var e=r.buffer,t=0;for(e=se(e);t<e.length&&"\r"!==e[t]&&"\n"!==e[t];)++t;var n=e.substr(0,t);return"\r"===e[t]&&++t,"\n"===e[t]&&++t,r.buffer=e.substr(t),n}var r=this;e&&(r.buffer+=r.decoder.decode(e,{stream:!0}));try{var n;if("INITIAL"===r.state){if(!/\r\n|\n/.test(r.buffer))return this;n=t();var o=n.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);if(!o||!o[0])throw new Error("Malformed WebVTT signature.");r.state="HEADER"}for(var i=!1;r.buffer;){if(!/\r\n|\n/.test(r.buffer))return this;switch(i?i=!1:n=t(),r.state){case"HEADER":/:/.test(n)?function(e){ie(e,function(e,t){switch(e){case"Region":console.log("parse region",t)}},/:/)}(n):n||(r.state="ID");continue;case"NOTE":n||(r.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(n)){r.state="NOTE";break}if(!n)continue;if(r.cue=new Wt(0,0,""),r.state="CUE",-1===n.indexOf("--\x3e")){r.cue.id=n;continue}case"CUE":try{ae(n,r.cue,r.regionList)}catch(e){r.cue=null,r.state="BADCUE";continue}r.state="CUETEXT";continue;case"CUETEXT":var a=-1!==n.indexOf("--\x3e");if(!n||a&&(i=!0)){r.oncue&&r.oncue(r.cue),r.cue=null,r.state="ID";continue}r.cue.text&&(r.cue.text+="\n"),r.cue.text+=n;continue;case"BADCUE":n||(r.state="ID");continue}}}catch(e){"CUETEXT"===r.state&&r.cue&&r.oncue&&r.oncue(r.cue),r.cue=null,r.state="INITIAL"===r.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){var e=this;try{if(e.buffer+=e.decoder.decode(),(e.cue||"HEADER"===e.state)&&(e.buffer+="\n\n",e.parse()),"INITIAL"===e.state)throw new Error("Malformed WebVTT signature.")}catch(e){throw e}return e.onflush&&e.onflush(),this}};var qt=re,Yt={42:225,92:233,94:237,95:243,96:250,123:231,124:247,125:209,126:241,127:9608,128:174,129:176,130:189,131:191,132:8482,133:162,134:163,135:9834,136:224,137:32,138:232,139:226,140:234,141:238,142:244,143:251,144:193,145:201,146:211,147:218,148:220,149:252,150:8216,151:161,152:42,153:8217,154:9473,155:169,156:8480,157:8226,158:8220,159:8221,160:192,161:194,162:199,163:200,164:202,165:203,166:235,167:206,168:207,169:239,170:212,171:217,172:249,173:219,174:171,175:187,176:195,177:227,178:205,179:204,180:236,181:210,182:242,183:213,184:245,185:123,186:125,187:92,188:94,189:95,190:124,191:8764,192:196,193:228,194:214,195:246,196:223,197:165,198:164,199:9475,200:197,201:229,202:216,203:248,204:9487,205:9491,206:9495,207:9499},Xt=function(e){var t=e;return Yt.hasOwnProperty(e)&&(t=Yt[e]),String.fromCharCode(t)},Qt=15,$t=100,Jt={17:1,18:3,21:5,22:7,23:9,16:11,19:12,20:14},Zt={17:2,18:4,21:6,22:8,23:10,19:13,20:15},er={25:1,26:3,29:5,30:7,31:9,24:11,27:12,28:14},tr={25:2,26:4,29:6,30:8,31:10,27:13,28:15},rr=["white","green","blue","cyan","red","yellow","magenta","black","transparent"],nr={verboseFilter:{DATA:3,DEBUG:3,INFO:2,WARNING:2,TEXT:1,ERROR:0},time:null,verboseLevel:0,setTime:function(e){this.time=e},log:function(e,t){var r=this.verboseFilter[e];this.verboseLevel>=r&&console.log(this.time+" ["+e+"] "+t)}},or=function(e){for(var t=[],r=0;r<e.length;r++)t.push(e[r].toString(16));return t},ir=function(){function e(t,r,n,o,i){ue(this,e),this.foreground=t||"white",this.underline=r||!1,this.italics=n||!1,this.background=o||"black",this.flash=i||!1}return e.prototype.reset=function(){this.foreground="white",this.underline=!1,this.italics=!1,this.background="black",this.flash=!1},e.prototype.setStyles=function(e){for(var t=["foreground","underline","italics","background","flash"],r=0;r<t.length;r++){var n=t[r];e.hasOwnProperty(n)&&(this[n]=e[n])}},e.prototype.isDefault=function(){return"white"===this.foreground&&!this.underline&&!this.italics&&"black"===this.background&&!this.flash},e.prototype.equals=function(e){return this.foreground===e.foreground&&this.underline===e.underline&&this.italics===e.italics&&this.background===e.background&&this.flash===e.flash},e.prototype.copy=function(e){this.foreground=e.foreground,this.underline=e.underline,this.italics=e.italics,this.background=e.background,this.flash=e.flash},e.prototype.toString=function(){return"color="+this.foreground+", underline="+this.underline+", italics="+this.italics+", background="+this.background+", flash="+this.flash},e}(),ar=function(){function e(t,r,n,o,i,a){ue(this,e),this.uchar=t||" ",this.penState=new ir(r,n,o,i,a)}return e.prototype.reset=function(){this.uchar=" ",this.penState.reset()},e.prototype.setChar=function(e,t){this.uchar=e,this.penState.copy(t)},e.prototype.setPenState=function(e){this.penState.copy(e)},e.prototype.equals=function(e){return this.uchar===e.uchar&&this.penState.equals(e.penState)},e.prototype.copy=function(e){this.uchar=e.uchar,this.penState.copy(e.penState)},e.prototype.isEmpty=function(){return" "===this.uchar&&this.penState.isDefault()},e}(),sr=function(){function e(){ue(this,e),this.chars=[];for(var t=0;t<$t;t++)this.chars.push(new ar);this.pos=0,this.currPenState=new ir}return e.prototype.equals=function(e){for(var t=!0,r=0;r<$t;r++)if(!this.chars[r].equals(e.chars[r])){t=!1;break}return t},e.prototype.copy=function(e){for(var t=0;t<$t;t++)this.chars[t].copy(e.chars[t])},e.prototype.isEmpty=function(){for(var e=!0,t=0;t<$t;t++)if(!this.chars[t].isEmpty()){e=!1;break}return e},e.prototype.setCursor=function(e){this.pos!==e&&(this.pos=e),this.pos<0?(nr.log("ERROR","Negative cursor position "+this.pos),this.pos=0):this.pos>$t&&(nr.log("ERROR","Too large cursor position "+this.pos),this.pos=$t)},e.prototype.moveCursor=function(e){var t=this.pos+e;if(e>1)for(var r=this.pos+1;r<t+1;r++)this.chars[r].setPenState(this.currPenState);this.setCursor(t)},e.prototype.backSpace=function(){this.moveCursor(-1),this.chars[this.pos].setChar(" ",this.currPenState)},e.prototype.insertChar=function(e){e>=144&&this.backSpace();var t=Xt(e);if(this.pos>=$t)return void nr.log("ERROR","Cannot insert "+e.toString(16)+" ("+t+") at position "+this.pos+". Skipping it!");this.chars[this.pos].setChar(t,this.currPenState),this.moveCursor(1)},e.prototype.clearFromPos=function(e){var t;for(t=e;t<$t;t++)this.chars[t].reset()},e.prototype.clear=function(){this.clearFromPos(0),this.pos=0,this.currPenState.reset()},e.prototype.clearToEndOfRow=function(){this.clearFromPos(this.pos)},e.prototype.getTextString=function(){for(var e=[],t=!0,r=0;r<$t;r++){var n=this.chars[r].uchar;" "!==n&&(t=!1),e.push(n)}return t?"":e.join("")},e.prototype.setPenStyles=function(e){this.currPenState.setStyles(e),this.chars[this.pos].setPenState(this.currPenState)},e}(),lr=function(){function e(){ue(this,e),this.rows=[];for(var t=0;t<Qt;t++)this.rows.push(new sr);this.currRow=Qt-1,this.nrRollUpRows=null,this.reset()}return e.prototype.reset=function(){for(var e=0;e<Qt;e++)this.rows[e].clear();this.currRow=Qt-1},e.prototype.equals=function(e){for(var t=!0,r=0;r<Qt;r++)if(!this.rows[r].equals(e.rows[r])){t=!1;break}return t},e.prototype.copy=function(e){for(var t=0;t<Qt;t++)this.rows[t].copy(e.rows[t])},e.prototype.isEmpty=function(){for(var e=!0,t=0;t<Qt;t++)if(!this.rows[t].isEmpty()){e=!1;break}return e},e.prototype.backSpace=function(){this.rows[this.currRow].backSpace()},e.prototype.clearToEndOfRow=function(){this.rows[this.currRow].clearToEndOfRow()},e.prototype.insertChar=function(e){this.rows[this.currRow].insertChar(e)},e.prototype.setPen=function(e){this.rows[this.currRow].setPenStyles(e)},e.prototype.moveCursor=function(e){this.rows[this.currRow].moveCursor(e)},e.prototype.setCursor=function(e){nr.log("INFO","setCursor: "+e),this.rows[this.currRow].setCursor(e)},e.prototype.setPAC=function(e){nr.log("INFO","pacData = "+JSON.stringify(e));var t=e.row-1;if(this.nrRollUpRows&&t<this.nrRollUpRows-1&&(t=this.nrRollUpRows-1),this.nrRollUpRows&&this.currRow!==t){for(var r=0;r<Qt;r++)this.rows[r].clear();var n=this.currRow+1-this.nrRollUpRows,o=this.lastOutputScreen;if(o){var i=o.rows[n].cueStartTime;if(i&&i<nr.time)for(var a=0;a<this.nrRollUpRows;a++)this.rows[t-this.nrRollUpRows+a+1].copy(o.rows[n+a])}}this.currRow=t;var s=this.rows[this.currRow];if(null!==e.indent){var l=e.indent,u=Math.max(l-1,0);s.setCursor(e.indent),e.color=s.chars[u].penState.foreground}var c={foreground:e.color,underline:e.underline,italics:e.italics,background:"black",flash:!1};this.setPen(c)},e.prototype.setBkgData=function(e){nr.log("INFO","bkgData = "+JSON.stringify(e)),this.backSpace(),this.setPen(e),this.insertChar(32)},e.prototype.setRollUpRows=function(e){this.nrRollUpRows=e},e.prototype.rollUp=function(){if(null===this.nrRollUpRows)return void nr.log("DEBUG","roll_up but nrRollUpRows not set yet");nr.log("TEXT",this.getDisplayText());var e=this.currRow+1-this.nrRollUpRows,t=this.rows.splice(e,1)[0];t.clear(),this.rows.splice(this.currRow,0,t),nr.log("INFO","Rolling up")},e.prototype.getDisplayText=function(e){e=e||!1;for(var t=[],r="",n=-1,o=0;o<Qt;o++){var i=this.rows[o].getTextString();i&&(n=o+1,e?t.push("Row "+n+": '"+i+"'"):t.push(i.trim()))}return t.length>0&&(r=e?"["+t.join(" | ")+"]":t.join("\n")),r},e.prototype.getTextAndFormat=function(){return this.rows},e}(),ur=function(){function e(t,r){ue(this,e),this.chNr=t,this.outputFilter=r,this.mode=null,this.verbose=0,this.displayedMemory=new lr,this.nonDisplayedMemory=new lr,this.lastOutputScreen=new lr,this.currRollUpRow=this.displayedMemory.rows[Qt-1],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null}return e.prototype.reset=function(){this.mode=null,this.displayedMemory.reset(),this.nonDisplayedMemory.reset(),this.lastOutputScreen.reset(),this.currRollUpRow=this.displayedMemory.rows[Qt-1],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null,this.lastCueEndTime=null},e.prototype.getHandler=function(){return this.outputFilter},e.prototype.setHandler=function(e){this.outputFilter=e},e.prototype.setPAC=function(e){this.writeScreen.setPAC(e)},e.prototype.setBkgData=function(e){this.writeScreen.setBkgData(e)},e.prototype.setMode=function(e){e!==this.mode&&(this.mode=e,nr.log("INFO","MODE="+e),"MODE_POP-ON"===this.mode?this.writeScreen=this.nonDisplayedMemory:(this.writeScreen=this.displayedMemory,this.writeScreen.reset()),"MODE_ROLL-UP"!==this.mode&&(this.displayedMemory.nrRollUpRows=null,this.nonDisplayedMemory.nrRollUpRows=null),this.mode=e)},e.prototype.insertChars=function(e){for(var t=0;t<e.length;t++)this.writeScreen.insertChar(e[t]);var r=this.writeScreen===this.displayedMemory?"DISP":"NON_DISP";nr.log("INFO",r+": "+this.writeScreen.getDisplayText(!0)),"MODE_PAINT-ON"!==this.mode&&"MODE_ROLL-UP"!==this.mode||(nr.log("TEXT","DISPLAYED: "+this.displayedMemory.getDisplayText(!0)),this.outputDataUpdate())},e.prototype.ccRCL=function(){nr.log("INFO","RCL - Resume Caption Loading"),this.setMode("MODE_POP-ON")},e.prototype.ccBS=function(){nr.log("INFO","BS - BackSpace"),"MODE_TEXT"!==this.mode&&(this.writeScreen.backSpace(),this.writeScreen===this.displayedMemory&&this.outputDataUpdate())},e.prototype.ccAOF=function(){},e.prototype.ccAON=function(){},e.prototype.ccDER=function(){nr.log("INFO","DER- Delete to End of Row"),this.writeScreen.clearToEndOfRow(),this.outputDataUpdate()},e.prototype.ccRU=function(e){nr.log("INFO","RU("+e+") - Roll Up"),this.writeScreen=this.displayedMemory,this.setMode("MODE_ROLL-UP"),this.writeScreen.setRollUpRows(e)},e.prototype.ccFON=function(){nr.log("INFO","FON - Flash On"),this.writeScreen.setPen({flash:!0})},e.prototype.ccRDC=function(){nr.log("INFO","RDC - Resume Direct Captioning"),this.setMode("MODE_PAINT-ON")},e.prototype.ccTR=function(){nr.log("INFO","TR"),this.setMode("MODE_TEXT")},e.prototype.ccRTD=function(){nr.log("INFO","RTD"),this.setMode("MODE_TEXT")},e.prototype.ccEDM=function(){nr.log("INFO","EDM - Erase Displayed Memory"),this.displayedMemory.reset(),this.outputDataUpdate()},e.prototype.ccCR=function(){nr.log("CR - Carriage Return"),this.writeScreen.rollUp(),this.outputDataUpdate()},e.prototype.ccENM=function(){nr.log("INFO","ENM - Erase Non-displayed Memory"),this.nonDisplayedMemory.reset()},e.prototype.ccEOC=function(){if(nr.log("INFO","EOC - End Of Caption"),"MODE_POP-ON"===this.mode){var e=this.displayedMemory;this.displayedMemory=this.nonDisplayedMemory,this.nonDisplayedMemory=e,this.writeScreen=this.nonDisplayedMemory,nr.log("TEXT","DISP: "+this.displayedMemory.getDisplayText())}this.outputDataUpdate()},e.prototype.ccTO=function(e){nr.log("INFO","TO("+e+") - Tab Offset"),this.writeScreen.moveCursor(e)},e.prototype.ccMIDROW=function(e){var t={flash:!1};if(t.underline=e%2==1,t.italics=e>=46,t.italics)t.foreground="white";else{var r=Math.floor(e/2)-16,n=["white","green","blue","cyan","red","yellow","magenta"];t.foreground=n[r]}nr.log("INFO","MIDROW: "+JSON.stringify(t)),this.writeScreen.setPen(t)},e.prototype.outputDataUpdate=function(){var e=nr.time;null!==e&&this.outputFilter&&(this.outputFilter.updateData&&this.outputFilter.updateData(e,this.displayedMemory),null!==this.cueStartTime||this.displayedMemory.isEmpty()?this.displayedMemory.equals(this.lastOutputScreen)||(this.outputFilter.newCue&&this.outputFilter.newCue(this.cueStartTime,e,this.lastOutputScreen),this.cueStartTime=this.displayedMemory.isEmpty()?null:e):this.cueStartTime=e,this.lastOutputScreen.copy(this.displayedMemory))},e.prototype.cueSplitAtTime=function(e){this.outputFilter&&(this.displayedMemory.isEmpty()||(this.outputFilter.newCue&&this.outputFilter.newCue(this.cueStartTime,e,this.displayedMemory),this.cueStartTime=e))},e}(),cr=function(){function e(t,r,n){ue(this,e),this.field=t||1,this.outputs=[r,n],this.channels=[new ur(1,r),new ur(2,n)],this.currChNr=-1,this.lastCmdA=null,this.lastCmdB=null,this.bufferedData=[],this.startTime=null,this.lastTime=null,this.dataCounters={padding:0,char:0,cmd:0,other:0}}return e.prototype.getHandler=function(e){return this.channels[e].getHandler()},e.prototype.setHandler=function(e,t){this.channels[e].setHandler(t)},e.prototype.addData=function(e,t){var r,n,o,i=!1;this.lastTime=e,nr.setTime(e);for(var a=0;a<t.length;a+=2)if(n=127&t[a],o=127&t[a+1],0!==n||0!==o){if(nr.log("DATA","["+or([t[a],t[a+1]])+"] -> ("+or([n,o])+")"),r=this.parseCmd(n,o),r||(r=this.parseMidrow(n,o)),r||(r=this.parsePAC(n,o)),r||(r=this.parseBackgroundAttributes(n,o)),!r&&(i=this.parseChars(n,o)))if(this.currChNr&&this.currChNr>=0){var s=this.channels[this.currChNr-1];s.insertChars(i)}else nr.log("WARNING","No channel found yet. TEXT-MODE?");r?this.dataCounters.cmd+=2:i?this.dataCounters.char+=2:(this.dataCounters.other+=2,nr.log("WARNING","Couldn't parse cleaned data "+or([n,o])+" orig: "+or([t[a],t[a+1]])))}else this.dataCounters.padding+=2},e.prototype.parseCmd=function(e,t){var r=null,n=(20===e||28===e)&&32<=t&&t<=47,o=(23===e||31===e)&&33<=t&&t<=35;if(!n&&!o)return!1;if(e===this.lastCmdA&&t===this.lastCmdB)return this.lastCmdA=null,this.lastCmdB=null,nr.log("DEBUG","Repeated command ("+or([e,t])+") is dropped"),!0;r=20===e||23===e?1:2;var i=this.channels[r-1];return 20===e||28===e?32===t?i.ccRCL():33===t?i.ccBS():34===t?i.ccAOF():35===t?i.ccAON():36===t?i.ccDER():37===t?i.ccRU(2):38===t?i.ccRU(3):39===t?i.ccRU(4):40===t?i.ccFON():41===t?i.ccRDC():42===t?i.ccTR():43===t?i.ccRTD():44===t?i.ccEDM():45===t?i.ccCR():46===t?i.ccENM():47===t&&i.ccEOC():i.ccTO(t-32),this.lastCmdA=e,this.lastCmdB=t,this.currChNr=r,!0},e.prototype.parseMidrow=function(e,t){var r=null;if((17===e||25===e)&&32<=t&&t<=47){if((r=17===e?1:2)!==this.currChNr)return nr.log("ERROR","Mismatch channel in midrow parsing"),!1;return this.channels[r-1].ccMIDROW(t),nr.log("DEBUG","MIDROW ("+or([e,t])+")"),!0}return!1},e.prototype.parsePAC=function(e,t){var r=null,n=null,o=(17<=e&&e<=23||25<=e&&e<=31)&&64<=t&&t<=127,i=(16===e||24===e)&&64<=t&&t<=95;if(!o&&!i)return!1;if(e===this.lastCmdA&&t===this.lastCmdB)return this.lastCmdA=null,this.lastCmdB=null,!0;r=e<=23?1:2,n=64<=t&&t<=95?1===r?Jt[e]:er[e]:1===r?Zt[e]:tr[e];var a=this.interpretPAC(n,t);return this.channels[r-1].setPAC(a),this.lastCmdA=e,this.lastCmdB=t,this.currChNr=r,!0},e.prototype.interpretPAC=function(e,t){var r=t,n={color:null,italics:!1,indent:null,underline:!1,row:e};return r=t>95?t-96:t-64,n.underline=1==(1&r),r<=13?n.color=["white","green","blue","cyan","red","yellow","magenta","white"][Math.floor(r/2)]:r<=15?(n.italics=!0,n.color="white"):n.indent=4*Math.floor((r-16)/2),n},e.prototype.parseChars=function(e,t){var r=null,n=null,o=null;if(e>=25?(r=2,o=e-8):(r=1,o=e),17<=o&&o<=19){var i=t;i=17===o?t+80:18===o?t+112:t+144,nr.log("INFO","Special char '"+Xt(i)+"' in channel "+r),n=[i]}else 32<=e&&e<=127&&(n=0===t?[e]:[e,t]);if(n){var a=or(n);nr.log("DEBUG","Char codes =  "+a.join(",")),this.lastCmdA=null,this.lastCmdB=null}return n},e.prototype.parseBackgroundAttributes=function(e,t){var r,n,o,i,a=(16===e||24===e)&&32<=t&&t<=47,s=(23===e||31===e)&&45<=t&&t<=47;return!(!a&&!s)&&(r={},16===e||24===e?(n=Math.floor((t-32)/2),r.background=rr[n],t%2==1&&(r.background=r.background+"_semi")):45===t?r.background="transparent":(r.foreground="black",47===t&&(r.underline=!0)),o=e<24?1:2,i=this.channels[o-1],i.setBkgData(r),this.lastCmdA=null,this.lastCmdB=null,!0)},e.prototype.reset=function(){for(var e=0;e<this.channels.length;e++)this.channels[e]&&this.channels[e].reset();this.lastCmdA=null,this.lastCmdB=null},e.prototype.cueSplitAtTime=function(e){for(var t=0;t<this.channels.length;t++)this.channels[t]&&this.channels[t].cueSplitAtTime(e)},e}(),dr=cr,fr=function(e,t,r){return e.substr(r||0,t.length)===t},pr=function(e){var t=parseInt(e.substr(-3)),r=parseInt(e.substr(-6,2)),n=parseInt(e.substr(-9,2)),o=e.length>9?parseInt(e.substr(0,e.indexOf(":"))):0;return isNaN(t)||isNaN(r)||isNaN(n)||isNaN(o)?-1:(t+=1e3*r,t+=6e4*n,t+=36e5*o)},hr=function(e){for(var t=5381,r=e.length;r;)t=33*t^e.charCodeAt(--r);return(t>>>0).toString()},mr=function(e,t,r){var n=e[t],o=e[n.prevCC];if(!o||!o.new&&n.new)return e.ccOffset=e.presentationOffset=n.start,void(n.new=!1);for(;o&&o.new;)e.ccOffset+=n.start-o.start,n.new=!1,n=o,o=e[n.prevCC];e.presentationOffset=r},yr={parse:function(e,t,r,n,o,i){var a=/\r\n|\n\r|\n|\r/g,s=String.fromCharCode.apply(null,new Uint8Array(e)).trim().replace(a,"\n").split("\n"),l="00:00.000",u=0,c=0,d=0,f=[],p=void 0,h=!0,m=new qt;m.oncue=function(e){var t=r[n],o=r.ccOffset;t&&t.new&&(void 0!==c?o=r.ccOffset=t.start:mr(r,n,d)),d&&(o=d+r.ccOffset-r.presentationOffset),e.startTime+=o-c,e.endTime+=o-c,e.id=hr(e.startTime)+hr(e.endTime)+hr(e.text),e.text=decodeURIComponent(escape(e.text)),e.endTime>0&&f.push(e)},m.onparsingerror=function(e){p=e},m.onflush=function(){if(p&&i)return void i(p);o(f)},s.forEach(function(e){if(h){if(fr(e,"X-TIMESTAMP-MAP=")){h=!1,e.substr(16).split(",").forEach(function(e){fr(e,"LOCAL:")?l=e.substr(6):fr(e,"MPEGTS:")&&(u=parseInt(e.substr(7)))});try{t=t<0?t+8589934592:t,u-=t,c=pr(l)/1e3,d=u/9e4,-1===c&&(p=new Error("Malformed X-TIMESTAMP-MAP: "+e))}catch(t){p=new Error("Malformed X-TIMESTAMP-MAP: "+e)}return}""===e&&(h=!1)}m.parse(e+"\n")}),m.flush()}},gr=yr,vr=function(e){function t(r){ce(this,t);var n=de(this,e.call(this,r,ke.a.MEDIA_ATTACHING,ke.a.MEDIA_DETACHING,ke.a.FRAG_PARSING_USERDATA,ke.a.MANIFEST_LOADING,ke.a.MANIFEST_LOADED,ke.a.FRAG_LOADED,ke.a.LEVEL_SWITCHING,ke.a.INIT_PTS_FOUND));if(n.hls=r,n.config=r.config,n.enabled=!0,n.Cues=r.config.cueHandler,n.textTracks=[],n.tracks=[],n.unparsedVttFrags=[],n.initPTS=void 0,n.cueRanges=[],n.config.enableCEA708Captions){var o=n,i=function(e,t){var r=null;try{r=new window.Event("addtrack")}catch(e){r=document.createEvent("Event"),r.initEvent("addtrack",!1,!1)}r.track=e,t.dispatchEvent(r)},a={newCue:function(e,t,r){if(!o.textTrack1){var n=o.getExistingTrack("1");if(n)o.textTrack1=n,pe(o.textTrack1),i(o.textTrack1,o.media);else{var a=o.createTextTrack("captions",o.config.captionsTextTrack1Label,o.config.captionsTextTrack1LanguageCode);a&&(a.textTrack1=!0,o.textTrack1=a)}}o.addCues("textTrack1",e,t,r)}},s={newCue:function(e,t,r){if(!o.textTrack2){var n=o.getExistingTrack("2");if(n)o.textTrack2=n,pe(o.textTrack2),i(o.textTrack2,o.media);else{var a=o.createTextTrack("captions",o.config.captionsTextTrack2Label,o.config.captionsTextTrack1LanguageCode);a&&(a.textTrack2=!0,o.textTrack2=a)}}o.addCues("textTrack2",e,t,r)}};n.cea608Parser=new dr(0,a,s)}return n}return fe(t,e),t.prototype.addCues=function(e,t,r,n){for(var o=this.cueRanges,i=!1,a=o.length;a--;){var s=o[a],l=me(s[0],s[1],t,r);if(l>=0&&(s[0]=Math.min(s[0],t),s[1]=Math.max(s[1],r),i=!0,l/(r-t)>.5))return}i||o.push([t,r]),this.Cues.newCue(this[e],t,r,n)},t.prototype.onInitPtsFound=function(e){var t=this;void 0===this.initPTS&&(this.initPTS=e.initPTS),this.unparsedVttFrags.length&&(this.unparsedVttFrags.forEach(function(e){t.onFragLoaded(e)}),this.unparsedVttFrags=[])},t.prototype.getExistingTrack=function(e){var t=this.media;if(t)for(var r=0;r<t.textTracks.length;r++){var n=t.textTracks[r],o="textTrack"+e;if(!0===n[o])return n}return null},t.prototype.createTextTrack=function(e,t,r){var n=this.media;if(n)return n.addTextTrack(e,t,r)},t.prototype.destroy=function(){Pe.prototype.destroy.call(this)},t.prototype.onMediaAttaching=function(e){this.media=e.media},t.prototype.onMediaDetaching=function(){pe(this.textTrack1),pe(this.textTrack2)},t.prototype.onManifestLoading=function(){this.lastSn=-1,this.prevCC=-1,this.vttCCs={ccOffset:0,presentationOffset:0};var e=this.media;if(e){var t=e.textTracks;if(t)for(var r=0;r<t.length;r++)pe(t[r])}},t.prototype.onManifestLoaded=function(e){var t=this;if(this.textTracks=[],this.unparsedVttFrags=this.unparsedVttFrags||[],this.initPTS=void 0,this.cueRanges=[],this.config.enableWebVTT){this.tracks=e.subtitles||[];var r=this.media?this.media.textTracks:[];this.tracks.forEach(function(e,n){var o=void 0;if(n<r.length){var i=r[n];he(i,e)&&(o=i)}o||(o=t.createTextTrack("subtitles",e.name,e.lang)),o.mode=e.default?"showing":"hidden",t.textTracks.push(o)})}},t.prototype.onLevelSwitching=function(){this.enabled="NONE"!==this.hls.currentLevel.closedCaptions},t.prototype.onFragLoaded=function(e){var t=e.frag,r=e.payload;if("main"===t.type){var n=t.sn;if(n!==this.lastSn+1){var o=this.cea608Parser;o&&o.reset()}this.lastSn=n}else if("subtitle"===t.type)if(r.byteLength){if(void 0===this.initPTS)return void this.unparsedVttFrags.push(e);var i=this.vttCCs;i[t.cc]||(i[t.cc]={start:t.start,prevCC:this.prevCC,new:!0},this.prevCC=t.cc);var a=this.textTracks,s=this.hls;gr.parse(r,this.initPTS,i,t.cc,function(e){var r=a[t.trackId];e.forEach(function(e){if(!r.cues.getCueById(e.id))try{r.addCue(e)}catch(n){var t=new window.TextTrackCue(e.startTime,e.endTime,e.text);t.id=e.id,r.addCue(t)}}),s.trigger(ke.a.SUBTITLE_FRAG_PROCESSED,{success:!0,frag:t})},function(e){Ae.b.log("Failed to parse VTT cue: "+e),s.trigger(ke.a.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t})})}else this.hls.trigger(ke.a.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t})},t.prototype.onFragParsingUserdata=function(e){if(this.enabled&&this.config.enableCEA708Captions)for(var t=0;t<e.samples.length;t++){var r=this.extractCea608Data(e.samples[t].bytes);this.cea608Parser.addData(e.samples[t].pts,r)}},t.prototype.extractCea608Data=function(e){for(var t,r,n,o,i,a=31&e[0],s=2,l=[],u=0;u<a;u++)t=e[s++],r=127&e[s++],n=127&e[s++],o=0!=(4&t),i=3&t,0===r&&0===n||o&&0===i&&(l.push(r),l.push(n));return l},t}(Pe),br=vr,_r=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Er=function(e){function t(r){ye(this,t);var n=ge(this,e.call(this,r,ke.a.MEDIA_ATTACHED,ke.a.MEDIA_DETACHING,ke.a.MANIFEST_LOADING,ke.a.MANIFEST_LOADED,ke.a.SUBTITLE_TRACK_LOADED));return n.tracks=[],n.trackId=-1,n.media=void 0,n}return ve(t,e),t.prototype._onTextTracksChanged=function(){if(this.media){for(var e=-1,t=be(this.media.textTracks),r=0;r<t.length;r++)"showing"===t[r].mode&&(e=r);this.subtitleTrack=e}},t.prototype.destroy=function(){Pe.prototype.destroy.call(this)},t.prototype.onMediaAttached=function(e){var t=this;this.media=e.media,this.media&&(this.trackChangeListener=this._onTextTracksChanged.bind(this),this.useTextTrackPolling=!(this.media.textTracks&&"onchange"in this.media.textTracks),this.useTextTrackPolling?this.subtitlePollingInterval=setInterval(function(){t.trackChangeListener()},500):this.media.textTracks.addEventListener("change",this.trackChangeListener))},t.prototype.onMediaDetaching=function(){this.media&&(this.useTextTrackPolling?clearInterval(this.subtitlePollingInterval):this.media.textTracks.removeEventListener("change",this.trackChangeListener),this.media=void 0)},t.prototype.onManifestLoading=function(){this.tracks=[],this.trackId=-1},t.prototype.onManifestLoaded=function(e){var t=this,r=e.subtitles||[],n=!1;this.tracks=r,this.trackId=-1,this.hls.trigger(ke.a.SUBTITLE_TRACKS_UPDATED,{subtitleTracks:r}),r.forEach(function(e){e.default&&(t.subtitleTrack=e.id,n=!0)})},t.prototype.onTick=function(){var e=this.trackId,t=this.tracks[e];if(t){var r=t.details;void 0!==r&&!0!==r.live||(Ae.b.log("(re)loading playlist for subtitle track "+e),this.hls.trigger(ke.a.SUBTITLE_TRACK_LOADING,{url:t.url,id:e}))}},t.prototype.onSubtitleTrackLoaded=function(e){var t=this;e.id<this.tracks.length&&(Ae.b.log("subtitle track "+e.id+" loaded"),this.tracks[e.id].details=e.details,e.details.live&&!this.timer&&(this.timer=setInterval(function(){t.onTick()},1e3*e.details.targetduration,this)),!e.details.live&&this.timer&&(clearInterval(this.timer),this.timer=null))},t.prototype.setSubtitleTrackInternal=function(e){if(e>=0&&e<this.tracks.length){this.timer&&(clearInterval(this.timer),this.timer=null),this.trackId=e,Ae.b.log("switching to subtitle track "+e);var t=this.tracks[e];this.hls.trigger(ke.a.SUBTITLE_TRACK_SWITCH,{id:e});var r=t.details;void 0!==r&&!0!==r.live||(Ae.b.log("(re)loading playlist for subtitle track "+e),this.hls.trigger(ke.a.SUBTITLE_TRACK_LOADING,{url:t.url,id:e}))}},_r(t,[{key:"subtitleTracks",get:function(){return this.tracks}},{key:"subtitleTrack",get:function(){return this.trackId},set:function(e){this.trackId!==e&&this.setSubtitleTrackInternal(e)}}]),t}(Pe),Tr=Er,wr=function(e){function t(r){_e(this,t);var n=Ee(this,e.call(this,r,ke.a.ERROR,ke.a.SUBTITLE_TRACKS_UPDATED,ke.a.SUBTITLE_TRACK_SWITCH,ke.a.SUBTITLE_TRACK_LOADED,ke.a.SUBTITLE_FRAG_PROCESSED));return n.config=r.config,n.vttFragSNsProcessed={},n.vttFragQueues=void 0,n.currentlyProcessing=null,n.currentTrackId=-1,n}return Te(t,e),t.prototype.destroy=function(){Pe.prototype.destroy.call(this)},t.prototype.clearVttFragQueues=function(){var e=this;this.vttFragQueues={},this.tracks.forEach(function(t){e.vttFragQueues[t.id]=[]})},t.prototype.nextFrag=function(){if(null===this.currentlyProcessing&&this.currentTrackId>-1&&this.vttFragQueues[this.currentTrackId].length){var e=this.currentlyProcessing=this.vttFragQueues[this.currentTrackId].shift();this.hls.trigger(ke.a.FRAG_LOADING,{frag:e})}},t.prototype.onSubtitleFragProcessed=function(e){e.success&&this.vttFragSNsProcessed[e.frag.trackId].push(e.frag.sn),this.currentlyProcessing=null,this.nextFrag()},t.prototype.onError=function(e){var t=e.frag;t&&"subtitle"!==t.type||this.currentlyProcessing&&(this.currentlyProcessing=null,this.nextFrag())},t.prototype.onSubtitleTracksUpdated=function(e){var t=this;Ae.b.log("subtitle tracks updated"),this.tracks=e.subtitleTracks,this.clearVttFragQueues(),this.vttFragSNsProcessed={},this.tracks.forEach(function(e){t.vttFragSNsProcessed[e.id]=[]})},t.prototype.onSubtitleTrackSwitch=function(e){this.currentTrackId=e.id,this.clearVttFragQueues()},t.prototype.onSubtitleTrackLoaded=function(e){var t=this.vttFragSNsProcessed[e.id],r=this.vttFragQueues[e.id],n=this.currentlyProcessing?this.currentlyProcessing.sn:-1,o=function(e){return t.indexOf(e.sn)>-1},i=function(e){return r.some(function(t){return t.sn===e.sn})};e.details.fragments.forEach(function(t){o(t)||t.sn===n||i(t)||(t.trackId=e.id,r.push(t))}),this.nextFrag()},t}(Pe),Sr=wr,Cr={autoStartLoad:!0,startPosition:-1,defaultAudioCodec:void 0,debug:!1,capLevelOnFPSDrop:!1,capLevelToPlayerSize:!1,initialLiveManifestSize:1,maxBufferLength:30,maxBufferSize:6e7,maxBufferHole:.5,maxSeekHole:2,lowBufferWatchdogPeriod:.5,highBufferWatchdogPeriod:3,nudgeOffset:.1,nudgeMaxRetry:3,maxFragLookUpTolerance:.2,liveSyncDurationCount:3,liveMaxLatencyDurationCount:1/0,liveSyncDuration:void 0,liveMaxLatencyDuration:void 0,maxMaxBufferLength:600,enableWorker:!0,enableSoftwareAES:!0,manifestLoadingTimeOut:1e4,manifestLoadingMaxRetry:1,manifestLoadingRetryDelay:1e3,manifestLoadingMaxRetryTimeout:64e3,startLevel:void 0,levelLoadingTimeOut:1e4,levelLoadingMaxRetry:4,levelLoadingRetryDelay:1e3,levelLoadingMaxRetryTimeout:64e3,fragLoadingTimeOut:2e4,fragLoadingMaxRetry:6,fragLoadingRetryDelay:1e3,fragLoadingMaxRetryTimeout:64e3,fragLoadingLoopThreshold:3,startFragPrefetch:!1,fpsDroppedMonitoringPeriod:5e3,fpsDroppedMonitoringThreshold:.2,appendErrorMaxRetry:3,loader:It,fLoader:void 0,pLoader:void 0,xhrSetup:void 0,fetchSetup:void 0,abrController:Rt,bufferController:jt,capLevelController:Ot,fpsController:Lt,stretchShortVideoTrack:!1,maxAudioFramesDrift:1,forceKeyFrameOnDiscontinuity:!0,abrEwmaFastLive:3,abrEwmaSlowLive:9,abrEwmaFastVoD:3,abrEwmaSlowVoD:9,abrEwmaDefaultEstimate:5e5,abrBandWidthFactor:.95,abrBandWidthUpFactor:.7,abrMaxWithRealBitrate:!1,maxStarvationDelay:4,maxLoadingDelay:4,minAutoBitrate:0};Cr.subtitleStreamController=Sr,Cr.subtitleTrackController=Tr,Cr.timelineController=br,Cr.cueHandler=Se,Cr.enableCEA708Captions=!0,Cr.enableWebVTT=!0,Cr.captionsTextTrack1Label="English",Cr.captionsTextTrack1LanguageCode="en",Cr.captionsTextTrack2Label="Spanish",Cr.captionsTextTrack2LanguageCode="es",Cr.audioStreamController=Ht,Cr.audioTrackController=Ft;var Rr=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),kr=function(){function e(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};we(this,e);var n=e.DefaultConfig;if((r.liveSyncDurationCount||r.liveMaxLatencyDurationCount)&&(r.liveSyncDuration||r.liveMaxLatencyDuration))throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");for(var o in n)o in r||(r[o]=n[o]);if(void 0!==r.liveMaxLatencyDurationCount&&r.liveMaxLatencyDurationCount<=r.liveSyncDurationCount)throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');if(void 0!==r.liveMaxLatencyDuration&&(r.liveMaxLatencyDuration<=r.liveSyncDuration||void 0===r.liveSyncDuration))throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');Object(Ae.a)(r.debug),this.config=r,this._autoLevelCapping=-1;var i=this.observer=new nt.a;i.trigger=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];i.emit.apply(i,[e,e].concat(r))},i.off=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];i.removeListener.apply(i,[e].concat(r))},this.on=i.on.bind(i),this.off=i.off.bind(i),this.trigger=i.trigger.bind(i);var a=this.abrController=new r.abrController(this),s=new r.bufferController(this),l=new r.capLevelController(this),u=new r.fpsController(this),c=new ze(this),d=new Ye(this),f=new Qe(this),p=new bt(this),h=this.levelController=new yt(this),m=this.streamController=new pt(this),y=[h,m],g=r.audioStreamController;g&&y.push(new g(this)),this.networkControllers=y;var v=[c,d,f,a,s,l,u,p];if(g=r.audioTrackController){var b=new g(this);this.audioTrackController=b,v.push(b)}if(g=r.subtitleTrackController){var _=new g(this);this.subtitleTrackController=_,v.push(_)}[r.subtitleStreamController,r.timelineController].forEach(function(e){e&&v.push(new e(t))}),this.coreComponents=v}return e.isSupported=function(){var e=window.MediaSource=window.MediaSource||window.WebKitMediaSource,t=window.SourceBuffer=window.SourceBuffer||window.WebKitSourceBuffer,r=e&&"function"==typeof e.isTypeSupported&&e.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'),n=!t||t.prototype&&"function"==typeof t.prototype.appendBuffer&&"function"==typeof t.prototype.remove;return r&&n},Rr(e,null,[{key:"version",get:function(){return"0.8.4"}},{key:"Events",get:function(){return ke.a}},{key:"ErrorTypes",get:function(){return je.b}},{key:"ErrorDetails",get:function(){return je.a}},{key:"DefaultConfig",get:function(){return e.defaultConfig?e.defaultConfig:Cr},set:function(t){e.defaultConfig=t}}]),e.prototype.destroy=function(){Ae.b.log("destroy"),this.trigger(ke.a.DESTROYING),this.detachMedia(),this.coreComponents.concat(this.networkControllers).forEach(function(e){e.destroy()}),this.url=null,this.observer.removeAllListeners(),this._autoLevelCapping=-1},e.prototype.attachMedia=function(e){Ae.b.log("attachMedia"),this.media=e,this.trigger(ke.a.MEDIA_ATTACHING,{media:e})},e.prototype.detachMedia=function(){Ae.b.log("detachMedia"),this.trigger(ke.a.MEDIA_DETACHING),this.media=null},e.prototype.loadSource=function(e){e=Re.a.buildAbsoluteURL(window.location.href,e,{alwaysNormalize:!0}),Ae.b.log("loadSource:"+e),this.url=e,this.trigger(ke.a.MANIFEST_LOADING,{url:e})},e.prototype.startLoad=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1;Ae.b.log("startLoad("+e+")"),this.networkControllers.forEach(function(t){t.startLoad(e)})},e.prototype.stopLoad=function(){Ae.b.log("stopLoad"),this.networkControllers.forEach(function(e){e.stopLoad()})},e.prototype.swapAudioCodec=function(){Ae.b.log("swapAudioCodec"),this.streamController.swapAudioCodec()},e.prototype.recoverMediaError=function(){Ae.b.log("recoverMediaError");var e=this.media;this.detachMedia(),this.attachMedia(e)},Rr(e,[{key:"levels",get:function(){return this.levelController.levels}},{key:"currentLevel",get:function(){return this.streamController.currentLevel},set:function(e){Ae.b.log("set currentLevel:"+e),this.loadLevel=e,this.streamController.immediateLevelSwitch()}},{key:"nextLevel",get:function(){return this.streamController.nextLevel},set:function(e){Ae.b.log("set nextLevel:"+e),this.levelController.manualLevel=e,this.streamController.nextLevelSwitch()}},{key:"loadLevel",get:function(){return this.levelController.level},set:function(e){Ae.b.log("set loadLevel:"+e),this.levelController.manualLevel=e}},{key:"nextLoadLevel",get:function(){return this.levelController.nextLoadLevel},set:function(e){this.levelController.nextLoadLevel=e}},{key:"firstLevel",get:function(){return Math.max(this.levelController.firstLevel,this.minAutoLevel)},set:function(e){Ae.b.log("set firstLevel:"+e),this.levelController.firstLevel=e}},{key:"startLevel",get:function(){return this.levelController.startLevel},set:function(e){Ae.b.log("set startLevel:"+e);var t=this;-1!==e&&(e=Math.max(e,t.minAutoLevel)),t.levelController.startLevel=e}},{key:"autoLevelCapping",get:function(){return this._autoLevelCapping},set:function(e){Ae.b.log("set autoLevelCapping:"+e),this._autoLevelCapping=e}},{key:"autoLevelEnabled",get:function(){return-1===this.levelController.manualLevel}},{key:"manualLevel",get:function(){return this.levelController.manualLevel}},{key:"minAutoLevel",get:function(){for(var e=this,t=e.levels,r=e.config.minAutoBitrate,n=t?t.length:0,o=0;o<n;o++){if((t[o].realBitrate?Math.max(t[o].realBitrate,t[o].bitrate):t[o].bitrate)>r)return o}return 0}},{key:"maxAutoLevel",get:function(){var e=this,t=e.levels,r=e.autoLevelCapping;return-1===r&&t&&t.length?t.length-1:r}},{key:"nextAutoLevel",get:function(){var e=this;return Math.min(Math.max(e.abrController.nextAutoLevel,e.minAutoLevel),e.maxAutoLevel)},set:function(e){var t=this;t.abrController.nextAutoLevel=Math.max(t.minAutoLevel,e)}},{key:"audioTracks",get:function(){var e=this.audioTrackController;return e?e.audioTracks:[]}},{key:"audioTrack",get:function(){var e=this.audioTrackController;return e?e.audioTrack:-1},set:function(e){var t=this.audioTrackController;t&&(t.audioTrack=e)}},{key:"liveSyncPosition",get:function(){return this.streamController.liveSyncPosition}},{key:"subtitleTracks",get:function(){var e=this.subtitleTrackController;return e?e.subtitleTracks:[]}},{key:"subtitleTrack",get:function(){var e=this.subtitleTrackController;return e?e.subtitleTrack:-1},set:function(e){var t=this.subtitleTrackController;t&&(t.subtitleTrack=e)}}]),e}();t.default=kr},function(e,t,r){function n(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};t.m=e,t.c=r,t.i=function(e){return e},t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="/",t.oe=function(e){throw console.error(e),e};var n=t(t.s=ENTRY_MODULE);return n.default||n}function o(e){return(e+"").replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}function i(e){var t=[],r=e.toString(),n=r.match(/^function\s?\(\w+,\s*\w+,\s*(\w+)\)/);if(!n)return t;for(var i,a=n[1],s=new RegExp("(\\\\n|\\W)"+o(a)+"\\((/\\*.*?\\*/)?s?.*?([\\.|\\-|\\w|/|@]+).*?\\)","g");i=s.exec(r);)t.push(i[3]);return t}function a(e,t){for(var r=[t],n=[],o={};r.length;){var a=r.pop();if(!o[a]&&e[a]){o[a]=!0,n.push(a);var s=i(e[a]);r=r.concat(s)}}return n}e.exports=function(e,t){t=t||{};var o=r.m,i=t.all?Object.keys(o):a(o,e),s="("+n.toString().replace("ENTRY_MODULE",JSON.stringify(e))+")({"+i.map(function(e){return JSON.stringify(e)+": "+o[e].toString()}).join(",")+"})(self);",l=new window.Blob([s],{type:"text/javascript"});if(t.bare)return l;var u=window.URL||window.webkitURL||window.mozURL||window.msURL,c=u.createObjectURL(l),d=new window.Worker(c);return d.objectURL=c,d}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(6),o=r(1),i=r(0),a=r(4),s=r.n(a),l=function(e){var t=new s.a;t.trigger=function(e){for(var r=arguments.length,n=Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];t.emit.apply(t,[e,e].concat(n))},t.off=function(e){for(var r=arguments.length,n=Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];t.removeListener.apply(t,[e].concat(n))};var r=function(t,r){e.postMessage({event:t,data:r})};e.addEventListener("message",function(o){var a=o.data;switch(a.cmd){case"init":var s=JSON.parse(a.config);e.demuxer=new n.a(t,a.typeSupported,s,a.vendor);try{Object(i.a)(!0===s.debug)}catch(e){console.warn("demuxerWorker: unable to enable logs")}r("init",null);break;case"demux":e.demuxer.push(a.data,a.decryptdata,a.initSegment,a.audioCodec,a.videoCodec,a.timeOffset,a.discontinuity,a.trackSwitch,a.contiguous,a.duration,a.accurateTimeOffset,a.defaultInitPTS)}}),t.on(o.a.FRAG_DECRYPTED,r),t.on(o.a.FRAG_PARSING_INIT_SEGMENT,r),t.on(o.a.FRAG_PARSED,r),t.on(o.a.ERROR,r),t.on(o.a.FRAG_PARSING_METADATA,r),t.on(o.a.FRAG_PARSING_USERDATA,r),t.on(o.a.INIT_PTS_FOUND,r),t.on(o.a.FRAG_PARSING_DATA,function(t,r){var n=[],o={event:t,data:r};r.data1&&(o.data1=r.data1.buffer,n.push(r.data1.buffer),delete r.data1),r.data2&&(o.data2=r.data2.buffer,n.push(r.data2.buffer),delete r.data2),e.postMessage(o,n)})};t.default=l}]).default})},"./node_modules/hoist-non-react-statics/index.js":/*!*******************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/index.js ***!
  \*******************************************************/
/*! no static exports found */
/*! exports used: default */
function(e,t,r){"use strict";var n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,u=Object.getPrototypeOf,c=u&&u(Object);e.exports=function e(t,r,d){if("string"!=typeof r){if(c){var f=u(r);f&&f!==c&&e(t,f,d)}var p=a(r);s&&(p=p.concat(s(r)));for(var h=0;h<p.length;++h){var m=p[h];if(!(n[m]||o[m]||d&&d[m])){var y=l(r,m);try{i(t,m,y)}catch(e){}}}return t}return t}},"./node_modules/invariant/browser.js":/*!*******************************************!*\
  !*** ./node_modules/invariant/browser.js ***!
  \*******************************************/
/*! no static exports found */
/*! exports used: default */
function(e,t,r){"use strict";var n=function(e,t,r,n,o,i,a,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[r,n,o,i,a,s],c=0;l=new Error(t.replace(/%s/g,function(){return u[c++]})),l.name="Invariant Violation"}throw l.framesToPop=1,l}};e.exports=n},"./node_modules/lodash-es/_Symbol.js":/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_Symbol.js ***!
  \*******************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";var n=r(/*! ./_root.js */"./node_modules/lodash-es/_root.js"),o=n.a.Symbol;t.a=o},"./node_modules/lodash-es/_baseGetTag.js":/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseGetTag.js ***!
  \***********************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e){return null==e?void 0===e?l:s:u&&u in Object(e)?Object(i.a)(e):Object(a.a)(e)}var o=r(/*! ./_Symbol.js */"./node_modules/lodash-es/_Symbol.js"),i=r(/*! ./_getRawTag.js */"./node_modules/lodash-es/_getRawTag.js"),a=r(/*! ./_objectToString.js */"./node_modules/lodash-es/_objectToString.js"),s="[object Null]",l="[object Undefined]",u=o.a?o.a.toStringTag:void 0;t.a=n},"./node_modules/lodash-es/_freeGlobal.js":/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_freeGlobal.js ***!
  \***********************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";(function(e){var r="object"==typeof e&&e&&e.Object===Object&&e;t.a=r}).call(t,r(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/lodash-es/_getPrototype.js":/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_getPrototype.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";var n=r(/*! ./_overArg.js */"./node_modules/lodash-es/_overArg.js"),o=Object(n.a)(Object.getPrototypeOf,Object);t.a=o},"./node_modules/lodash-es/_getRawTag.js":/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getRawTag.js ***!
  \**********************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e){var t=a.call(e,l),r=e[l];try{e[l]=void 0;var n=!0}catch(e){}var o=s.call(e);return n&&(t?e[l]=r:delete e[l]),o}var o=r(/*! ./_Symbol.js */"./node_modules/lodash-es/_Symbol.js"),i=Object.prototype,a=i.hasOwnProperty,s=i.toString,l=o.a?o.a.toStringTag:void 0;t.a=n},"./node_modules/lodash-es/_objectToString.js":/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_objectToString.js ***!
  \***************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e){return i.call(e)}var o=Object.prototype,i=o.toString;t.a=n},"./node_modules/lodash-es/_overArg.js":/*!********************************************!*\
  !*** ./node_modules/lodash-es/_overArg.js ***!
  \********************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t){return function(r){return e(t(r))}}t.a=n},"./node_modules/lodash-es/_root.js":/*!*****************************************!*\
  !*** ./node_modules/lodash-es/_root.js ***!
  \*****************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";var n=r(/*! ./_freeGlobal.js */"./node_modules/lodash-es/_freeGlobal.js"),o="object"==typeof self&&self&&self.Object===Object&&self,i=n.a||o||Function("return this")();t.a=i},"./node_modules/lodash-es/isObjectLike.js":/*!************************************************!*\
  !*** ./node_modules/lodash-es/isObjectLike.js ***!
  \************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e){return null!=e&&"object"==typeof e}t.a=n},"./node_modules/lodash-es/isPlainObject.js":/*!*************************************************!*\
  !*** ./node_modules/lodash-es/isPlainObject.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e){if(!Object(a.a)(e)||Object(o.a)(e)!=s)return!1;var t=Object(i.a)(e);if(null===t)return!0;var r=d.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&c.call(r)==f}var o=r(/*! ./_baseGetTag.js */"./node_modules/lodash-es/_baseGetTag.js"),i=r(/*! ./_getPrototype.js */"./node_modules/lodash-es/_getPrototype.js"),a=r(/*! ./isObjectLike.js */"./node_modules/lodash-es/isObjectLike.js"),s="[object Object]",l=Function.prototype,u=Object.prototype,c=l.toString,d=u.hasOwnProperty,f=c.call(Object);t.a=n},"./node_modules/muicss/lib/js/config.js":/*!**********************************************!*\
  !*** ./node_modules/muicss/lib/js/config.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports={debug:!0}},"./node_modules/muicss/lib/js/lib/forms.js":/*!*************************************************!*\
  !*** ./node_modules/muicss/lib/js/lib/forms.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e,t,r){var n,l,u,c,d=document.documentElement.clientHeight,f=t*a+2*s,p=Math.min(f,d);l=s+a-(o+i),l-=r*a,u=-1*e.getBoundingClientRect().top,c=d-p+u,n=Math.min(Math.max(l,u),c);var h,m,y=0;return f>d&&(h=s+(r+1)*a-(-1*n+o+i),m=t*a+2*s-p,y=Math.min(h,m)),{height:p+"px",top:n+"px",scrollTop:y}}var o=15,i=32,a=42,s=8;e.exports={getMenuPositionalCSS:n}},"./node_modules/muicss/lib/js/lib/jqLite.js":/*!**************************************************!*\
  !*** ./node_modules/muicss/lib/js/lib/jqLite.js ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e,t){if(t&&e.setAttribute){for(var r,n=m(e),o=t.split(" "),i=0;i<o.length;i++)r=o[i].trim(),-1===n.indexOf(" "+r+" ")&&(n+=r+" ");e.setAttribute("class",n.trim())}}function o(e,t,r){if(void 0===t)return getComputedStyle(e);var n=a(t);if("object"!==n){"string"===n&&void 0!==r&&(e.style[y(t)]=r);var o=getComputedStyle(e);if(!("array"===a(t)))return g(e,t,o);for(var i,s={},l=0;l<t.length;l++)i=t[l],s[i]=g(e,i,o);return s}for(var i in t)e.style[y(i)]=t[i]}function i(e,t){return!(!t||!e.getAttribute)&&m(e).indexOf(" "+t+" ")>-1}function a(e){if(void 0===e)return"undefined";var t=Object.prototype.toString.call(e);if(0===t.indexOf("[object "))return t.slice(8,-1).toLowerCase();throw new Error("MUI: Could not understand type: "+t)}function s(e,t,r,n){n=void 0!==n&&n;var o=e._muiEventCache=e._muiEventCache||{};t.split(" ").map(function(t){e.addEventListener(t,r,n),o[t]=o[t]||[],o[t].push([r,n])})}function l(e,t,r,n){n=void 0!==n&&n;var o,i,a,s=e._muiEventCache=e._muiEventCache||{};t.split(" ").map(function(t){for(o=s[t]||[],a=o.length;a--;)i=o[a],(void 0===r||i[0]===r&&i[1]===n)&&(o.splice(a,1),e.removeEventListener(t,i[0],i[1]))})}function u(e,t,r,n){t.split(" ").map(function(t){s(e,t,function o(i){r&&r.apply(this,arguments),l(e,t,o,n)},n)})}function c(e,t){var r=window;if(void 0===t){if(e===r){var n=document.documentElement;return(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}return e.scrollLeft}e===r?r.scrollTo(t,d(r)):e.scrollLeft=t}function d(e,t){var r=window;if(void 0===t){if(e===r){var n=document.documentElement;return(r.pageYOffset||n.scrollTop)-(n.clientTop||0)}return e.scrollTop}e===r?r.scrollTo(c(r),t):e.scrollTop=t}function f(e){var t=window,r=e.getBoundingClientRect(),n=d(t),o=c(t);return{top:r.top+n,left:r.left+o,height:r.height,width:r.width}}function p(e){var t=!1,r=!0,n=document,o=n.defaultView,i=n.documentElement,a=n.addEventListener?"addEventListener":"attachEvent",s=n.addEventListener?"removeEventListener":"detachEvent",l=n.addEventListener?"":"on",u=function(r){"readystatechange"==r.type&&"complete"!=n.readyState||(("load"==r.type?o:n)[s](l+r.type,u,!1),!t&&(t=!0)&&e.call(o,r.type||r))},c=function(){try{i.doScroll("left")}catch(e){return void setTimeout(c,50)}u("poll")};if("complete"==n.readyState)e.call(o,"lazy");else{if(n.createEventObject&&i.doScroll){try{r=!o.frameElement}catch(e){}r&&c()}n[a](l+"DOMContentLoaded",u,!1),n[a](l+"readystatechange",u,!1),o[a](l+"load",u,!1)}}function h(e,t){if(t&&e.setAttribute){for(var r,n=m(e),o=t.split(" "),i=0;i<o.length;i++)for(r=o[i].trim();n.indexOf(" "+r+" ")>=0;)n=n.replace(" "+r+" "," ");e.setAttribute("class",n.trim())}}function m(e){return" "+(e.getAttribute("class")||"").replace(/[\n\t]/g,"")+" "}function y(e){return e.replace(v,function(e,t,r,n){return n?r.toUpperCase():r}).replace(b,"Moz$1")}function g(e,t,r){var n;return n=r.getPropertyValue(t),""!==n||e.ownerDocument||(n=e.style[y(t)]),n}var v=/([\:\-\_]+(.))/g,b=/^moz([A-Z])/;e.exports={addClass:n,css:o,hasClass:i,off:l,offset:f,on:s,one:u,ready:p,removeClass:h,type:a,scrollLeft:c,scrollTop:d}},"./node_modules/muicss/lib/js/lib/util.js":/*!************************************************!*\
  !*** ./node_modules/muicss/lib/js/lib/util.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(){var e=window;if(v.debug&&void 0!==e.console)try{e.console.log.apply(e.console,arguments)}catch(r){var t=Array.prototype.slice.call(arguments);e.console.log(t.join("\n"))}}function o(e){var t,r=document;t=r.head||r.getElementsByTagName("head")[0]||r.documentElement;var n=r.createElement("style");return n.type="text/css",n.styleSheet?n.styleSheet.cssText=e:n.appendChild(r.createTextNode(e)),t.insertBefore(n,t.firstChild),n}function i(e,t){if(!t)throw new Error("MUI: "+e);"undefined"!=typeof console&&console.warn("MUI Warning: "+e)}function a(e){var t="";for(var r in e)t+=e[r]?r+" ":"";return t.trim()}function s(){if(void 0!==g)return g;var e=document.createElement("x");return e.style.cssText="pointer-events:auto",g="auto"===e.style.pointerEvents}function l(e,t){return function(){e[t].apply(e,arguments)}}function u(e,t,r,n,o){var i,a=document.createEvent("HTMLEvents"),r=void 0===r||r,n=void 0===n||n;if(a.initEvent(t,r,n),o)for(i in o)a[i]=o[i];return e&&e.dispatchEvent(a),a}function c(){if(1===(_+=1)){var e,t,r,n=document,i=window,a=n.documentElement,s=n.body,l=T();e=["overflow:hidden"],l&&(a.scrollHeight>a.clientHeight&&(r=parseInt(b.css(s,"padding-right"))+l,e.push("padding-right:"+r+"px")),a.scrollWidth>a.clientWidth&&(r=parseInt(b.css(s,"padding-bottom"))+l,e.push("padding-bottom:"+r+"px"))),t="."+E+"{",t+=e.join(" !important;")+" !important;}",h=o(t),b.on(i,"scroll",m,!0),p={left:b.scrollLeft(i),top:b.scrollTop(i)},b.addClass(s,E)}}function d(e){0!==_&&0===(_-=1)&&(b.removeClass(document.body,E),h.parentNode.removeChild(h),e&&window.scrollTo(p.left,p.top),b.off(window,"scroll",m,!0))}function f(e){var t=window.requestAnimationFrame;t?t(e):setTimeout(e,0)}var p,h,m,y,g,v=r(/*! ../config */"./node_modules/muicss/lib/js/config.js"),b=r(/*! ./jqLite */"./node_modules/muicss/lib/js/lib/jqLite.js"),_=0,E="mui-scroll-lock";m=function(e){e.target.tagName||e.stopImmediatePropagation()};var T=function(){if(void 0!==y)return y;var e=document,t=e.body,r=e.createElement("div");return r.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',r=r.firstChild,t.appendChild(r),y=r.offsetWidth-r.clientWidth,t.removeChild(r),y};e.exports={callback:l,classNames:a,disableScrollLock:d,dispatchEvent:u,enableScrollLock:c,log:n,loadStyle:o,raiseError:i,requestAnimationFrame:f,supportsPointerEvents:s}},"./node_modules/muicss/lib/react/_helpers.js":/*!***************************************************!*\
  !*** ./node_modules/muicss/lib/react/_helpers.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! ./babel-helpers.js */"./node_modules/muicss/lib/react/babel-helpers.js");e.exports={controlledMessage:"You provided a `value` prop to a form field without an `OnChange` handler. Please see React documentation on controlled components"}},"./node_modules/muicss/lib/react/babel-helpers.js":/*!********************************************************!*\
  !*** ./node_modules/muicss/lib/react/babel-helpers.js ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n,o,i;!function(r,a){o=[t],n=a,void 0!==(i="function"==typeof n?n.apply(t,o):n)&&(e.exports=i)}(0,function(e){var t=e;t.classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},t.createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),t.extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},t.inherits=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},t.interopRequireDefault=function(e){return e&&e.__esModule?e:{default:e}},t.interopRequireWildcard=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t},t.objectWithoutProperties=function(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r},t.possibleConstructorReturn=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}})},"./node_modules/muicss/lib/react/button.js":/*!*************************************************!*\
  !*** ./node_modules/muicss/lib/react/button.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./babel-helpers.js */"./node_modules/muicss/lib/react/babel-helpers.js");Object.defineProperty(t,"__esModule",{value:!0});var o=r(/*! react */"./node_modules/react/index.js"),i=n.interopRequireDefault(o),a=r(/*! ../js/lib/jqLite */"./node_modules/muicss/lib/js/lib/jqLite.js"),s=n.interopRequireWildcard(a),l=r(/*! ../js/lib/util */"./node_modules/muicss/lib/js/lib/util.js"),u=n.interopRequireWildcard(l),c={color:1,variant:1,size:1},d=function(e){function t(e){n.classCallCheck(this,t);var r=n.possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));r.state={rippleStyle:{},rippleIsVisible:!1};var o=u.callback;return r.onMouseDownCB=o(r,"onMouseDown"),r.onMouseUpCB=o(r,"onMouseUp"),r.onMouseLeaveCB=o(r,"onMouseLeave"),r.onTouchStartCB=o(r,"onTouchStart"),r.onTouchEndCB=o(r,"onTouchEnd"),r}return n.inherits(t,e),n.createClass(t,[{key:"componentDidMount",value:function(){var e=this.buttonElRef;e._muiDropdown=!0,e._muiRipple=!0}},{key:"onMouseDown",value:function(e){this.showRipple(e);var t=this.props.onMouseDown;t&&t(e)}},{key:"onMouseUp",value:function(e){this.hideRipple(e);var t=this.props.onMouseUp;t&&t(e)}},{key:"onMouseLeave",value:function(e){this.hideRipple(e);var t=this.props.onMouseLeave;t&&t(e)}},{key:"onTouchStart",value:function(e){this.showRipple(e);var t=this.props.onTouchStart;t&&t(e)}},{key:"onTouchEnd",value:function(e){this.hideRipple(e);var t=this.props.onTouchEnd;t&&t(e)}},{key:"showRipple",value:function(e){if(!("ontouchstart"in this.buttonElRef&&"mousedown"===e.type)){var t=s.offset(this.buttonElRef),r=void 0;r="touchstart"===e.type&&e.touches?e.touches[0]:e;var n=Math.sqrt(t.width*t.width+t.height*t.height),o=2*n+"px";this.setState({rippleStyle:{top:Math.round(r.pageY-t.top-n)+"px",left:Math.round(r.pageX-t.left-n)+"px",width:o,height:o},rippleIsVisible:!0})}}},{key:"hideRipple",value:function(e){this.setState({rippleIsVisible:!1})}},{key:"componentDidUpdate",value:function(e,t){var r=this.state,n=this.rippleElRef;r.rippleIsVisible&&!t.rippleIsVisible&&(s.removeClass(n,"mui--is-animating"),s.addClass(n,"mui--is-visible"),u.requestAnimationFrame(function(){s.addClass(n,"mui--is-animating")})),!r.rippleIsVisible&&t.rippleIsVisible&&u.requestAnimationFrame(function(){s.removeClass(n,"mui--is-visible")})}},{key:"render",value:function(){var e=this,t="mui-btn",r=void 0,o=void 0,a=this.props,s=(a.color,a.size,a.variant,n.objectWithoutProperties(a,["color","size","variant"]));for(r in c)"default"!==(o=this.props[r])&&(t+=" mui-btn--"+o);return i.default.createElement("button",n.extends({},s,{ref:function(t){e.buttonElRef=t},className:t+" "+this.props.className,onMouseUp:this.onMouseUpCB,onMouseDown:this.onMouseDownCB,onMouseLeave:this.onMouseLeaveCB,onTouchStart:this.onTouchStartCB,onTouchEnd:this.onTouchEndCB}),this.props.children,i.default.createElement("span",{className:"mui-btn__ripple-container"},i.default.createElement("span",{ref:function(t){e.rippleElRef=t},className:"mui-ripple",style:this.state.rippleStyle})))}}]),t}(i.default.Component);d.defaultProps={className:"",color:"default",size:"default",variant:"default"},t.default=d,e.exports=t.default},"./node_modules/muicss/lib/react/option.js":/*!*************************************************!*\
  !*** ./node_modules/muicss/lib/react/option.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./babel-helpers.js */"./node_modules/muicss/lib/react/babel-helpers.js");Object.defineProperty(t,"__esModule",{value:!0});var o=r(/*! react */"./node_modules/react/index.js"),i=n.interopRequireDefault(o),a=r(/*! ../js/lib/forms */"./node_modules/muicss/lib/js/lib/forms.js"),s=(n.interopRequireWildcard(a),r(/*! ../js/lib/jqLite */"./node_modules/muicss/lib/js/lib/jqLite.js")),l=(n.interopRequireWildcard(s),r(/*! ../js/lib/util */"./node_modules/muicss/lib/js/lib/util.js")),u=(n.interopRequireWildcard(l),r(/*! ./_helpers */"./node_modules/muicss/lib/react/_helpers.js"),function(e){function t(){return n.classCallCheck(this,t),n.possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return n.inherits(t,e),n.createClass(t,[{key:"render",value:function(){var e=this.props,t=(e.children,e.label),r=n.objectWithoutProperties(e,["children","label"]);return i.default.createElement("option",r,t)}}]),t}(i.default.Component));u.defaultProps={className:"",label:null},t.default=u,e.exports=t.default},"./node_modules/muicss/lib/react/select.js":/*!*************************************************!*\
  !*** ./node_modules/muicss/lib/react/select.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){var n=r(/*! ./babel-helpers.js */"./node_modules/muicss/lib/react/babel-helpers.js");Object.defineProperty(t,"__esModule",{value:!0});var o=r(/*! react */"./node_modules/react/index.js"),i=n.interopRequireDefault(o),a=r(/*! ../js/lib/forms */"./node_modules/muicss/lib/js/lib/forms.js"),s=n.interopRequireWildcard(a),l=r(/*! ../js/lib/jqLite */"./node_modules/muicss/lib/js/lib/jqLite.js"),u=n.interopRequireWildcard(l),c=r(/*! ../js/lib/util */"./node_modules/muicss/lib/js/lib/util.js"),d=n.interopRequireWildcard(c),f=r(/*! ./_helpers */"./node_modules/muicss/lib/react/_helpers.js"),p=function(e){function t(e){n.classCallCheck(this,t);var r=n.possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));r.state={showMenu:!1},!1===e.readOnly&&void 0!==e.value&&null===e.onChange&&d.raiseError(f.controlledMessage,!0),r.state.value=e.value;var o=d.callback;return r.onInnerChangeCB=o(r,"onInnerChange"),r.onInnerMouseDownCB=o(r,"onInnerMouseDown"),r.onOuterClickCB=o(r,"onOuterClick"),r.onOuterKeyDownCB=o(r,"onOuterKeyDown"),r.hideMenuCB=o(r,"hideMenu"),r.onMenuChangeCB=o(r,"onMenuChange"),r}return n.inherits(t,e),n.createClass(t,[{key:"componentDidMount",value:function(){this.controlEl._muiSelect=!0}},{key:"componentWillReceiveProps",value:function(e){this.setState({value:e.value})}},{key:"componentWillUnmount",value:function(){u.off(window,"resize",this.hideMenuCB),u.off(document,"click",this.hideMenuCB)}},{key:"onInnerChange",value:function(e){var t=e.target.value;this.setState({value:t})}},{key:"onInnerMouseDown",value:function(e){0!==e.button||this.props.useDefault||e.preventDefault()}},{key:"onOuterClick",value:function(e){if(0===e.button&&!this.controlEl.disabled){var t=this.props.onClick;t&&t(e),e.defaultPrevented||this.props.useDefault||(this.wrapperElRef.focus(),this.showMenu())}}},{key:"onOuterKeyDown",value:function(e){var t=this.props.onKeyDown;if(t&&t(e),!e.defaultPrevented&&!this.props.useDefault&&!1===this.state.showMenu){var r=e.keyCode;32!==r&&38!==r&&40!==r||(e.preventDefault(),this.showMenu())}}},{key:"showMenu",value:function(){this.props.useDefault||(u.on(window,"resize",this.hideMenuCB),u.on(document,"click",this.hideMenuCB),this.setState({showMenu:!0}))}},{key:"hideMenu",value:function(){u.off(window,"resize",this.hideMenuCB),u.off(document,"click",this.hideMenuCB),this.setState({showMenu:!1}),this.wrapperElRef.focus()}},{key:"onMenuChange",value:function(e){this.props.readOnly||(this.controlEl.value=e,d.dispatchEvent(this.controlEl,"change"))}},{key:"render",value:function(){var e=this,t=void 0;this.state.showMenu&&(t=i.default.createElement(h,{optionEls:this.controlEl.children,wrapperEl:this.wrapperElRef,onChange:this.onMenuChangeCB,onClose:this.hideMenuCB}));var r="-1",o="0";!1===this.props.useDefault&&(r="0",o="-1");var a=this.props,s=a.children,l=a.className,u=a.style,c=a.label,d=a.defaultValue,f=(a.readOnly,a.useDefault,a.name),p=n.objectWithoutProperties(a,["children","className","style","label","defaultValue","readOnly","useDefault","name"]);return i.default.createElement("div",n.extends({},p,{ref:function(t){e.wrapperElRef=t},tabIndex:r,style:u,className:"mui-select "+l,onClick:this.onOuterClickCB,onKeyDown:this.onOuterKeyDownCB}),i.default.createElement("select",{ref:function(t){e.controlEl=t},name:f,tabIndex:o,value:this.state.value,defaultValue:d,readOnly:this.props.readOnly,onChange:this.onInnerChangeCB,onMouseDown:this.onInnerMouseDownCB,required:this.props.required},s),i.default.createElement("label",null,c),t)}}]),t}(i.default.Component);p.defaultProps={className:"",name:"",readOnly:!1,useDefault:"undefined"!=typeof document&&"ontouchstart"in document.documentElement,onChange:null,onClick:null,onKeyDown:null};var h=function(e){function t(e){n.classCallCheck(this,t);var r=n.possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.state={origIndex:null,currentIndex:null},r.onKeyDownCB=d.callback(r,"onKeyDown"),r.onKeyPressCB=d.callback(r,"onKeyPress"),r.q="",r.qTimeout=null,r}return n.inherits(t,e),n.createClass(t,[{key:"componentWillMount",value:function(){var e=this.props.optionEls,t=e.length,r=0,n=void 0;for(n=t-1;n>-1;n--)e[n].selected&&(r=n);this.setState({origIndex:r,currentIndex:r})}},{key:"componentDidMount",value:function(){d.enableScrollLock();var e=s.getMenuPositionalCSS(this.props.wrapperEl,this.props.optionEls.length,this.state.currentIndex),t=this.wrapperElRef;u.css(t,e),u.scrollTop(t,e.scrollTop),u.on(document,"keydown",this.onKeyDownCB),u.on(document,"keypress",this.onKeyPressCB)}},{key:"componentWillUnmount",value:function(){d.disableScrollLock(!0),u.off(document,"keydown",this.onKeyDownCB),u.off(document,"keypress",this.onKeyPressCB)}},{key:"onClick",value:function(e,t){t.stopPropagation(),this.selectAndDestroy(e)}},{key:"onKeyDown",value:function(e){var t=e.keyCode;if(9===t)return this.destroy();27!==t&&40!==t&&38!==t&&13!==t||e.preventDefault(),27===t?this.destroy():40===t?this.increment():38===t?this.decrement():13===t&&this.selectAndDestroy()}},{key:"onKeyPress",value:function(e){var t=this;clearTimeout(this.qTimeout),this.q+=e.key,this.qTimeout=setTimeout(function(){t.q=""},300);var r=new RegExp("^"+this.q,"i"),n=this.props.optionEls,o=n.length,i=void 0;for(i=0;i<o;i++)if(r.test(n[i].innerText)){this.setState({currentIndex:i});break}}},{key:"increment",value:function(){this.state.currentIndex!==this.props.optionEls.length-1&&this.setState({currentIndex:this.state.currentIndex+1})}},{key:"decrement",value:function(){0!==this.state.currentIndex&&this.setState({currentIndex:this.state.currentIndex-1})}},{key:"selectAndDestroy",value:function(e){e=void 0===e?this.state.currentIndex:e,e!==this.state.origIndex&&this.props.onChange(this.props.optionEls[e].value),this.destroy()}},{key:"destroy",value:function(){this.props.onClose()}},{key:"render",value:function(){var e=this,t=[],r=this.props.optionEls,n=r.length,o=void 0,a=void 0;for(a=0;a<n;a++)o=a===this.state.currentIndex?"mui--is-selected ":"",o+=r[a].className,t.push(i.default.createElement("div",{key:a,className:o,onClick:this.onClick.bind(this,a)},r[a].textContent));return i.default.createElement("div",{ref:function(t){e.wrapperElRef=t},className:"mui-select__menu"},t)}}]),t}(i.default.Component);h.defaultProps={optionEls:[],wrapperEl:null,onChange:null,onClose:null},t.default=p,e.exports=t.default},"./node_modules/object-assign/index.js":/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach(function(e){n[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,s,l=n(e),u=1;u<arguments.length;u++){r=Object(arguments[u]);for(var c in r)i.call(r,c)&&(l[c]=r[c]);if(o){s=o(r);for(var d=0;d<s.length;d++)a.call(r,s[d])&&(l[s[d]]=r[s[d]])}}return l}},"./node_modules/prop-types/factoryWithThrowingShims.js":/*!*************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithThrowingShims.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";var n=r(/*! fbjs/lib/emptyFunction */"./node_modules/fbjs/lib/emptyFunction.js"),o=r(/*! fbjs/lib/invariant */"./node_modules/fbjs/lib/invariant.js"),i=r(/*! ./lib/ReactPropTypesSecret */"./node_modules/prop-types/lib/ReactPropTypesSecret.js");e.exports=function(){function e(e,t,r,n,a,s){s!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return r.checkPropTypes=n,r.PropTypes=r,r}},"./node_modules/prop-types/index.js":/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports=r(/*! ./factoryWithThrowingShims */"./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-dom/cjs/react-dom.production.min.js":/*!****************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.production.min.js ***!
  \****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){for(var t=arguments.length-1,r="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,n=0;n<t;n++)r+="&args[]="+encodeURIComponent(arguments[n+1]);throw t=Error(r+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."),t.name="Invariant Violation",t.framesToPop=1,t}function o(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function i(){if(jt)for(var e in At){var t=At[e],r=jt.indexOf(e);if(-1<r||n("96",e),!xt.plugins[r]){t.extractEvents||n("97",e),xt.plugins[r]=t,r=t.eventTypes;for(var o in r){var i=void 0,s=r[o],l=t,u=o;xt.eventNameDispatchConfigs.hasOwnProperty(u)&&n("99",u),xt.eventNameDispatchConfigs[u]=s;var c=s.phasedRegistrationNames;if(c){for(i in c)c.hasOwnProperty(i)&&a(c[i],l,u);i=!0}else s.registrationName?(a(s.registrationName,l,u),i=!0):i=!1;i||n("98",o,e)}}}}function a(e,t,r){xt.registrationNameModules[e]&&n("100",e),xt.registrationNameModules[e]=t,xt.registrationNameDependencies[e]=t.eventTypes[r].dependencies}function s(e,t){return(e&t)===t}function l(e){for(var t;t=e._renderedComponent;)e=t;return e}function u(e,t){e=l(e),e._hostNode=t,t[Kt]=e}function c(e,t){if(!(e._flags&Wt.hasCachedChildNodes)){var r=e._renderedChildren;t=t.firstChild;var o;e:for(o in r)if(r.hasOwnProperty(o)){var i=r[o],a=l(i)._domID;if(0!==a){for(;null!==t;t=t.nextSibling){var s=t,c=a;if(s.nodeType===Bt&&s.getAttribute(Ht)===""+c||s.nodeType===Gt&&s.nodeValue===" react-text: "+c+" "||s.nodeType===Gt&&s.nodeValue===" react-empty: "+c+" "){u(i,t);continue e}}n("32",a)}}e._flags|=Wt.hasCachedChildNodes}}function d(e){if(e[Kt])return e[Kt];for(var t=[];!e[Kt];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}var r=e[Kt];if(r.tag===Ft||r.tag===Ut)return r;for(;e&&(r=e[Kt]);e=t.pop()){var n=r;t.length&&c(r,e)}return n}function f(e){if("function"==typeof e.getName)return e.getName();if("number"==typeof e.tag){if("string"==typeof(e=e.type))return e;if("function"==typeof e)return e.displayName||e.name}return null}function p(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if((t.effectTag&rr)!==tr)return 1;for(;t.return;)if(t=t.return,(t.effectTag&rr)!==tr)return 1}return t.tag===Jt?2:3}function h(e){2!==p(e)&&n("188")}function m(e){var t=e.alternate;if(!t)return t=p(e),3===t&&n("188"),1===t?null:e;for(var r=e,o=t;;){var i=r.return,a=i?i.alternate:null;if(!i||!a)break;if(i.child===a.child){for(var s=i.child;s;){if(s===r)return h(i),e;if(s===o)return h(i),t;s=s.sibling}n("188")}if(r.return!==o.return)r=i,o=a;else{s=!1;for(var l=i.child;l;){if(l===r){s=!0,r=i,o=a;break}if(l===o){s=!0,o=i,r=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===r){s=!0,r=a,o=i;break}if(l===o){s=!0,o=a,r=i;break}l=l.sibling}s||n("189")}}r.alternate!==o&&n("190")}return r.tag!==Jt&&n("188"),r.stateNode.current===r?e:t}function y(e,t,r,n,o,i,a,s,l){or._hasCaughtError=!1,or._caughtError=null;var u=Array.prototype.slice.call(arguments,3);try{t.apply(r,u)}catch(e){or._caughtError=e,or._hasCaughtError=!0}}function g(){if(or._hasRethrowError){var e=or._rethrowError;throw or._rethrowError=null,or._hasRethrowError=!1,e}}function v(e,t,r,n){t=e.type||"unknown-event",e.currentTarget=ar.getNodeFromInstance(n),ir.invokeGuardedCallbackAndCatchFirstError(t,r,void 0,e),e.currentTarget=null}function b(e){if(e=sr.getInstanceFromNode(e))if("number"==typeof e.tag){lr&&"function"==typeof lr.restoreControlledState||n("194");var t=sr.getFiberCurrentPropsFromNode(e.stateNode);lr.restoreControlledState(e.stateNode,e.type,t)}else"function"!=typeof e.restoreControlledState&&n("195"),e.restoreControlledState()}function _(e,t,r,n,o,i){return e(t,r,n,o,i)}function E(e,t){return e(t)}function T(e,t){return E(e,t)}function w(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===hr?e.parentNode:e}function S(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var r=t;if("number"==typeof r.tag){for(;r.return;)r=r.return;r=r.tag!==mr?null:r.stateNode.containerInfo}else{for(;r._hostParent;)r=r._hostParent;r=qt.getNodeFromInstance(r).parentNode}if(!r)break;e.ancestors.push(t),t=qt.getClosestInstanceFromNode(r)}while(t);for(r=0;r<e.ancestors.length;r++)t=e.ancestors[r],gr._handleTopLevel(e.topLevelType,t,e.nativeEvent,w(e.nativeEvent))}function C(e,t){return null==t&&n("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function R(e,t,r){Array.isArray(e)?e.forEach(t,r):e&&t.call(r,e)}function k(e,t){e&&(sr.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e))}function j(e){return k(e,!0)}function A(e){return k(e,!1)}function x(e,t,r){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!r.disabled||"button"!==t&&"input"!==t&&"select"!==t&&"textarea"!==t);default:return!1}}function O(e,t){if(!yt.canUseDOM||t&&!("addEventListener"in document))return!1;t="on"+e;var r=t in document;return r||(r=document.createElement("div"),r.setAttribute(t,"return;"),r="function"==typeof r[t]),!r&&Rt&&"wheel"===e&&(r=document.implementation.hasFeature("Events.wheel","3.0")),r}function P(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r["ms"+e]="MS"+t,r["O"+e]="o"+t.toLowerCase(),r}function L(e){if(Tr[e])return Tr[e];if(!Er[e])return e;var t,r=Er[e];for(t in r)if(r.hasOwnProperty(t)&&t in wr)return Tr[e]=r[t];return""}function D(e){return Object.prototype.hasOwnProperty.call(e,kr)||(e[kr]=Rr++,Cr[e[kr]]={}),Cr[e[kr]]}function I(e){return!!Ur.hasOwnProperty(e)||!Fr.hasOwnProperty(e)&&(Mr.test(e)?Ur[e]=!0:(Fr[e]=!0,!1))}function N(){return null}function M(e){var t="";return mt.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}function F(e,t,r){if(e=e.options,t){t={};for(var n=0;n<r.length;n++)t["$"+r[n]]=!0;for(r=0;r<e.length;r++)n=t.hasOwnProperty("$"+e[r].value),e[r].selected!==n&&(e[r].selected=n)}else{for(r=""+r,t=null,n=0;n<e.length;n++){if(e[n].value===r)return void(e[n].selected=!0);null!==t||e[n].disabled||(t=e[n])}null!==t&&(t.selected=!0)}}function U(e,t){t&&($r[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&n("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&n("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||n("61")),null!=t.style&&"object"!=typeof t.style&&n("62",""))}function B(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){var t=B(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof r.get&&"function"==typeof r.set)return Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:!0,get:function(){return r.get.call(this)},set:function(e){n=""+e,r.set.call(this,e)}}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}function H(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function W(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&r.nodeType===rn)return void(r.nodeValue=t)}e.textContent=t}function V(e,t){sn(t,e.nodeType===on||e.nodeType===an?e:e.ownerDocument)}function K(e,t){return e!==Pn&&e!==On||t!==Pn&&t!==On?e===xn&&t!==xn?-255:e!==xn&&t===xn?255:e-t:0}function z(){return{first:null,last:null,hasForceUpdate:!1,callbackList:null}}function q(e,t,r,n){null!==r?r.next=t:(t.next=e.first,e.first=t),null!==n?t.next=n:e.last=t}function Y(e,t){t=t.priorityLevel;var r=null;if(null!==e.last&&0>=K(e.last.priorityLevel,t))r=e.last;else for(e=e.first;null!==e&&0>=K(e.priorityLevel,t);)r=e,e=e.next;return r}function X(e,t){var r=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=z()),null!==r?null===(e=r.updateQueue)&&(e=r.updateQueue=z()):e=null,In=n,Nn=e!==n?e:null;var o=In;r=Nn;var i=Y(o,t),a=null!==i?i.next:o.first;return null===r?(q(o,t,i,a),null):(n=Y(r,t),e=null!==n?n.next:r.first,q(o,t,i,a),a===e&&null!==a||i===n&&null!==i?(null===n&&(r.first=t),null===e&&(r.last=null),null):(t={priorityLevel:t.priorityLevel,partialState:t.partialState,callback:t.callback,isReplace:t.isReplace,isForced:t.isForced,isTopLevelUnmount:t.isTopLevelUnmount,next:null},q(r,t,n,e),t))}function Q(e,t,r,n){return e=e.partialState,"function"==typeof e?e.call(t,r,n):e}function $(e,t,r){e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=r}function J(e){return e.tag===Hn&&null!=e.type.childContextTypes}function Z(e,t){var r=e.stateNode,o=e.type.childContextTypes;if("function"!=typeof r.getChildContext)return t;r=r.getChildContext();for(var i in r)i in o||n("108",f(e)||"Unknown",i);return gt({},t,r)}function ee(e,t,r){this.tag=e,this.key=t,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null,this.internalContextTag=r,this.effectTag=uo,this.lastEffect=this.firstEffect=this.nextEffect=null,this.pendingWorkPriority=so,this.alternate=null}function te(e,t,r){var o=void 0;return"function"==typeof e?(o=e.prototype&&e.prototype.isReactComponent?new ee(Zn,t,r):new ee(Jn,t,r),o.type=e):"string"==typeof e?(o=new ee(to,t,r),o.type=e):"object"==typeof e&&null!==e&&"number"==typeof e.tag?o=e:n("130",null==e?e:typeof e,""),o}function re(e){return null===e||void 0===e?null:(e=Go&&e[Go]||e["@@iterator"],"function"==typeof e?e:null)}function ne(e,t){var r=t.ref;if(null!==r&&"function"!=typeof r){if(t._owner){t=t._owner;var o=void 0;t&&("number"==typeof t.tag?(t.tag!==Po&&n("110"),o=t.stateNode):o=t.getPublicInstance()),o||n("147",r);var i=""+r;return null!==e&&null!==e.ref&&e.ref._stringRef===i?e.ref:(e=function(e){var t=o.refs===_t?o.refs={}:o.refs;null===e?delete t[i]:t[i]=e},e._stringRef=i,e)}"string"!=typeof r&&n("148"),t._owner||n("149",r)}return r}function oe(e,t){"textarea"!==e.type&&n("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ie(e,t){function r(r,n){if(t){if(!e){if(null===n.alternate)return;n=n.alternate}var o=r.lastEffect;null!==o?(o.nextEffect=n,r.lastEffect=n):r.firstEffect=r.lastEffect=n,n.nextEffect=null,n.effectTag=Bo}}function o(e,n){if(!t)return null;for(;null!==n;)r(e,n),n=n.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(t,r){return e?(t=wo(t,r),t.index=0,t.sibling=null,t):(t.pendingWorkPriority=r,t.effectTag=Fo,t.index=0,t.sibling=null,t)}function s(e,r,n){return e.index=n,t?null!==(n=e.alternate)?(n=n.index,n<r?(e.effectTag=Uo,r):n):(e.effectTag=Uo,r):r}function l(e){return t&&null===e.alternate&&(e.effectTag=Uo),e}function u(e,t,r,n){return null===t||t.tag!==Lo?(r=Ro(r,e.internalContextTag,n),r.return=e,r):(t=a(t,n),t.pendingProps=r,t.return=e,t)}function c(e,t,r,n){return null===t||t.type!==r.type?(n=So(r,e.internalContextTag,n),n.ref=ne(t,r),n.return=e,n):(n=a(t,n),n.ref=ne(t,r),n.pendingProps=r.props,n.return=e,n)}function d(e,t,r,n){return null===t||t.tag!==Io?(r=ko(r,e.internalContextTag,n),r.return=e,r):(t=a(t,n),t.pendingProps=r,t.return=e,t)}function f(e,t,r,n){return null===t||t.tag!==No?(t=jo(r,e.internalContextTag,n),t.type=r.value,t.return=e,t):(t=a(t,n),t.type=r.value,t.return=e,t)}function p(e,t,r,n){return null===t||t.tag!==Do||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?(r=Ao(r,e.internalContextTag,n),r.return=e,r):(t=a(t,n),t.pendingProps=r.children||[],t.return=e,t)}function h(e,t,r,n){return null===t||t.tag!==Mo?(r=Co(r,e.internalContextTag,n),r.return=e,r):(t=a(t,n),t.pendingProps=r,t.return=e,t)}function m(e,t,r){if("string"==typeof t||"number"==typeof t)return t=Ro(""+t,e.internalContextTag,r),t.return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ho:return r=So(t,e.internalContextTag,r),r.ref=ne(null,t),r.return=e,r;case _o:return t=ko(t,e.internalContextTag,r),t.return=e,t;case Eo:return r=jo(t,e.internalContextTag,r),r.type=t.value,r.return=e,r;case To:return t=Ao(t,e.internalContextTag,r),t.return=e,t}if(xo(t)||re(t))return t=Co(t,e.internalContextTag,r),t.return=e,t;oe(e,t)}return null}function y(e,t,r,n){var o=null!==t?t.key:null;if("string"==typeof r||"number"==typeof r)return null!==o?null:u(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ho:return r.key===o?c(e,t,r,n):null;case _o:return r.key===o?d(e,t,r,n):null;case Eo:return null===o?f(e,t,r,n):null;case To:return r.key===o?p(e,t,r,n):null}if(xo(r)||re(r))return null!==o?null:h(e,t,r,n);oe(e,r)}return null}function g(e,t,r,n,o){if("string"==typeof n||"number"==typeof n)return e=e.get(r)||null,u(t,e,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ho:return e=e.get(null===n.key?r:n.key)||null,c(t,e,n,o);case _o:return e=e.get(null===n.key?r:n.key)||null,d(t,e,n,o);case Eo:return e=e.get(r)||null,f(t,e,n,o);case To:return e=e.get(null===n.key?r:n.key)||null,p(t,e,n,o)}if(xo(n)||re(n))return e=e.get(r)||null,h(t,e,n,o);oe(t,n)}return null}function v(e,n,a,l){for(var u=null,c=null,d=n,f=n=0,p=null;null!==d&&f<a.length;f++){d.index>f?(p=d,d=null):p=d.sibling;var h=y(e,d,a[f],l);if(null===h){null===d&&(d=p);break}t&&d&&null===h.alternate&&r(e,d),n=s(h,n,f),null===c?u=h:c.sibling=h,c=h,d=p}if(f===a.length)return o(e,d),u;if(null===d){for(;f<a.length;f++)(d=m(e,a[f],l))&&(n=s(d,n,f),null===c?u=d:c.sibling=d,c=d);return u}for(d=i(e,d);f<a.length;f++)(p=g(d,e,f,a[f],l))&&(t&&null!==p.alternate&&d.delete(null===p.key?f:p.key),n=s(p,n,f),null===c?u=p:c.sibling=p,c=p);return t&&d.forEach(function(t){return r(e,t)}),u}function b(e,a,l,u){var c=re(l);"function"!=typeof c&&n("150"),null==(l=c.call(l))&&n("151");for(var d=c=null,f=a,p=a=0,h=null,v=l.next();null!==f&&!v.done;p++,v=l.next()){f.index>p?(h=f,f=null):h=f.sibling;var b=y(e,f,v.value,u);if(null===b){f||(f=h);break}t&&f&&null===b.alternate&&r(e,f),a=s(b,a,p),null===d?c=b:d.sibling=b,d=b,f=h}if(v.done)return o(e,f),c;if(null===f){for(;!v.done;p++,v=l.next())null!==(v=m(e,v.value,u))&&(a=s(v,a,p),null===d?c=v:d.sibling=v,d=v);return c}for(f=i(e,f);!v.done;p++,v=l.next())null!==(v=g(f,e,p,v.value,u))&&(t&&null!==v.alternate&&f.delete(null===v.key?p:v.key),a=s(v,a,p),null===d?c=v:d.sibling=v,d=v);return t&&f.forEach(function(t){return r(e,t)}),c}return function(e,t,i,s){var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case Ho:e:{var c=i.key;for(u=t;null!==u;){if(u.key===c){if(u.type===i.type){o(e,u.sibling),t=a(u,s),t.ref=ne(u,i),t.pendingProps=i.props,t.return=e,e=t;break e}o(e,u);break}r(e,u),u=u.sibling}s=So(i,e.internalContextTag,s),s.ref=ne(t,i),s.return=e,e=s}return l(e);case _o:e:{for(u=i.key;null!==t;){if(t.key===u){if(t.tag===Io){o(e,t.sibling),t=a(t,s),t.pendingProps=i,t.return=e,e=t;break e}o(e,t);break}r(e,t),t=t.sibling}i=ko(i,e.internalContextTag,s),i.return=e,e=i}return l(e);case Eo:e:{if(null!==t){if(t.tag===No){o(e,t.sibling),t=a(t,s),t.type=i.value,t.return=e,e=t;break e}o(e,t)}t=jo(i,e.internalContextTag,s),t.type=i.value,t.return=e,e=t}return l(e);case To:e:{for(u=i.key;null!==t;){if(t.key===u){if(t.tag===Do&&t.stateNode.containerInfo===i.containerInfo&&t.stateNode.implementation===i.implementation){o(e,t.sibling),t=a(t,s),t.pendingProps=i.children||[],t.return=e,e=t;break e}o(e,t);break}r(e,t),t=t.sibling}i=Ao(i,e.internalContextTag,s),i.return=e,e=i}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==t&&t.tag===Lo?(o(e,t.sibling),t=a(t,s),t.pendingProps=i,t.return=e,e=t):(o(e,t),i=Ro(i,e.internalContextTag,s),i.return=e,e=i),l(e);if(xo(i))return v(e,t,i,s);if(re(i))return b(e,t,i,s);if(u&&oe(e,i),void 0===i)switch(e.tag){case Po:case Oo:i=e.type,n("152",i.displayName||i.name||"Component")}return o(e,t)}}function ae(e,t,r,o){function i(e,t){t.updater=a,e.stateNode=t,Yt.set(t,e)}var a={isMounted:oi,enqueueSetState:function(r,n,o){r=Yt.get(r);var i=t(r,!1);Zo(r,n,void 0===o?null:o,i),e(r,i)},enqueueReplaceState:function(r,n,o){r=Yt.get(r);var i=t(r,!1);ei(r,n,void 0===o?null:o,i),e(r,i)},enqueueForceUpdate:function(r,n){r=Yt.get(r);var o=t(r,!1);ti(r,void 0===n?null:n,o),e(r,o)}};return{adoptClassInstance:i,constructClassInstance:function(e,t){var r=e.type,n=$o(e),o=Jo(e),a=o?Qo(e,n):_t;return t=new r(t,a),i(e,t),o&&Xo(e,n,a),t},mountClassInstance:function(e,t){var r=e.alternate,o=e.stateNode,i=o.state||null,s=e.pendingProps;s||n("158");var l=$o(e);o.props=s,o.state=i,o.refs=_t,o.context=Qo(e,l),kn.enableAsyncSubtreeAPI&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent&&(e.internalContextTag|=Yo),"function"==typeof o.componentWillMount&&(l=o.state,o.componentWillMount(),l!==o.state&&a.enqueueReplaceState(o,o.state,null),null!==(l=e.updateQueue)&&(o.state=ri(r,e,l,o,i,s,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=qo)},updateClassInstance:function(e,t,i){var s=t.stateNode;s.props=t.memoizedProps,s.state=t.memoizedState;var l=t.memoizedProps,u=t.pendingProps;u||null==(u=l)&&n("159");var c=s.context,d=$o(t);if(d=Qo(t,d),"function"!=typeof s.componentWillReceiveProps||l===u&&c===d||(c=s.state,s.componentWillReceiveProps(u,d),s.state!==c&&a.enqueueReplaceState(s,s.state,null)),c=t.memoizedState,i=null!==t.updateQueue?ri(e,t,t.updateQueue,s,c,u,i):c,!(l!==u||c!==i||ni()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"!=typeof s.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=qo),!1;var f=u;if(null===l||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)f=!0;else{var p=t.stateNode,h=t.type;f="function"==typeof p.shouldComponentUpdate?p.shouldComponentUpdate(f,i,d):!h.prototype||!h.prototype.isPureReactComponent||(!Et(l,f)||!Et(c,i))}return f?("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(u,i,d),"function"==typeof s.componentDidUpdate&&(t.effectTag|=qo)):("function"!=typeof s.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=qo),r(t,u),o(t,i)),s.props=u,s.state=i,s.context=d,f}}}function se(e,t,r,o,i){function a(e,t,r){s(e,t,r,t.pendingWorkPriority)}function s(e,t,r,n){t.child=null===e?ii(t,t.child,r,n):e.child===t.child?ai(t,t.child,r,n):si(t,t.child,r,n)}function l(e,t){var r=t.ref;null===r||e&&e.ref===r||(t.effectTag|=Li)}function u(e,t,r,n){if(l(e,t),!r)return n&&mi(t,!1),d(e,t);r=t.stateNode,Di.current=t;var o=r.render();return t.effectTag|=Ai,a(e,t,o),t.memoizedState=r.state,t.memoizedProps=r.props,n&&mi(t,!0),t.child}function c(e){var t=e.stateNode;t.pendingContext?hi(e,t.pendingContext,t.pendingContext!==t.context):t.context&&hi(e,t.context,!1),g(e,t.containerInfo)}function d(e,t){return li(e,t),t.child}function f(e,t){switch(t.tag){case bi:c(t);break;case vi:pi(t);break;case Ti:g(t,t.stateNode.containerInfo)}return null}var p=e.shouldSetTextContent,h=e.useSyncScheduling,m=e.shouldDeprioritizeSubtree,y=t.pushHostContext,g=t.pushHostContainer,v=r.enterHydrationState,b=r.resetHydrationState,_=r.tryToClaimNextHydratableInstance;e=ae(o,i,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t});var E=e.adoptClassInstance,T=e.constructClassInstance,w=e.mountClassInstance,S=e.updateClassInstance;return{beginWork:function(e,t,r){if(t.pendingWorkPriority===ki||t.pendingWorkPriority>r)return f(e,t);switch(t.tag){case yi:null!==e&&n("155");var o=t.type,i=t.pendingProps,s=di(t);return s=ci(t,s),o=o(i,s),t.effectTag|=Ai,"object"==typeof o&&null!==o&&"function"==typeof o.render?(t.tag=vi,i=pi(t),E(t,o),w(t,r),t=u(e,t,!0,i)):(t.tag=gi,a(e,t,o),t.memoizedProps=i,t=t.child),t;case gi:e:{if(i=t.type,r=t.pendingProps,o=t.memoizedProps,fi())null===r&&(r=o);else if(null===r||o===r){t=d(e,t);break e}o=di(t),o=ci(t,o),i=i(r,o),t.effectTag|=Ai,a(e,t,i),t.memoizedProps=r,t=t.child}return t;case vi:return i=pi(t),o=void 0,null===e?t.stateNode?n("153"):(T(t,t.pendingProps),w(t,r),o=!0):o=S(e,t,r),u(e,t,o,i);case bi:return c(t),o=t.updateQueue,null!==o?(i=t.memoizedState,o=ui(e,t,o,null,i,null,r),i===o?(b(),t=d(e,t)):(i=o.element,null!==e&&null!==e.child||!v(t)?(b(),a(e,t,i)):(t.effectTag|=xi,t.child=ii(t,t.child,i,r)),t.memoizedState=o,t=t.child)):(b(),t=d(e,t)),t;case _i:y(t),null===e&&_(t),i=t.type;var C=t.memoizedProps;return o=t.pendingProps,null===o&&null===(o=C)&&n("154"),s=null!==e?e.memoizedProps:null,fi()||null!==o&&C!==o?(C=o.children,p(i,o)?C=null:s&&p(i,s)&&(t.effectTag|=Oi),l(e,t),r!==ji&&!h&&m(i,o)?(t.pendingWorkPriority=ji,t=null):(a(e,t,C),t.memoizedProps=o,t=t.child)):t=d(e,t),t;case Ei:return null===e&&_(t),e=t.pendingProps,null===e&&(e=t.memoizedProps),t.memoizedProps=e,null;case Si:t.tag=wi;case wi:return r=t.pendingProps,fi()?null===r&&null===(r=e&&e.memoizedProps)&&n("154"):null!==r&&t.memoizedProps!==r||(r=t.memoizedProps),i=r.children,o=t.pendingWorkPriority,t.stateNode=null===e?ii(t,t.stateNode,i,o):e.child===t.child?ai(t,t.stateNode,i,o):si(t,t.stateNode,i,o),t.memoizedProps=r,t.stateNode;case Ci:return null;case Ti:e:{if(g(t,t.stateNode.containerInfo),r=t.pendingWorkPriority,i=t.pendingProps,fi())null===i&&null==(i=e&&e.memoizedProps)&&n("154");else if(null===i||t.memoizedProps===i){t=d(e,t);break e}null===e?t.child=si(t,t.child,i,r):a(e,t,i),t.memoizedProps=i,t=t.child}return t;case Ri:e:{if(r=t.pendingProps,fi())null===r&&(r=t.memoizedProps);else if(null===r||t.memoizedProps===r){t=d(e,t);break e}a(e,t,r),t.memoizedProps=r,t=t.child}return t;default:n("156")}},beginFailedWork:function(e,t,r){switch(t.tag){case vi:pi(t);break;case bi:c(t);break;default:n("157")}return t.effectTag|=Pi,null===e?t.child=null:t.child!==e.child&&(t.child=e.child),t.pendingWorkPriority===ki||t.pendingWorkPriority>r?f(e,t):(t.firstEffect=null,t.lastEffect=null,s(e,t,null,r),t.tag===vi&&(e=t.stateNode,t.memoizedProps=e.props,t.memoizedState=e.state),t.child)}}}function le(e,t,r){var o=e.createInstance,i=e.createTextInstance,a=e.appendInitialChild,s=e.finalizeInitialChildren,l=e.prepareUpdate,u=t.getRootHostContainer,c=t.popHostContext,d=t.getHostContext,f=t.popHostContainer,p=r.prepareToHydrateHostInstance,h=r.prepareToHydrateHostTextInstance,m=r.popHydrationState;return{completeWork:function(e,t,r){var y=t.pendingProps;switch(null===y?y=t.memoizedProps:t.pendingWorkPriority===Ji&&r!==Ji||(t.pendingProps=null),t.tag){case Ui:return null;case Bi:return Ni(t),null;case Gi:return f(t),Mi(t),y=t.stateNode,y.pendingContext&&(y.context=y.pendingContext,y.pendingContext=null),null!==e&&null!==e.child||(m(t),t.effectTag&=~Xi),null;case Hi:c(t),r=u();var g=t.type;if(null!==e&&null!=t.stateNode){var v=e.memoizedProps,b=t.stateNode,_=d();y=l(b,g,v,y,r,_),(t.updateQueue=y)&&(t.effectTag|=$i),e.ref!==t.ref&&(t.effectTag|=Qi)}else{if(!y)return null===t.stateNode&&n("166"),null;if(e=d(),m(t))p(t,r,e)&&(t.effectTag|=$i);else{e=o(g,y,r,e,t);e:for(v=t.child;null!==v;){if(v.tag===Hi||v.tag===Wi)a(e,v.stateNode);else if(v.tag!==Vi&&null!==v.child){v=v.child;continue}if(v===t)break e;for(;null===v.sibling;){if(null===v.return||v.return===t)break e;v=v.return}v=v.sibling}s(e,g,y,r)&&(t.effectTag|=$i),t.stateNode=e}null!==t.ref&&(t.effectTag|=Qi)}return null;case Wi:if(e&&null!=t.stateNode)e.memoizedProps!==y&&(t.effectTag|=$i);else{if("string"!=typeof y)return null===t.stateNode&&n("166"),null;e=u(),r=d(),m(t)?h(t)&&(t.effectTag|=$i):t.stateNode=i(y,e,r,t)}return null;case Ki:(y=t.memoizedProps)||n("165"),t.tag=zi,r=[];e:for((g=t.stateNode)&&(g.return=t);null!==g;){if(g.tag===Hi||g.tag===Wi||g.tag===Vi)n("164");else if(g.tag===qi)r.push(g.type);else if(null!==g.child){g.child.return=g,g=g.child;continue}for(;null===g.sibling;){if(null===g.return||g.return===t)break e;g=g.return}g.sibling.return=g.return,g=g.sibling}return g=y.handler,y=g(y.props,r),t.child=Ii(t,null!==e?e.child:null,y,t.pendingWorkPriority),t.child;case zi:return t.tag=Ki,null;case qi:case Yi:return null;case Vi:return t.effectTag|=$i,f(t),null;case Fi:n("167");default:n("156")}}}}function ue(e){return function(t){try{return e(t)}catch(e){}}}function ce(e,t){function r(e){var r=e.ref;if(null!==r)try{r(null)}catch(r){t(e,r)}}function o(e){return e.tag===oa||e.tag===na||e.tag===aa}function i(e){for(var t=e;;)if(s(t),null!==t.child&&t.tag!==aa)t.child.return=t,t=t.child;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}}function a(e){for(var t=e,r=!1,o=void 0,a=void 0;;){if(!r){r=t.return;e:for(;;){switch(null===r&&n("160"),r.tag){case oa:o=r.stateNode,a=!1;break e;case na:case aa:o=r.stateNode.containerInfo,a=!0;break e}r=r.return}r=!0}if(t.tag===oa||t.tag===ia)i(t),a?g(o,t.stateNode):y(o,t.stateNode);else if(t.tag===aa?o=t.stateNode.containerInfo:s(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return,t.tag===aa&&(r=!1)}t.sibling.return=t.return,t=t.sibling}}function s(e){switch("function"==typeof ua&&ua(e),e.tag){case ra:r(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(r){t(e,r)}break;case oa:r(e);break;case sa:i(e.stateNode);break;case aa:a(e)}}var l=e.commitMount,u=e.commitUpdate,c=e.resetTextContent,d=e.commitTextUpdate,f=e.appendChild,p=e.appendChildToContainer,h=e.insertBefore,m=e.insertInContainerBefore,y=e.removeChild,g=e.removeChildFromContainer,v=e.getPublicInstance;return{commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(o(t)){var r=t;break e}t=t.return}n("160"),r=void 0}var i=t=void 0;switch(r.tag){case oa:t=r.stateNode,i=!1;break;case na:case aa:t=r.stateNode.containerInfo,i=!0;break;default:n("161")}r.effectTag&pa&&(c(t),r.effectTag&=~pa);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||o(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;r.tag!==oa&&r.tag!==ia;){if(r.effectTag&ca)continue t;if(null===r.child||r.tag===aa)continue t;r.child.return=r,r=r.child}if(!(r.effectTag&ca)){r=r.stateNode;break e}}for(var a=e;;){if(a.tag===oa||a.tag===ia)r?i?m(t,a.stateNode,r):h(t,a.stateNode,r):i?p(t,a.stateNode):f(t,a.stateNode);else if(a.tag!==aa&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===e)break;for(;null===a.sibling;){if(null===a.return||a.return===e)return;a=a.return}a.sibling.return=a.return,a=a.sibling}},commitDeletion:function(e){a(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case ra:break;case oa:var r=t.stateNode;if(null!=r){var o=t.memoizedProps;e=null!==e?e.memoizedProps:o;var i=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&u(r,a,i,e,o,t)}break;case ia:null===t.stateNode&&n("162"),r=t.memoizedProps,d(t.stateNode,null!==e?e.memoizedProps:r,r);break;case na:case aa:break;default:n("163")}},commitLifeCycles:function(e,t){switch(t.tag){case ra:var r=t.stateNode;if(t.effectTag&da)if(null===e)r.props=t.memoizedProps,r.state=t.memoizedState,r.componentDidMount();else{var o=e.memoizedProps;e=e.memoizedState,r.props=t.memoizedProps,r.state=t.memoizedState,r.componentDidUpdate(o,e)}t.effectTag&fa&&null!==t.updateQueue&&la(t,t.updateQueue,r);break;case na:e=t.updateQueue,null!==e&&la(t,e,t.child&&t.child.stateNode);break;case oa:r=t.stateNode,null===e&&t.effectTag&da&&l(r,t.type,t.memoizedProps,t);break;case ia:case aa:break;default:n("163")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var r=e.stateNode;switch(e.tag){case oa:t(v(r));break;default:t(r)}}},commitDetachRef:function(e){null!==(e=e.ref)&&e(null)}}}function de(e){function t(e){return e===ga&&n("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext,i=ha(ga),a=ha(ga),s=ha(ga);return{getHostContext:function(){return t(i.current)},getRootHostContainer:function(){return t(s.current)},popHostContainer:function(e){ma(i,e),ma(a,e),ma(s,e)},popHostContext:function(e){a.current===e&&(ma(i,e),ma(a,e))},pushHostContainer:function(e,t){ya(s,t,e),t=o(t),ya(a,e,e),ya(i,t,e)},pushHostContext:function(e){var n=t(s.current),o=t(i.current);n=r(o,e.type,n),o!==n&&(ya(a,e,e),ya(i,n,e))},resetHostContainer:function(){i.current=ga,s.current=ga}}}function fe(e){function t(e,t){var r=wa();r.stateNode=t,r.return=e,r.effectTag=Ea,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function r(e,t){switch(e.tag){case va:return a(t,e.type,e.pendingProps);case ba:return s(t,e.pendingProps);default:return!1}}function o(e){for(e=e.return;null!==e&&e.tag!==va&&e.tag!==_a;)e=e.return;h=e}var i=e.shouldSetTextContent,a=e.canHydrateInstance,s=e.canHydrateTextInstance,l=e.getNextHydratableSibling,u=e.getFirstHydratableChild,c=e.hydrateInstance,d=e.hydrateTextInstance,f=e.didNotHydrateInstance,p=e.didNotFindHydratableInstance;if(e=e.didNotFindHydratableTextInstance,!(a&&s&&l&&u&&c&&d&&f&&p&&e))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){n("175")},prepareToHydrateHostTextInstance:function(){n("176")},popHydrationState:function(){return!1}};var h=null,m=null,y=!1;return{enterHydrationState:function(e){return m=u(e.stateNode.containerInfo),h=e,y=!0},resetHydrationState:function(){m=h=null,y=!1},tryToClaimNextHydratableInstance:function(e){if(y){var n=m;if(n){if(!r(e,n)){if(!(n=l(n))||!r(e,n))return e.effectTag|=Ta,y=!1,void(h=e);t(h,m)}e.stateNode=n,h=e,m=u(n)}else e.effectTag|=Ta,y=!1,h=e}},prepareToHydrateHostInstance:function(e,t,r){return t=c(e.stateNode,e.type,e.memoizedProps,t,r,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return d(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==h)return!1;if(!y)return o(e),y=!0,!1;var r=e.type;if(e.tag!==va||"head"!==r&&"body"!==r&&!i(r,e.memoizedProps))for(r=m;r;)t(e,r),r=l(r);return o(e),m=h?l(e.stateNode):null,!0}}}function pe(e){function t(){for(;null!==z&&z.current.pendingWorkPriority===xa;){z.isScheduled=!1;var e=z.nextScheduledRoot;if(z.nextScheduledRoot=null,z===q)return q=z=null,W=xa,null;z=e}e=z;for(var t=null,r=xa;null!==e;)e.current.pendingWorkPriority!==xa&&(r===xa||r>e.current.pendingWorkPriority)&&(r=e.current.pendingWorkPriority,t=e),e=e.nextScheduledRoot;null!==t?(W=r,Ca(),$a(),T(),H=ka(t.current,r),t!==oe&&(ne=0,oe=t)):(W=xa,oe=H=null)}function r(r){ee=!0,K=null;var o=r.stateNode;if(o.current===r&&n("177"),W!==Oa&&W!==Pa||ne++,Ra.current=null,r.effectTag>Ma)if(null!==r.lastEffect){r.lastEffect.nextEffect=r;var i=r.firstEffect}else i=r;else i=r.firstEffect;for(I(),V=i;null!==V;){var a=!1,s=void 0;try{for(;null!==V;){var l=V.effectTag;if(l&Ha&&e.resetTextContent(V.stateNode),l&Ka){var u=V.alternate;null!==u&&P(u)}switch(l&~(Wa|Va|Ha|Ka|Ma)){case Fa:k(V),V.effectTag&=~Fa;break;case Ba:k(V),V.effectTag&=~Fa,A(V.alternate,V);break;case Ua:A(V.alternate,V);break;case Ga:te=!0,j(V),te=!1}V=V.nextEffect}}catch(e){a=!0,s=e}a&&(null===V&&n("178"),d(V,s),null!==V&&(V=V.nextEffect))}for(N(),o.current=r,V=i;null!==V;){o=!1,i=void 0;try{for(;null!==V;){var c=V.effectTag;if(c&(Ua|Wa)&&x(V.alternate,V),c&Ka&&O(V),c&Va)switch(a=V,s=void 0,null!==X&&(s=X.get(a),X.delete(a),null==s&&null!==a.alternate&&(a=a.alternate,s=X.get(a),X.delete(a))),null==s&&n("184"),a.tag){case Xa:a.stateNode.componentDidCatch(s.error,{componentStack:s.componentStack});break;case za:null===J&&(J=s.error);break;default:n("157")}var f=V.nextEffect;V.nextEffect=null,V=f}}catch(e){o=!0,i=e}o&&(null===V&&n("178"),d(V,i),null!==V&&(V=V.nextEffect))}ee=!1,"function"==typeof Aa&&Aa(r.stateNode),$&&($.forEach(g),$=null),t()}function o(e){for(;;){var t=R(e.alternate,e,W),r=e.return,n=e.sibling,o=e;if(!(o.pendingWorkPriority!==xa&&o.pendingWorkPriority>W)){for(var i=Qa(o),a=o.child;null!==a;)i=ja(i,a.pendingWorkPriority),a=a.sibling;o.pendingWorkPriority=i}if(null!==t)return t;if(null!==r&&(null===r.firstEffect&&(r.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==r.lastEffect&&(r.lastEffect.nextEffect=e.firstEffect),r.lastEffect=e.lastEffect),e.effectTag>Ma&&(null!==r.lastEffect?r.lastEffect.nextEffect=e:r.firstEffect=e,r.lastEffect=e)),null!==n)return n;if(null===r){K=e;break}e=r}return null}function i(e){var t=S(e.alternate,e,W);return null===t&&(t=o(e)),Ra.current=null,t}function a(e){var t=C(e.alternate,e,W);return null===t&&(t=o(e)),Ra.current=null,t}function s(e){c(Ia,e)}function l(){if(null!==X&&0<X.size&&W===Pa)for(;null!==H;){var e=H;if(null===(H=null!==X&&(X.has(e)||null!==e.alternate&&X.has(e.alternate))?a(H):i(H))&&(null===K&&n("179"),M=Pa,r(K),M=W,null===X||0===X.size||W!==Pa))break}}function u(e,o){if(null!==K?(M=Pa,r(K),l()):null===H&&t(),!(W===xa||W>e)){M=W;e:for(;;){if(W<=Pa)for(;null!==H&&!(null===(H=i(H))&&(null===K&&n("179"),M=Pa,r(K),M=W,l(),W===xa||W>e||W>Pa)););else if(null!==o)for(;null!==H&&!U;)if(1<o.timeRemaining()){if(null===(H=i(H)))if(null===K&&n("179"),1<o.timeRemaining()){if(M=Pa,r(K),M=W,l(),W===xa||W>e||W<La)break}else U=!0}else U=!0;switch(W){case Oa:case Pa:if(W<=e)continue e;break e;case La:case Da:case Ia:if(null===o)break e;if(!U&&W<=e)continue e;break e;case xa:break e;default:n("181")}}}}function c(e,t){F&&n("182"),F=!0;var r=M,o=!1,i=null;try{u(e,t)}catch(e){o=!0,i=e}for(;o;){if(Z){J=i;break}var l=H;if(null===l)Z=!0;else{var c=d(l,i);if(null===c&&n("183"),!Z){try{o=c,i=e,c=t;for(var f=o;null!==l;){switch(l.tag){case Xa:Sa(l);break;case qa:E(l);break;case za:_(l);break;case Ya:_(l)}if(l===f||l.alternate===f)break;l=l.return}H=a(o),u(i,c)}catch(e){o=!0,i=e;continue}break}}}if(M=r,null!==t&&(Y=!1),W>Pa&&!Y&&(L(s),Y=!0),e=J,Z=U=F=!1,oe=Q=X=J=null,ne=0,null!==e)throw e}function d(e,t){var r=Ra.current=null,n=!1,o=!1,i=null;if(e.tag===za)r=e,p(e)&&(Z=!0);else for(var a=e.return;null!==a&&null===r;){if(a.tag===Xa?"function"==typeof a.stateNode.componentDidCatch&&(n=!0,i=f(a),r=a,o=!0):a.tag===za&&(r=a),p(a)){if(te||null!==$&&($.has(a)||null!==a.alternate&&$.has(a.alternate)))return null;r=null,o=!1}a=a.return}if(null!==r){null===Q&&(Q=new Set),Q.add(r);var s="";a=e;do{e:switch(a.tag){case po:case ho:case mo:case yo:var l=a._debugOwner,u=a._debugSource,c=f(a),d=null;l&&(d=f(l)),l=u,c="\n    in "+(c||"Unknown")+(l?" (at "+l.fileName.replace(/^.*[\\\/]/,"")+":"+l.lineNumber+")":d?" (created by "+d+")":"");break e;default:c=""}s+=c,a=a.return}while(a);a=s,e=f(e),null===X&&(X=new Map),t={componentName:e,componentStack:a,error:t,errorBoundary:n?r.stateNode:null,errorBoundaryFound:n,errorBoundaryName:i,willRetry:o},X.set(r,t);try{console.error(t.error)}catch(e){console.error(e)}return ee?(null===$&&($=new Set),$.add(r)):g(r),r}return null===J&&(J=t),null}function p(e){return null!==Q&&(Q.has(e)||null!==e.alternate&&Q.has(e.alternate))}function h(e,t){return m(e,t,!1)}function m(e,t){ne>re&&(Z=!0,n("185")),!F&&t<=W&&(H=null);for(var r=!0;null!==e&&r;){if(r=!1,(e.pendingWorkPriority===xa||e.pendingWorkPriority>t)&&(r=!0,e.pendingWorkPriority=t),null!==e.alternate&&(e.alternate.pendingWorkPriority===xa||e.alternate.pendingWorkPriority>t)&&(r=!0,e.alternate.pendingWorkPriority=t),null===e.return){if(e.tag!==za)break;var o=e.stateNode;if(t===xa||o.isScheduled||(o.isScheduled=!0,q?q.nextScheduledRoot=o:z=o,q=o),!F)switch(t){case Oa:G?c(Oa,null):c(Pa,null);break;case Pa:B||n("186");break;default:Y||(L(s),Y=!0)}}e=e.return}}function y(e,t){var r=M;return r===xa&&(r=!D||e.internalContextTag&Na||t?Da:Oa),r===Oa&&(F||B)?Pa:r}function g(e){m(e,Pa,!0)}var v=de(e),b=fe(e),_=v.popHostContainer,E=v.popHostContext,T=v.resetHostContainer,w=se(e,v,b,h,y),S=w.beginWork,C=w.beginFailedWork,R=le(e,v,b).completeWork;v=ce(e,d);var k=v.commitPlacement,j=v.commitDeletion,A=v.commitWork,x=v.commitLifeCycles,O=v.commitAttachRef,P=v.commitDetachRef,L=e.scheduleDeferredCallback,D=e.useSyncScheduling,I=e.prepareForCommit,N=e.resetAfterCommit,M=xa,F=!1,U=!1,B=!1,G=!1,H=null,W=xa,V=null,K=null,z=null,q=null,Y=!1,X=null,Q=null,$=null,J=null,Z=!1,ee=!1,te=!1,re=1e3,ne=0,oe=null;return{scheduleUpdate:h,getPriorityContext:y,batchedUpdates:function(e,t){var r=B;B=!0;try{return e(t)}finally{B=r,F||B||c(Pa,null)}},unbatchedUpdates:function(e){var t=G,r=B;G=B,B=!1;try{return e()}finally{B=r,G=t}},flushSync:function(e){var t=B,r=M;B=!0,M=Oa;try{return e()}finally{B=t,M=r,F&&n("187"),c(Pa,null)}},deferredUpdates:function(e){var t=M;M=Da;try{return e()}finally{M=t}}}}function he(){n("196")}function me(e){return e?(e=Yt.get(e),"number"==typeof e.tag?he(e):e._processChildContext(e._context)):_t}function ye(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ge(e,t){var r=ye(e);e=0;for(var n;r;){if(r.nodeType===is){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ye(r)}}function ve(){return!as&&yt.canUseDOM&&(as="textContent"in document.documentElement?"textContent":"innerText"),as}function be(){n("211")}function _e(){n("212")}function Ee(e){if(null==e)return null;if(e.nodeType===ds)return e;var t=Yt.get(e);if(t)return"number"==typeof t.tag?be(t):_e(t);"function"==typeof e.render?n("188"):n("213",Object.keys(e))}function Te(e){if(void 0!==e._hostParent)return e._hostParent;if("number"==typeof e.tag){do{e=e.return}while(e&&e.tag!==fs);if(e)return e}return null}function we(e,t){for(var r=0,n=e;n;n=Te(n))r++;n=0;for(var o=t;o;o=Te(o))n++;for(;0<r-n;)e=Te(e),r--;for(;0<n-r;)t=Te(t),n--;for(;r--;){if(e===t||e===t.alternate)return e;e=Te(e),t=Te(t)}return null}function Se(e,t,r){(t=hs(e,r.dispatchConfig.phasedRegistrationNames[t]))&&(r._dispatchListeners=C(r._dispatchListeners,t),r._dispatchInstances=C(r._dispatchInstances,e))}function Ce(e){e&&e.dispatchConfig.phasedRegistrationNames&&ps.traverseTwoPhase(e._targetInst,Se,e)}function Re(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;t=t?ps.getParentInstance(t):null,ps.traverseTwoPhase(t,Se,e)}}function ke(e,t,r){e&&r&&r.dispatchConfig.registrationName&&(t=hs(e,r.dispatchConfig.registrationName))&&(r._dispatchListeners=C(r._dispatchListeners,t),r._dispatchInstances=C(r._dispatchInstances,e))}function je(e){e&&e.dispatchConfig.registrationName&&ke(e._targetInst,null,e)}function Ae(e,t,r,n){this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=r,e=this.constructor.Interface;for(var o in e)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(r):"target"===o?this.target=n:this[o]=r[o]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?bt.thatReturnsTrue:bt.thatReturnsFalse,this.isPropagationStopped=bt.thatReturnsFalse,this}function xe(e,t,r,n){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,r,n),o}return new this(e,t,r,n)}function Oe(e){e instanceof this||n("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Pe(e){e.eventPool=[],e.getPooled=xe,e.release=Oe}function Le(e,t,r,n){return Ae.call(this,e,t,r,n)}function De(e,t,r,n){return Ae.call(this,e,t,r,n)}function Ie(e,t){switch(e){case"topKeyUp":return-1!==Es.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Ne(e){return e=e.detail,"object"==typeof e&&"data"in e?e.data:null}function Me(e,t){switch(e){case"topCompositionEnd":return Ne(t);case"topKeyPress":return 32!==t.which?null:(xs=!0,js);case"topTextInput":return e=t.data,e===js&&xs?null:e;default:return null}}function Fe(e,t){if(Os)return"topCompositionEnd"===e||!Ts&&Ie(e,t)?(e=vs.getData(),vs.reset(),Os=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return ks?null:t.data;default:return null}}function Ue(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ls[e.type]:"textarea"===t}function Be(e,t,r){return e=Ae.getPooled(Ds.change,e,t,r),e.type="change",dr.enqueueStateRestore(r),ms.accumulateTwoPhaseDispatches(e),e}function Ge(e){_r.enqueueEvents(e),_r.processEventQueue(!1)}function He(e){var t=qt.getNodeFromInstance(e);if(Jr.updateValueIfChanged(t))return e}function We(e,t){if("topChange"===e)return t}function Ve(){Is&&(Is.detachEvent("onpropertychange",Ke),Ns=Is=null)}function Ke(e){"value"===e.propertyName&&He(Ns)&&(e=Be(Ns,e,w(e)),pr.batchedUpdates(Ge,e))}function ze(e,t,r){"topFocus"===e?(Ve(),Is=t,Ns=r,Is.attachEvent("onpropertychange",Ke)):"topBlur"===e&&Ve()}function qe(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return He(Ns)}function Ye(e,t){if("topClick"===e)return He(t)}function Xe(e,t){if("topInput"===e||"topChange"===e)return He(t)}function Qe(e,t,r,n){return Ae.call(this,e,t,r,n)}function $e(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Us[e])&&!!t[e]}function Je(){return $e}function Ze(e,t,r,n){return Ae.call(this,e,t,r,n)}function et(e,t){if(Ys||null==Ks||Ks!==St())return null;var r=Ks;return"selectionStart"in r&&cs.hasSelectionCapabilities(r)?r={start:r.selectionStart,end:r.selectionEnd}:window.getSelection?(r=window.getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}):r=void 0,qs&&Et(qs,r)?null:(qs=r,e=Ae.getPooled(Vs.select,zs,e,t),e.type="select",e.target=Ks,ms.accumulateTwoPhaseDispatches(e),e)}function tt(e,t,r,n){return Ae.call(this,e,t,r,n)}function rt(e,t,r,n){return Ae.call(this,e,t,r,n)}function nt(e,t,r,n){return Ae.call(this,e,t,r,n)}function ot(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,32<=e||13===e?e:0}function it(e,t,r,n){return Ae.call(this,e,t,r,n)}function at(e,t,r,n){return Ae.call(this,e,t,r,n)}function st(e,t,r,n){return Ae.call(this,e,t,r,n)}function lt(e,t,r,n){return Ae.call(this,e,t,r,n)}function ut(e,t,r,n){return Ae.call(this,e,t,r,n)}function ct(e){return e[1].toUpperCase()}function dt(e){return!(!e||e.nodeType!==pl&&e.nodeType!==yl&&e.nodeType!==gl&&(e.nodeType!==ml||" react-mount-point-unstable "!==e.nodeValue))}function ft(e){return!(!(e=e?e.nodeType===yl?e.documentElement:e.firstChild:null)||e.nodeType!==pl||!e.hasAttribute(vl))}function pt(e,t,r,o,i){dt(r)||n("200");var a=r._reactRootContainer;if(a)Il.updateContainer(t,a,e,i);else{if(!o&&!ft(r))for(o=void 0;o=r.lastChild;)r.removeChild(o);var s=Il.createContainer(r);a=r._reactRootContainer=s,Il.unbatchedUpdates(function(){Il.updateContainer(t,s,e,i)})}return Il.getPublicRootInstance(a)}function ht(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return dt(t)||n("200"),bo.createPortal(e,t,null,r)}var mt=r(/*! react */"./node_modules/react/index.js");r(/*! fbjs/lib/invariant */"./node_modules/fbjs/lib/invariant.js");var yt=r(/*! fbjs/lib/ExecutionEnvironment */"./node_modules/fbjs/lib/ExecutionEnvironment.js"),gt=r(/*! object-assign */"./node_modules/object-assign/index.js"),vt=r(/*! fbjs/lib/EventListener */"./node_modules/fbjs/lib/EventListener.js"),bt=r(/*! fbjs/lib/emptyFunction */"./node_modules/fbjs/lib/emptyFunction.js"),_t=r(/*! fbjs/lib/emptyObject */"./node_modules/fbjs/lib/emptyObject.js"),Et=r(/*! fbjs/lib/shallowEqual */"./node_modules/fbjs/lib/shallowEqual.js"),Tt=r(/*! fbjs/lib/containsNode */"./node_modules/fbjs/lib/containsNode.js"),wt=r(/*! fbjs/lib/focusNode */"./node_modules/fbjs/lib/focusNode.js"),St=r(/*! fbjs/lib/getActiveElement */"./node_modules/fbjs/lib/getActiveElement.js");mt||n("227");var Ct,Rt,kt={Namespaces:{html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"},getIntrinsicNamespace:o,getChildNamespace:function(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?o(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}},jt=null,At={},xt={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(e){jt&&n("101"),jt=Array.prototype.slice.call(e),i()},injectEventPluginsByName:function(e){var t,r=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];At.hasOwnProperty(t)&&At[t]===o||(At[t]&&n("102",t),At[t]=o,r=!0)}r&&i()}},Ot=xt,Pt={children:!0,dangerouslySetInnerHTML:!0,autoFocus:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,style:!0},Lt={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=Lt,r=e.Properties||{},o=e.DOMAttributeNamespaces||{},i=e.DOMAttributeNames||{};e=e.DOMMutationMethods||{};for(var a in r){Dt.properties.hasOwnProperty(a)&&n("48",a);var l=a.toLowerCase(),u=r[a];l={attributeName:l,attributeNamespace:null,propertyName:a,mutationMethod:null,mustUseProperty:s(u,t.MUST_USE_PROPERTY),hasBooleanValue:s(u,t.HAS_BOOLEAN_VALUE),hasNumericValue:s(u,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:s(u,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:s(u,t.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:s(u,t.HAS_STRING_BOOLEAN_VALUE)},1>=l.hasBooleanValue+l.hasNumericValue+l.hasOverloadedBooleanValue||n("50",a),i.hasOwnProperty(a)&&(l.attributeName=i[a]),o.hasOwnProperty(a)&&(l.attributeNamespace=o[a]),e.hasOwnProperty(a)&&(l.mutationMethod=e[a]),Dt.properties[a]=l}}},Dt={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",ATTRIBUTE_NAME_CHAR:":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},shouldSetAttribute:function(e,t){if(Dt.isReservedProp(e)||!("o"!==e[0]&&"O"!==e[0]||"n"!==e[1]&&"N"!==e[1]))return!1;if(null===t)return!0;switch(typeof t){case"boolean":return Dt.shouldAttributeAcceptBooleanValue(e);case"undefined":case"number":case"string":case"object":return!0;default:return!1}},getPropertyInfo:function(e){return Dt.properties.hasOwnProperty(e)?Dt.properties[e]:null},shouldAttributeAcceptBooleanValue:function(e){if(Dt.isReservedProp(e))return!0;var t=Dt.getPropertyInfo(e);return t?t.hasBooleanValue||t.hasStringBooleanValue||t.hasOverloadedBooleanValue:"data-"===(e=e.toLowerCase().slice(0,5))||"aria-"===e},isReservedProp:function(e){return Pt.hasOwnProperty(e)},injection:Lt},It=Dt,Nt={IndeterminateComponent:0,FunctionalComponent:1,ClassComponent:2,HostRoot:3,HostPortal:4,HostComponent:5,HostText:6,CoroutineComponent:7,CoroutineHandlerPhase:8,YieldComponent:9,Fragment:10},Mt={ELEMENT_NODE:1,TEXT_NODE:3,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_FRAGMENT_NODE:11},Ft=Nt.HostComponent,Ut=Nt.HostText,Bt=Mt.ELEMENT_NODE,Gt=Mt.COMMENT_NODE,Ht=It.ID_ATTRIBUTE_NAME,Wt={hasCachedChildNodes:1},Vt=Math.random().toString(36).slice(2),Kt="__reactInternalInstance$"+Vt,zt="__reactEventHandlers$"+Vt,qt={getClosestInstanceFromNode:d,getInstanceFromNode:function(e){var t=e[Kt];return t?t.tag===Ft||t.tag===Ut?t:t._hostNode===e?t:null:(t=d(e),null!=t&&t._hostNode===e?t:null)},getNodeFromInstance:function(e){if(e.tag===Ft||e.tag===Ut)return e.stateNode;if(void 0===e._hostNode&&n("33"),e._hostNode)return e._hostNode;for(var t=[];!e._hostNode;)t.push(e),e._hostParent||n("34"),e=e._hostParent;for(;t.length;e=t.pop())c(e,e._hostNode);return e._hostNode},precacheChildNodes:c,precacheNode:u,uncacheNode:function(e){var t=e._hostNode;t&&(delete t[Kt],e._hostNode=null)},precacheFiberNode:function(e,t){t[Kt]=e},getFiberCurrentPropsFromNode:function(e){return e[zt]||null},updateFiberProps:function(e,t){e[zt]=t}},Yt={remove:function(e){e._reactInternalFiber=void 0},get:function(e){return e._reactInternalFiber},has:function(e){return void 0!==e._reactInternalFiber},set:function(e,t){e._reactInternalFiber=t}},Xt={ReactCurrentOwner:mt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner},Qt={NoEffect:0,PerformedWork:1,Placement:2,Update:4,PlacementAndUpdate:6,Deletion:8,ContentReset:16,Callback:32,Err:64,Ref:128},$t=Nt.HostComponent,Jt=Nt.HostRoot,Zt=Nt.HostPortal,er=Nt.HostText,tr=Qt.NoEffect,rr=Qt.Placement,nr={isFiberMounted:function(e){return 2===p(e)},isMounted:function(e){return!!(e=Yt.get(e))&&2===p(e)},findCurrentFiberUsingSlowPath:m,findCurrentHostFiber:function(e){if(!(e=m(e)))return null;for(var t=e;;){if(t.tag===$t||t.tag===er)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null},findCurrentHostFiberWithNoPortals:function(e){if(!(e=m(e)))return null;for(var t=e;;){if(t.tag===$t||t.tag===er)return t;if(t.child&&t.tag!==Zt)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}},or={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(e){"function"!=typeof e.invokeGuardedCallback&&n("197"),y=e.invokeGuardedCallback}},invokeGuardedCallback:function(e,t,r,n,o,i,a,s,l){y.apply(or,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,r,n,o,i,a,s,l){if(or.invokeGuardedCallback.apply(this,arguments),or.hasCaughtError()){var u=or.clearCaughtError();or._hasRethrowError||(or._hasRethrowError=!0,or._rethrowError=u)}},rethrowCaughtError:function(){return g.apply(or,arguments)},hasCaughtError:function(){return or._hasCaughtError},clearCaughtError:function(){if(or._hasCaughtError){var e=or._caughtError;return or._caughtError=null,or._hasCaughtError=!1,e}n("198")}},ir=or,ar={isEndish:function(e){return"topMouseUp"===e||"topTouchEnd"===e||"topTouchCancel"===e},isMoveish:function(e){return"topMouseMove"===e||"topTouchMove"===e},isStartish:function(e){return"topMouseDown"===e||"topTouchStart"===e},executeDirectDispatch:function(e){var t=e._dispatchListeners,r=e._dispatchInstances;return Array.isArray(t)&&n("103"),e.currentTarget=t?ar.getNodeFromInstance(r):null,t=t?t(e):null,e.currentTarget=null,e._dispatchListeners=null,e._dispatchInstances=null,t},executeDispatchesInOrder:function(e,t){var r=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(r))for(var o=0;o<r.length&&!e.isPropagationStopped();o++)v(e,t,r[o],n[o]);else r&&v(e,t,r,n);e._dispatchListeners=null,e._dispatchInstances=null},executeDispatchesInOrderStopAtTrue:function(e){e:{var t=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(t)){for(var n=0;n<t.length&&!e.isPropagationStopped();n++)if(t[n](e,r[n])){t=r[n];break e}}else if(t&&t(e,r)){t=r;break e}t=null}return e._dispatchInstances=null,e._dispatchListeners=null,t},hasDispatches:function(e){return!!e._dispatchListeners},getFiberCurrentPropsFromNode:function(e){return Ct.getFiberCurrentPropsFromNode(e)},getInstanceFromNode:function(e){return Ct.getInstanceFromNode(e)},getNodeFromInstance:function(e){return Ct.getNodeFromInstance(e)},injection:{injectComponentTree:function(e){Ct=e}}},sr=ar,lr=null,ur=null,cr=null,dr={injection:{injectFiberControlledHostComponent:function(e){lr=e}},enqueueStateRestore:function(e){ur?cr?cr.push(e):cr=[e]:ur=e},restoreStateIfNeeded:function(){if(ur){var e=ur,t=cr;if(cr=ur=null,b(e),t)for(e=0;e<t.length;e++)b(t[e])}}},fr=!1,pr={batchedUpdates:function(e,t){if(fr)return _(T,e,t);fr=!0;try{return _(T,e,t)}finally{fr=!1,dr.restoreStateIfNeeded()}},injection:{injectStackBatchedUpdates:function(e){_=e},injectFiberBatchedUpdates:function(e){E=e}}},hr=Mt.TEXT_NODE,mr=Nt.HostRoot,yr=[],gr={_enabled:!0,_handleTopLevel:null,setHandleTopLevel:function(e){gr._handleTopLevel=e},setEnabled:function(e){gr._enabled=!!e},isEnabled:function(){return gr._enabled},trapBubbledEvent:function(e,t,r){return r?vt.listen(r,t,gr.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,r){return r?vt.capture(r,t,gr.dispatchEvent.bind(null,e)):null},dispatchEvent:function(e,t){if(gr._enabled){var r=w(t);if(r=qt.getClosestInstanceFromNode(r),null===r||"number"!=typeof r.tag||nr.isFiberMounted(r)||(r=null),yr.length){var n=yr.pop();n.topLevelType=e,n.nativeEvent=t,n.targetInst=r,e=n}else e={topLevelType:e,nativeEvent:t,targetInst:r,ancestors:[]};try{pr.batchedUpdates(S,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>yr.length&&yr.push(e)}}}},vr=gr,br=null,_r={injection:{injectEventPluginOrder:Ot.injectEventPluginOrder,injectEventPluginsByName:Ot.injectEventPluginsByName},getListener:function(e,t){if("number"==typeof e.tag){var r=e.stateNode;if(!r)return null;var o=sr.getFiberCurrentPropsFromNode(r);if(!o)return null;if(r=o[t],x(t,e.type,o))return null}else{if("string"==typeof(o=e._currentElement)||"number"==typeof o||!e._rootNodeID)return null;if(e=o.props,r=e[t],x(t,o.type,e))return null}return r&&"function"!=typeof r&&n("231",t,typeof r),r},extractEvents:function(e,t,r,n){for(var o,i=Ot.plugins,a=0;a<i.length;a++){var s=i[a];s&&(s=s.extractEvents(e,t,r,n))&&(o=C(o,s))}return o},enqueueEvents:function(e){e&&(br=C(br,e))},processEventQueue:function(e){var t=br;br=null,e?R(t,j):R(t,A),br&&n("95"),ir.rethrowCaughtError()}};yt.canUseDOM&&(Rt=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var Er={animationend:P("Animation","AnimationEnd"),animationiteration:P("Animation","AnimationIteration"),animationstart:P("Animation","AnimationStart"),transitionend:P("Transition","TransitionEnd")},Tr={},wr={};yt.canUseDOM&&(wr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Sr={topAbort:"abort",topAnimationEnd:L("animationend")||"animationend",topAnimationIteration:L("animationiteration")||"animationiteration",topAnimationStart:L("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:L("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},Cr={},Rr=0,kr="_reactListenersID"+(""+Math.random()).slice(2),jr=gt({},{handleTopLevel:function(e,t,r,n){e=_r.extractEvents(e,t,r,n),_r.enqueueEvents(e),_r.processEventQueue(!1)}},{setEnabled:function(e){vr&&vr.setEnabled(e)},isEnabled:function(){return!(!vr||!vr.isEnabled())},listenTo:function(e,t){var r=D(t);e=Ot.registrationNameDependencies[e];for(var n=0;n<e.length;n++){var o=e[n];r.hasOwnProperty(o)&&r[o]||("topWheel"===o?O("wheel")?vr.trapBubbledEvent("topWheel","wheel",t):O("mousewheel")?vr.trapBubbledEvent("topWheel","mousewheel",t):vr.trapBubbledEvent("topWheel","DOMMouseScroll",t):"topScroll"===o?vr.trapCapturedEvent("topScroll","scroll",t):"topFocus"===o||"topBlur"===o?(vr.trapCapturedEvent("topFocus","focus",t),vr.trapCapturedEvent("topBlur","blur",t),r.topBlur=!0,r.topFocus=!0):"topCancel"===o?(O("cancel",!0)&&vr.trapCapturedEvent("topCancel","cancel",t),r.topCancel=!0):"topClose"===o?(O("close",!0)&&vr.trapCapturedEvent("topClose","close",t),r.topClose=!0):Sr.hasOwnProperty(o)&&vr.trapBubbledEvent(o,Sr[o],t),r[o]=!0)}},isListeningToAllDependencies:function(e,t){t=D(t),e=Ot.registrationNameDependencies[e];for(var r=0;r<e.length;r++){var n=e[r];if(!t.hasOwnProperty(n)||!t[n])return!1}return!0},trapBubbledEvent:function(e,t,r){return vr.trapBubbledEvent(e,t,r)},trapCapturedEvent:function(e,t,r){return vr.trapCapturedEvent(e,t,r)}}),Ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},xr=["Webkit","ms","Moz","O"];Object.keys(Ar).forEach(function(e){xr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ar[t]=Ar[e]})});var Or={isUnitlessNumber:Ar,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}},Pr=Or.isUnitlessNumber,Lr=!1;if(yt.canUseDOM){var Dr=document.createElement("div").style;try{Dr.font=""}catch(e){Lr=!0}}var Ir,Nr={createDangerousStringForStyles:function(){},setValueForStyles:function(e,t){e=e.style;for(var r in t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=r,i=t[r];if(o=null==i||"boolean"==typeof i||""===i?"":n||"number"!=typeof i||0===i||Pr.hasOwnProperty(o)&&Pr[o]?(""+i).trim():i+"px","float"===r&&(r="cssFloat"),n)e.setProperty(r,o);else if(o)e[r]=o;else if(n=Lr&&Or.shorthandPropertyExpansions[r])for(var a in n)e[a]="";else e[r]=""}}},Mr=new RegExp("^["+It.ATTRIBUTE_NAME_START_CHAR+"]["+It.ATTRIBUTE_NAME_CHAR+"]*$"),Fr={},Ur={},Br={setAttributeForID:function(e,t){e.setAttribute(It.ID_ATTRIBUTE_NAME,t)},setAttributeForRoot:function(e){e.setAttribute(It.ROOT_ATTRIBUTE_NAME,"")},getValueForProperty:function(){},getValueForAttribute:function(){},setValueForProperty:function(e,t,r){var n=It.getPropertyInfo(t);if(n&&It.shouldSetAttribute(t,r)){var o=n.mutationMethod;o?o(e,r):null==r||n.hasBooleanValue&&!r||n.hasNumericValue&&isNaN(r)||n.hasPositiveNumericValue&&1>r||n.hasOverloadedBooleanValue&&!1===r?Br.deleteValueForProperty(e,t):n.mustUseProperty?e[n.propertyName]=r:(t=n.attributeName,(o=n.attributeNamespace)?e.setAttributeNS(o,t,""+r):n.hasBooleanValue||n.hasOverloadedBooleanValue&&!0===r?e.setAttribute(t,""):e.setAttribute(t,""+r))}else Br.setValueForAttribute(e,t,It.shouldSetAttribute(t,r)?r:null)},setValueForAttribute:function(e,t,r){I(t)&&(null==r?e.removeAttribute(t):e.setAttribute(t,""+r))},deleteValueForAttribute:function(e,t){e.removeAttribute(t)},deleteValueForProperty:function(e,t){var r=It.getPropertyInfo(t);r?(t=r.mutationMethod)?t(e,void 0):r.mustUseProperty?e[r.propertyName]=!r.hasBooleanValue&&"":e.removeAttribute(r.attributeName):e.removeAttribute(t)}},Gr=Br,Hr=Xt.ReactDebugCurrentFrame,Wr={current:null,phase:null,resetCurrentFiber:function(){Hr.getCurrentStack=null,Wr.current=null,Wr.phase=null},setCurrentFiber:function(e,t){Hr.getCurrentStack=N,Wr.current=e,Wr.phase=t},getCurrentFiberOwnerName:function(){return null},getCurrentFiberStackAddendum:N},Vr=Wr,Kr={getHostProps:function(e,t){var r=t.value,n=t.checked;return gt({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=r?r:e._wrapperState.initialValue,checked:null!=n?n:e._wrapperState.initialChecked})},initWrapperState:function(e,t){var r=t.defaultValue;e._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}},updateWrapper:function(e,t){var r=t.checked;null!=r&&Gr.setValueForProperty(e,"checked",r||!1),r=t.value,null!=r?0===r&&""===e.value?e.value="0":"number"===t.type?(t=parseFloat(e.value)||0,(r!=t||r==t&&e.value!=r)&&(e.value=""+r)):e.value!==""+r&&(e.value=""+r):(null==t.value&&null!=t.defaultValue&&e.defaultValue!==""+t.defaultValue&&(e.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked))},postMountWrapper:function(e,t){switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":e.value="",e.value=e.defaultValue;break;default:e.value=e.value}t=e.name,""!==t&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)},restoreControlledState:function(e,t){Kr.updateWrapper(e,t);var r=t.name;if("radio"===t.type&&null!=r){for(t=e;t.parentNode;)t=t.parentNode;for(r=t.querySelectorAll("input[name="+JSON.stringify(""+r)+'][type="radio"]'),t=0;t<r.length;t++){var o=r[t];if(o!==e&&o.form===e.form){var i=qt.getFiberCurrentPropsFromNode(o);i||n("90"),Kr.updateWrapper(o,i)}}}}},zr=Kr,qr={validateProps:function(){},postMountWrapper:function(e,t){null!=t.value&&e.setAttribute("value",t.value)},getHostProps:function(e,t){return e=gt({children:void 0},t),(t=M(t.children))&&(e.children=t),e}},Yr={getHostProps:function(e,t){return gt({},t,{value:void 0})},initWrapperState:function(e,t){var r=t.value;e._wrapperState={initialValue:null!=r?r:t.defaultValue,wasMultiple:!!t.multiple}},postMountWrapper:function(e,t){e.multiple=!!t.multiple;var r=t.value;null!=r?F(e,!!t.multiple,r):null!=t.defaultValue&&F(e,!!t.multiple,t.defaultValue)},postUpdateWrapper:function(e,t){e._wrapperState.initialValue=void 0;var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!t.multiple;var n=t.value;null!=n?F(e,!!t.multiple,n):r!==!!t.multiple&&(null!=t.defaultValue?F(e,!!t.multiple,t.defaultValue):F(e,!!t.multiple,t.multiple?[]:""))},restoreControlledState:function(e,t){var r=t.value;null!=r&&F(e,!!t.multiple,r)}},Xr={getHostProps:function(e,t){return null!=t.dangerouslySetInnerHTML&&n("91"),gt({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})},initWrapperState:function(e,t){var r=t.value,o=r;null==r&&(r=t.defaultValue,t=t.children,null!=t&&(null!=r&&n("92"),Array.isArray(t)&&(1>=t.length||n("93"),t=t[0]),r=""+t),null==r&&(r=""),o=r),e._wrapperState={initialValue:""+o}},updateWrapper:function(e,t){var r=t.value;null!=r&&(r=""+r,r!==e.value&&(e.value=r),null==t.defaultValue&&(e.defaultValue=r)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)},postMountWrapper:function(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)},restoreControlledState:function(e,t){Xr.updateWrapper(e,t)}},Qr=Xr,$r=gt({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),Jr={_getTrackerFromNode:function(e){return e._valueTracker},track:function(e){e._valueTracker||(e._valueTracker=G(e))},updateValueIfChanged:function(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=B(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)},stopTracking:function(e){(e=e._valueTracker)&&e.stopTracking()}},Zr=kt.Namespaces,en=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,r,n,o){MSApp.execUnsafeLocalFunction(function(){return e(t,r)})}:e}(function(e,t){if(e.namespaceURI!==Zr.svg||"innerHTML"in e)e.innerHTML=t;else for(Ir=Ir||document.createElement("div"),Ir.innerHTML="<svg>"+t+"</svg>",t=Ir.firstChild;t.firstChild;)e.appendChild(t.firstChild)}),tn=/["'&<>]/,rn=Mt.TEXT_NODE;yt.canUseDOM&&("textContent"in document.documentElement||(W=function(e,t){if(e.nodeType===rn)e.nodeValue=t;else{if("boolean"==typeof t||"number"==typeof t)t=""+t;else{t=""+t;var r=tn.exec(t);if(r){var n,o="",i=0;for(n=r.index;n<t.length;n++){switch(t.charCodeAt(n)){case 34:r="&quot;";break;case 38:r="&amp;";break;case 39:r="&#x27;";break;case 60:r="&lt;";break;case 62:r="&gt;";break;default:continue}i!==n&&(o+=t.substring(i,n)),i=n+1,o+=r}t=i!==n?o+t.substring(i,n):o}}en(e,t)}}));var nn=W,on=(Vr.getCurrentFiberOwnerName,Mt.DOCUMENT_NODE),an=Mt.DOCUMENT_FRAGMENT_NODE,sn=jr.listenTo,ln=Ot.registrationNameModules,un=kt.Namespaces.html,cn=kt.getIntrinsicNamespace,dn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},fn={createElement:function(e,t,r,n){return r=r.nodeType===on?r:r.ownerDocument,n===un&&(n=cn(e)),n===un?"script"===e?(e=r.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?r.createElement(e,{is:t.is}):r.createElement(e):e=r.createElementNS(n,e),e},createTextNode:function(e,t){return(t.nodeType===on?t:t.ownerDocument).createTextNode(e)},setInitialProperties:function(e,t,r,n){var o=H(t,r);switch(t){case"iframe":case"object":jr.trapBubbledEvent("topLoad","load",e);var i=r;break;case"video":case"audio":for(i in dn)dn.hasOwnProperty(i)&&jr.trapBubbledEvent(i,dn[i],e);i=r;break;case"source":jr.trapBubbledEvent("topError","error",e),i=r;break;case"img":case"image":jr.trapBubbledEvent("topError","error",e),jr.trapBubbledEvent("topLoad","load",e),i=r;break;case"form":jr.trapBubbledEvent("topReset","reset",e),jr.trapBubbledEvent("topSubmit","submit",e),i=r;break;case"details":jr.trapBubbledEvent("topToggle","toggle",e),i=r;break;case"input":zr.initWrapperState(e,r),i=zr.getHostProps(e,r),jr.trapBubbledEvent("topInvalid","invalid",e),V(n,"onChange");break;case"option":qr.validateProps(e,r),i=qr.getHostProps(e,r);break;case"select":Yr.initWrapperState(e,r),i=Yr.getHostProps(e,r),jr.trapBubbledEvent("topInvalid","invalid",e),V(n,"onChange");break;case"textarea":Qr.initWrapperState(e,r),i=Qr.getHostProps(e,r),jr.trapBubbledEvent("topInvalid","invalid",e),V(n,"onChange");break;default:i=r}U(t,i);var a,s=i;for(a in s)if(s.hasOwnProperty(a)){var l=s[a];"style"===a?Nr.setValueForStyles(e,l):"dangerouslySetInnerHTML"===a?null!=(l=l?l.__html:void 0)&&en(e,l):"children"===a?"string"==typeof l?nn(e,l):"number"==typeof l&&nn(e,""+l):"suppressContentEditableWarning"!==a&&(ln.hasOwnProperty(a)?null!=l&&V(n,a):o?Gr.setValueForAttribute(e,a,l):null!=l&&Gr.setValueForProperty(e,a,l))}switch(t){case"input":Jr.track(e),zr.postMountWrapper(e,r);break;case"textarea":Jr.track(e),Qr.postMountWrapper(e,r);break;case"option":qr.postMountWrapper(e,r);break;case"select":Yr.postMountWrapper(e,r);break;default:"function"==typeof i.onClick&&(e.onclick=bt)}},diffProperties:function(e,t,r,n,o){var i=null;switch(t){case"input":r=zr.getHostProps(e,r),n=zr.getHostProps(e,n),i=[];break;case"option":r=qr.getHostProps(e,r),n=qr.getHostProps(e,n),i=[];break;case"select":r=Yr.getHostProps(e,r),n=Yr.getHostProps(e,n),i=[];break;case"textarea":r=Qr.getHostProps(e,r),n=Qr.getHostProps(e,n),i=[];break;default:"function"!=typeof r.onClick&&"function"==typeof n.onClick&&(e.onclick=bt)}U(t,n);var a,s;e=null;for(a in r)if(!n.hasOwnProperty(a)&&r.hasOwnProperty(a)&&null!=r[a])if("style"===a)for(s in t=r[a])t.hasOwnProperty(s)&&(e||(e={}),e[s]="");else"dangerouslySetInnerHTML"!==a&&"children"!==a&&"suppressContentEditableWarning"!==a&&(ln.hasOwnProperty(a)?i||(i=[]):(i=i||[]).push(a,null));for(a in n){var l=n[a];if(t=null!=r?r[a]:void 0,n.hasOwnProperty(a)&&l!==t&&(null!=l||null!=t))if("style"===a)if(t){for(s in t)!t.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(e||(e={}),e[s]="");for(s in l)l.hasOwnProperty(s)&&t[s]!==l[s]&&(e||(e={}),e[s]=l[s])}else e||(i||(i=[]),i.push(a,e)),e=l;else"dangerouslySetInnerHTML"===a?(l=l?l.__html:void 0,t=t?t.__html:void 0,null!=l&&t!==l&&(i=i||[]).push(a,""+l)):"children"===a?t===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(a,""+l):"suppressContentEditableWarning"!==a&&(ln.hasOwnProperty(a)?(null!=l&&V(o,a),i||t===l||(i=[])):(i=i||[]).push(a,l))}return e&&(i=i||[]).push("style",e),i},updateProperties:function(e,t,r,n,o){H(r,n),n=H(r,o);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?Nr.setValueForStyles(e,s):"dangerouslySetInnerHTML"===a?en(e,s):"children"===a?nn(e,s):n?null!=s?Gr.setValueForAttribute(e,a,s):Gr.deleteValueForAttribute(e,a):null!=s?Gr.setValueForProperty(e,a,s):Gr.deleteValueForProperty(e,a)}switch(r){case"input":zr.updateWrapper(e,o),Jr.updateValueIfChanged(e);break;case"textarea":Qr.updateWrapper(e,o);break;case"select":Yr.postUpdateWrapper(e,o)}},diffHydratedProperties:function(e,t,r,n,o){switch(t){case"iframe":case"object":jr.trapBubbledEvent("topLoad","load",e);break;case"video":case"audio":for(var i in dn)dn.hasOwnProperty(i)&&jr.trapBubbledEvent(i,dn[i],e);break;case"source":jr.trapBubbledEvent("topError","error",e);break;case"img":case"image":jr.trapBubbledEvent("topError","error",e),jr.trapBubbledEvent("topLoad","load",e);break;case"form":jr.trapBubbledEvent("topReset","reset",e),jr.trapBubbledEvent("topSubmit","submit",e);break;case"details":jr.trapBubbledEvent("topToggle","toggle",e);break;case"input":zr.initWrapperState(e,r),jr.trapBubbledEvent("topInvalid","invalid",e),V(o,"onChange");break;case"option":qr.validateProps(e,r);break;case"select":Yr.initWrapperState(e,r),jr.trapBubbledEvent("topInvalid","invalid",e),V(o,"onChange");break;case"textarea":Qr.initWrapperState(e,r),jr.trapBubbledEvent("topInvalid","invalid",e),V(o,"onChange")}U(t,r),n=null;for(var a in r)r.hasOwnProperty(a)&&(i=r[a],"children"===a?"string"==typeof i?e.textContent!==i&&(n=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(n=["children",""+i]):ln.hasOwnProperty(a)&&null!=i&&V(o,a));switch(t){case"input":Jr.track(e),zr.postMountWrapper(e,r);break;case"textarea":Jr.track(e),Qr.postMountWrapper(e,r);break;case"select":case"option":break;default:"function"==typeof r.onClick&&(e.onclick=bt)}return n},diffHydratedText:function(e,t){return e.nodeValue!==t},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,r){switch(t){case"input":zr.restoreControlledState(e,r);break;case"textarea":Qr.restoreControlledState(e,r);break;case"select":Yr.restoreControlledState(e,r)}}},pn=void 0;if(yt.canUseDOM)if("function"!=typeof requestIdleCallback){var hn=null,mn=null,yn=!1,gn=!1,vn=0,bn=33,_n=33,En={timeRemaining:"object"==typeof performance&&"function"==typeof performance.now?function(){return vn-performance.now()}:function(){return vn-Date.now()}},Tn="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){e.source===window&&e.data===Tn&&(yn=!1,e=mn,mn=null,null!==e&&e(En))},!1);var wn=function(e){gn=!1;var t=e-vn+_n;t<_n&&bn<_n?(8>t&&(t=8),_n=t<bn?bn:t):bn=t,vn=e+_n,yn||(yn=!0,window.postMessage(Tn,"*")),t=hn,hn=null,null!==t&&t(e)};pn=function(e){return mn=e,gn||(gn=!0,requestAnimationFrame(wn)),0}}else pn=requestIdleCallback;else pn=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0}})}),0};var Sn,Cn,Rn={rIC:pn},kn={enableAsyncSubtreeAPI:!0},jn={NoWork:0,SynchronousPriority:1,TaskPriority:2,HighPriority:3,LowPriority:4,OffscreenPriority:5},An=Qt.Callback,xn=jn.NoWork,On=jn.SynchronousPriority,Pn=jn.TaskPriority,Ln=Nt.ClassComponent,Dn=Nt.HostRoot,In=void 0,Nn=void 0,Mn={addUpdate:function(e,t,r,n){X(e,{priorityLevel:n,partialState:t,callback:r,isReplace:!1,isForced:!1,isTopLevelUnmount:!1,next:null})},addReplaceUpdate:function(e,t,r,n){X(e,{priorityLevel:n,partialState:t,callback:r,isReplace:!0,isForced:!1,isTopLevelUnmount:!1,next:null})},addForceUpdate:function(e,t,r){X(e,{priorityLevel:r,partialState:null,callback:t,isReplace:!1,isForced:!0,isTopLevelUnmount:!1,next:null})},getUpdatePriority:function(e){var t=e.updateQueue;return null===t||e.tag!==Ln&&e.tag!==Dn?xn:null!==t.first?t.first.priorityLevel:xn},addTopLevelUpdate:function(e,t,r,n){var o=null===t.element;t={priorityLevel:n,partialState:t,callback:r,isReplace:!1,isForced:!1,isTopLevelUnmount:o,next:null},e=X(e,t),o&&(o=In,r=Nn,null!==o&&null!==t.next&&(t.next=null,o.last=t),null!==r&&null!==e&&null!==e.next&&(e.next=null,r.last=t))},beginUpdateQueue:function(e,t,r,n,o,i,a){null!==e&&e.updateQueue===r&&(r=t.updateQueue={first:r.first,last:r.last,callbackList:null,hasForceUpdate:!1}),e=r.callbackList;for(var s=r.hasForceUpdate,l=!0,u=r.first;null!==u&&0>=K(u.priorityLevel,a);){r.first=u.next,null===r.first&&(r.last=null);var c;u.isReplace?(o=Q(u,n,o,i),l=!0):(c=Q(u,n,o,i))&&(o=l?gt({},o,c):gt(o,c),l=!1),u.isForced&&(s=!0),null===u.callback||u.isTopLevelUnmount&&null!==u.next||(e=null!==e?e:[],e.push(u.callback),t.effectTag|=An),u=u.next}return r.callbackList=e,r.hasForceUpdate=s,null!==r.first||null!==e||s||(t.updateQueue=null),o},commitCallbacks:function(e,t,r){if(null!==(e=t.callbackList))for(t.callbackList=null,t=0;t<e.length;t++){var o=e[t];"function"!=typeof o&&n("191",o),o.call(r)}}},Fn=[],Un=-1,Bn={createCursor:function(e){return{current:e}},isEmpty:function(){return-1===Un},pop:function(e){0>Un||(e.current=Fn[Un],Fn[Un]=null,Un--)},push:function(e,t){Un++,Fn[Un]=e.current,e.current=t},reset:function(){for(;-1<Un;)Fn[Un]=null,Un--}},Gn=nr.isFiberMounted,Hn=Nt.ClassComponent,Wn=Nt.HostRoot,Vn=Bn.createCursor,Kn=Bn.pop,zn=Bn.push,qn=Vn(_t),Yn=Vn(!1),Xn=_t,Qn={getUnmaskedContext:function(e){return J(e)?Xn:qn.current},cacheContext:$,getMaskedContext:function(e,t){var r=e.type.contextTypes;if(!r)return _t;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in r)i[o]=t[o];return n&&$(e,t,i),i},hasContextChanged:function(){return Yn.current},isContextConsumer:function(e){return e.tag===Hn&&null!=e.type.contextTypes},isContextProvider:J,popContextProvider:function(e){J(e)&&(Kn(Yn,e),Kn(qn,e))},popTopLevelContextObject:function(e){Kn(Yn,e),Kn(qn,e)},pushTopLevelContextObject:function(e,t,r){null!=qn.cursor&&n("168"),zn(qn,t,e),zn(Yn,r,e)},processChildContext:Z,pushContextProvider:function(e){if(!J(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||_t,Xn=qn.current,zn(qn,t,e),zn(Yn,Yn.current,e),!0},invalidateContextProvider:function(e,t){var r=e.stateNode;if(r||n("169"),t){var o=Z(e,Xn);r.__reactInternalMemoizedMergedChildContext=o,Kn(Yn,e),Kn(qn,e),zn(qn,o,e)}else Kn(Yn,e);zn(Yn,t,e)},resetContext:function(){Xn=_t,qn.current=_t,Yn.current=!1},findCurrentUnmaskedContext:function(e){for(Gn(e)&&e.tag===Hn?void 0:n("170");e.tag!==Wn;){if(J(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||n("171")}return e.stateNode.context}},$n={NoContext:0,AsyncUpdates:1},Jn=Nt.IndeterminateComponent,Zn=Nt.ClassComponent,eo=Nt.HostRoot,to=Nt.HostComponent,ro=Nt.HostText,no=Nt.HostPortal,oo=Nt.CoroutineComponent,io=Nt.YieldComponent,ao=Nt.Fragment,so=jn.NoWork,lo=$n.NoContext,uo=Qt.NoEffect,co={createWorkInProgress:function(e,t){var r=e.alternate;return null===r?(r=new ee(e.tag,e.key,e.internalContextTag),r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.effectTag=uo,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.pendingWorkPriority=t,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r},createHostRootFiber:function(){return new ee(eo,null,lo)},createFiberFromElement:function(e,t,r){return t=te(e.type,e.key,t),t.pendingProps=e.props,t.pendingWorkPriority=r,t},createFiberFromFragment:function(e,t,r){return t=new ee(ao,null,t),t.pendingProps=e,t.pendingWorkPriority=r,t},createFiberFromText:function(e,t,r){return t=new ee(ro,null,t),t.pendingProps=e,t.pendingWorkPriority=r,t},createFiberFromElementType:te,createFiberFromHostInstanceForDeletion:function(){var e=new ee(to,null,lo);return e.type="DELETED",e},createFiberFromCoroutine:function(e,t,r){return t=new ee(oo,e.key,t),t.type=e.handler,t.pendingProps=e,t.pendingWorkPriority=r,t},createFiberFromYield:function(e,t){return new ee(io,null,t)},createFiberFromPortal:function(e,t,r){return t=new ee(no,e.key,t),t.pendingProps=e.children||[],t.pendingWorkPriority=r,t.stateNode={containerInfo:e.containerInfo,implementation:e.implementation},t},largerPriority:function(e,t){return e!==so&&(t===so||t>e)?e:t}},fo=co.createHostRootFiber,po=Nt.IndeterminateComponent,ho=Nt.FunctionalComponent,mo=Nt.ClassComponent,yo=Nt.HostComponent;"function"==typeof Symbol&&Symbol.for?(Sn=Symbol.for("react.coroutine"),Cn=Symbol.for("react.yield")):(Sn=60104,Cn=60105);var go={createCoroutine:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Sn,key:null==n?null:""+n,children:e,handler:t,props:r}},createYield:function(e){return{$$typeof:Cn,value:e}},isCoroutine:function(e){return"object"==typeof e&&null!==e&&e.$$typeof===Sn},isYield:function(e){return"object"==typeof e&&null!==e&&e.$$typeof===Cn},REACT_YIELD_TYPE:Cn,REACT_COROUTINE_TYPE:Sn},vo="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.portal")||60106,bo={createPortal:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:vo,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}},isPortal:function(e){return"object"==typeof e&&null!==e&&e.$$typeof===vo},REACT_PORTAL_TYPE:vo},_o=go.REACT_COROUTINE_TYPE,Eo=go.REACT_YIELD_TYPE,To=bo.REACT_PORTAL_TYPE,wo=co.createWorkInProgress,So=co.createFiberFromElement,Co=co.createFiberFromFragment,Ro=co.createFiberFromText,ko=co.createFiberFromCoroutine,jo=co.createFiberFromYield,Ao=co.createFiberFromPortal,xo=Array.isArray,Oo=Nt.FunctionalComponent,Po=Nt.ClassComponent,Lo=Nt.HostText,Do=Nt.HostPortal,Io=Nt.CoroutineComponent,No=Nt.YieldComponent,Mo=Nt.Fragment,Fo=Qt.NoEffect,Uo=Qt.Placement,Bo=Qt.Deletion,Go="function"==typeof Symbol&&Symbol.iterator,Ho="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,Wo=ie(!0,!0),Vo=ie(!1,!0),Ko=ie(!1,!1),zo={reconcileChildFibers:Wo,reconcileChildFibersInPlace:Vo,mountChildFibersInPlace:Ko,cloneChildFibers:function(e,t){if(null!==e&&t.child!==e.child&&n("153"),null!==t.child){e=t.child;var r=wo(e,e.pendingWorkPriority);for(r.pendingProps=e.pendingProps,t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,r=r.sibling=wo(e,e.pendingWorkPriority),r.pendingProps=e.pendingProps,r.return=t;r.sibling=null}}},qo=Qt.Update,Yo=$n.AsyncUpdates,Xo=Qn.cacheContext,Qo=Qn.getMaskedContext,$o=Qn.getUnmaskedContext,Jo=Qn.isContextConsumer,Zo=Mn.addUpdate,ei=Mn.addReplaceUpdate,ti=Mn.addForceUpdate,ri=Mn.beginUpdateQueue,ni=Qn.hasContextChanged,oi=nr.isMounted,ii=zo.mountChildFibersInPlace,ai=zo.reconcileChildFibers,si=zo.reconcileChildFibersInPlace,li=zo.cloneChildFibers,ui=Mn.beginUpdateQueue,ci=Qn.getMaskedContext,di=Qn.getUnmaskedContext,fi=Qn.hasContextChanged,pi=Qn.pushContextProvider,hi=Qn.pushTopLevelContextObject,mi=Qn.invalidateContextProvider,yi=Nt.IndeterminateComponent,gi=Nt.FunctionalComponent,vi=Nt.ClassComponent,bi=Nt.HostRoot,_i=Nt.HostComponent,Ei=Nt.HostText,Ti=Nt.HostPortal,wi=Nt.CoroutineComponent,Si=Nt.CoroutineHandlerPhase,Ci=Nt.YieldComponent,Ri=Nt.Fragment,ki=jn.NoWork,ji=jn.OffscreenPriority,Ai=Qt.PerformedWork,xi=Qt.Placement,Oi=Qt.ContentReset,Pi=Qt.Err,Li=Qt.Ref,Di=Xt.ReactCurrentOwner,Ii=zo.reconcileChildFibers,Ni=Qn.popContextProvider,Mi=Qn.popTopLevelContextObject,Fi=Nt.IndeterminateComponent,Ui=Nt.FunctionalComponent,Bi=Nt.ClassComponent,Gi=Nt.HostRoot,Hi=Nt.HostComponent,Wi=Nt.HostText,Vi=Nt.HostPortal,Ki=Nt.CoroutineComponent,zi=Nt.CoroutineHandlerPhase,qi=Nt.YieldComponent,Yi=Nt.Fragment,Xi=Qt.Placement,Qi=Qt.Ref,$i=Qt.Update,Ji=jn.OffscreenPriority,Zi=null,ea=null,ta={injectInternals:function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!t.supportsFiber)return!0;try{var r=t.inject(e);Zi=ue(function(e){return t.onCommitFiberRoot(r,e)}),ea=ue(function(e){return t.onCommitFiberUnmount(r,e)})}catch(e){}return!0},onCommitRoot:function(e){"function"==typeof Zi&&Zi(e)},onCommitUnmount:function(e){"function"==typeof ea&&ea(e)}},ra=Nt.ClassComponent,na=Nt.HostRoot,oa=Nt.HostComponent,ia=Nt.HostText,aa=Nt.HostPortal,sa=Nt.CoroutineComponent,la=Mn.commitCallbacks,ua=ta.onCommitUnmount,ca=Qt.Placement,da=Qt.Update,fa=Qt.Callback,pa=Qt.ContentReset,ha=Bn.createCursor,ma=Bn.pop,ya=Bn.push,ga={},va=Nt.HostComponent,ba=Nt.HostText,_a=Nt.HostRoot,Ea=Qt.Deletion,Ta=Qt.Placement,wa=co.createFiberFromHostInstanceForDeletion,Sa=Qn.popContextProvider,Ca=Bn.reset,Ra=Xt.ReactCurrentOwner,ka=co.createWorkInProgress,ja=co.largerPriority,Aa=ta.onCommitRoot,xa=jn.NoWork,Oa=jn.SynchronousPriority,Pa=jn.TaskPriority,La=jn.HighPriority,Da=jn.LowPriority,Ia=jn.OffscreenPriority,Na=$n.AsyncUpdates,Ma=Qt.PerformedWork,Fa=Qt.Placement,Ua=Qt.Update,Ba=Qt.PlacementAndUpdate,Ga=Qt.Deletion,Ha=Qt.ContentReset,Wa=Qt.Callback,Va=Qt.Err,Ka=Qt.Ref,za=Nt.HostRoot,qa=Nt.HostComponent,Ya=Nt.HostPortal,Xa=Nt.ClassComponent,Qa=Mn.getUpdatePriority,$a=Qn.resetContext;me._injectFiber=function(e){he=e};var Ja=Mn.addTopLevelUpdate,Za=Qn.findCurrentUnmaskedContext,es=Qn.isContextProvider,ts=Qn.processChildContext,rs=Nt.HostComponent,ns=nr.findCurrentHostFiber,os=nr.findCurrentHostFiberWithNoPortals;me._injectFiber(function(e){var t=Za(e);return es(e)?ts(e,t,!1):t});var is=Mt.TEXT_NODE,as=null,ss={getOffsets:function(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var r=t.anchorNode,n=t.anchorOffset,o=t.focusNode,i=t.focusOffset,a=t.getRangeAt(0);try{a.startContainer.nodeType,a.endContainer.nodeType}catch(e){return null}t=t.anchorNode===t.focusNode&&t.anchorOffset===t.focusOffset?0:a.toString().length;var s=a.cloneRange();return s.selectNodeContents(e),s.setEnd(a.startContainer,a.startOffset),e=s.startContainer===s.endContainer&&s.startOffset===s.endOffset?0:s.toString().length,a=e+t,t=document.createRange(),t.setStart(r,n),t.setEnd(o,i),r=t.collapsed,{start:r?a:e,end:r?e:a}},setOffsets:function(e,t){if(window.getSelection){var r=window.getSelection(),n=e[ve()].length,o=Math.min(t.start,n);if(t=void 0===t.end?o:Math.min(t.end,n),!r.extend&&o>t&&(n=t,t=o,o=n),n=ge(e,o),e=ge(e,t),n&&e){var i=document.createRange();i.setStart(n.node,n.offset),r.removeAllRanges(),o>t?(r.addRange(i),r.extend(e.node,e.offset)):(i.setEnd(e.node,e.offset),r.addRange(i))}}}},ls=Mt.ELEMENT_NODE,us={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=St();return{focusedElem:e,selectionRange:us.hasSelectionCapabilities(e)?us.getSelection(e):null}},restoreSelection:function(e){var t=St(),r=e.focusedElem;if(e=e.selectionRange,t!==r&&Tt(document.documentElement,r)){for(us.hasSelectionCapabilities(r)&&us.setSelection(r,e),t=[],e=r;e=e.parentNode;)e.nodeType===ls&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(wt(r),r=0;r<t.length;r++)e=t[r],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}},getSelection:function(e){return("selectionStart"in e?{start:e.selectionStart,end:e.selectionEnd}:ss.getOffsets(e))||{start:0,end:0}},setSelection:function(e,t){var r=t.start,n=t.end;void 0===n&&(n=r),"selectionStart"in e?(e.selectionStart=r,e.selectionEnd=Math.min(n,e.value.length)):ss.setOffsets(e,t)}},cs=us,ds=Mt.ELEMENT_NODE;Ee._injectFiber=function(e){be=e},Ee._injectStack=function(e){_e=e};var fs=Nt.HostComponent,ps={isAncestor:function(e,t){for(;t;){if(e===t||e===t.alternate)return!0;t=Te(t)}return!1},getLowestCommonAncestor:we,getParentInstance:function(e){return Te(e)},traverseTwoPhase:function(e,t,r){for(var n=[];e;)n.push(e),e=Te(e);for(e=n.length;0<e--;)t(n[e],"captured",r);for(e=0;e<n.length;e++)t(n[e],"bubbled",r)},traverseEnterLeave:function(e,t,r,n,o){for(var i=e&&t?we(e,t):null,a=[];e&&e!==i;)a.push(e),e=Te(e);for(e=[];t&&t!==i;)e.push(t),t=Te(t);for(t=0;t<a.length;t++)r(a[t],"bubbled",n);for(t=e.length;0<t--;)r(e[t],"captured",o)}},hs=_r.getListener,ms={accumulateTwoPhaseDispatches:function(e){R(e,Ce)},accumulateTwoPhaseDispatchesSkipTarget:function(e){R(e,Re)},accumulateDirectDispatches:function(e){R(e,je)},accumulateEnterLeaveDispatches:function(e,t,r,n){ps.traverseEnterLeave(r,n,ke,e,t)}},ys={_root:null,_startText:null,_fallbackText:null},gs={initialize:function(e){return ys._root=e,ys._startText=gs.getText(),!0},reset:function(){ys._root=null,ys._startText=null,ys._fallbackText=null},getData:function(){if(ys._fallbackText)return ys._fallbackText;var e,t,r=ys._startText,n=r.length,o=gs.getText(),i=o.length;for(e=0;e<n&&r[e]===o[e];e++);var a=n-e;for(t=1;t<=a&&r[n-t]===o[i-t];t++);return ys._fallbackText=o.slice(e,1<t?1-t:void 0),ys._fallbackText},getText:function(){return"value"in ys._root?ys._root.value:ys._root[ve()]}},vs=gs,bs="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),_s={type:null,target:null,currentTarget:bt.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};gt(Ae.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=bt.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=bt.thatReturnsTrue)},persist:function(){this.isPersistent=bt.thatReturnsTrue},isPersistent:bt.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<bs.length;t++)this[bs[t]]=null}}),Ae.Interface=_s,Ae.augmentClass=function(e,t){function r(){}r.prototype=this.prototype;var n=new r;gt(n,e.prototype),e.prototype=n,e.prototype.constructor=e,e.Interface=gt({},this.Interface,t),e.augmentClass=this.augmentClass,Pe(e)},Pe(Ae),Ae.augmentClass(Le,{data:null}),Ae.augmentClass(De,{data:null});var Es=[9,13,27,32],Ts=yt.canUseDOM&&"CompositionEvent"in window,ws=null;yt.canUseDOM&&"documentMode"in document&&(ws=document.documentMode);var Ss;if(Ss=yt.canUseDOM&&"TextEvent"in window&&!ws){var Cs=window.opera;Ss=!("object"==typeof Cs&&"function"==typeof Cs.version&&12>=parseInt(Cs.version(),10))}var Rs=Ss,ks=yt.canUseDOM&&(!Ts||ws&&8<ws&&11>=ws),js=String.fromCharCode(32),As={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},xs=!1,Os=!1,Ps={eventTypes:As,extractEvents:function(e,t,r,n){var o;if(Ts)e:{switch(e){case"topCompositionStart":var i=As.compositionStart;break e;case"topCompositionEnd":i=As.compositionEnd;break e;case"topCompositionUpdate":i=As.compositionUpdate;break e}i=void 0}else Os?Ie(e,r)&&(i=As.compositionEnd):"topKeyDown"===e&&229===r.keyCode&&(i=As.compositionStart);return i?(ks&&(Os||i!==As.compositionStart?i===As.compositionEnd&&Os&&(o=vs.getData()):Os=vs.initialize(n)),i=Le.getPooled(i,t,r,n),o?i.data=o:null!==(o=Ne(r))&&(i.data=o),ms.accumulateTwoPhaseDispatches(i),o=i):o=null,(e=Rs?Me(e,r):Fe(e,r))?(t=De.getPooled(As.beforeInput,t,r,n),t.data=e,ms.accumulateTwoPhaseDispatches(t)):t=null,[o,t]}},Ls={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},Ds={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}},Is=null,Ns=null,Ms=!1;yt.canUseDOM&&(Ms=O("input")&&(!document.documentMode||9<document.documentMode));var Fs={eventTypes:Ds,_isInputEventSupported:Ms,extractEvents:function(e,t,r,n){var o=t?qt.getNodeFromInstance(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=We;else if(Ue(o))if(Ms)a=Xe;else{a=qe;var s=ze}else!(i=o.nodeName)||"input"!==i.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(a=Ye);if(a&&(a=a(e,t)))return Be(a,r,n);s&&s(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&(e=""+o.value,o.getAttribute("value")!==e&&o.setAttribute("value",e))}};Ae.augmentClass(Qe,{view:function(e){return e.view?e.view:(e=w(e),e.window===e?e:(e=e.ownerDocument)?e.defaultView||e.parentWindow:window)},detail:function(e){return e.detail||0}});var Us={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};Qe.augmentClass(Ze,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Je,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}});var Bs={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Gs={eventTypes:Bs,extractEvents:function(e,t,r,n){if("topMouseOver"===e&&(r.relatedTarget||r.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=n.window===n?n:(o=n.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=r.relatedTarget||r.toElement)?qt.getClosestInstanceFromNode(t):null):e=null,e===t)return null;var i=null==e?o:qt.getNodeFromInstance(e);o=null==t?o:qt.getNodeFromInstance(t);var a=Ze.getPooled(Bs.mouseLeave,e,r,n);return a.type="mouseleave",a.target=i,a.relatedTarget=o,r=Ze.getPooled(Bs.mouseEnter,t,r,n),r.type="mouseenter",r.target=o,r.relatedTarget=i,ms.accumulateEnterLeaveDispatches(a,r,e,t),[a,r]}},Hs=Mt.DOCUMENT_NODE,Ws=yt.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Vs={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Ks=null,zs=null,qs=null,Ys=!1,Xs=jr.isListeningToAllDependencies,Qs={eventTypes:Vs,extractEvents:function(e,t,r,n){var o=n.window===n?n.document:n.nodeType===Hs?n:n.ownerDocument;if(!o||!Xs("onSelect",o))return null;switch(o=t?qt.getNodeFromInstance(t):window,e){case"topFocus":(Ue(o)||"true"===o.contentEditable)&&(Ks=o,zs=t,qs=null);break;case"topBlur":qs=zs=Ks=null;break;case"topMouseDown":Ys=!0;break;case"topContextMenu":case"topMouseUp":return Ys=!1,et(r,n);case"topSelectionChange":if(Ws)break;case"topKeyDown":case"topKeyUp":return et(r,n)}return null}};Ae.augmentClass(tt,{animationName:null,elapsedTime:null,pseudoElement:null}),Ae.augmentClass(rt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Qe.augmentClass(nt,{relatedTarget:null});var $s={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Js={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};Qe.augmentClass(it,{key:function(e){if(e.key){var t=$s[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?(e=ot(e),13===e?"Enter":String.fromCharCode(e)):"keydown"===e.type||"keyup"===e.type?Js[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Je,charCode:function(e){return"keypress"===e.type?ot(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ot(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ze.augmentClass(at,{dataTransfer:null}),Qe.augmentClass(st,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Je}),Ae.augmentClass(lt,{propertyName:null,elapsedTime:null,pseudoElement:null}),Ze.augmentClass(ut,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null});var Zs={},el={};"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),r="on"+t;t="top"+t,r={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[t]},Zs[e]=r,el[t]=r});var tl={eventTypes:Zs,extractEvents:function(e,t,r,o){var i=el[e];if(!i)return null;switch(e){case"topAbort":case"topCancel":case"topCanPlay":case"topCanPlayThrough":case"topClose":case"topDurationChange":case"topEmptied":case"topEncrypted":case"topEnded":case"topError":case"topInput":case"topInvalid":case"topLoad":case"topLoadedData":case"topLoadedMetadata":case"topLoadStart":case"topPause":case"topPlay":case"topPlaying":case"topProgress":case"topRateChange":case"topReset":case"topSeeked":case"topSeeking":case"topStalled":case"topSubmit":case"topSuspend":case"topTimeUpdate":case"topToggle":case"topVolumeChange":case"topWaiting":var a=Ae;break;case"topKeyPress":if(0===ot(r))return null;case"topKeyDown":case"topKeyUp":a=it;break;case"topBlur":case"topFocus":a=nt;break;case"topClick":if(2===r.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":a=Ze;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":a=at;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":a=st;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":a=tt;break;case"topTransitionEnd":a=lt;break;case"topScroll":a=Qe;break;case"topWheel":a=ut;break;case"topCopy":case"topCut":case"topPaste":a=rt}return a||n("86",e),e=a.getPooled(i,t,r,o),ms.accumulateTwoPhaseDispatches(e),e}};vr.setHandleTopLevel(jr.handleTopLevel),_r.injection.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),sr.injection.injectComponentTree(qt),_r.injection.injectEventPluginsByName({SimpleEventPlugin:tl,EnterLeaveEventPlugin:Gs,ChangeEventPlugin:Fs,SelectEventPlugin:Qs,BeforeInputEventPlugin:Ps});var rl=It.injection.MUST_USE_PROPERTY,nl=It.injection.HAS_BOOLEAN_VALUE,ol=It.injection.HAS_NUMERIC_VALUE,il=It.injection.HAS_POSITIVE_NUMERIC_VALUE,al=It.injection.HAS_STRING_BOOLEAN_VALUE,sl={Properties:{allowFullScreen:nl,allowTransparency:al,async:nl,autoPlay:nl,capture:nl,checked:rl|nl,cols:il,contentEditable:al,controls:nl,default:nl,defer:nl,disabled:nl,download:It.injection.HAS_OVERLOADED_BOOLEAN_VALUE,draggable:al,formNoValidate:nl,hidden:nl,loop:nl,multiple:rl|nl,muted:rl|nl,noValidate:nl,open:nl,playsInline:nl,readOnly:nl,required:nl,reversed:nl,rows:il,rowSpan:ol,scoped:nl,seamless:nl,selected:rl|nl,size:il,start:ol,span:il,spellCheck:al,style:0,itemScope:nl,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:al},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(e,t){if(null==t)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t)}}},ll=It.injection.HAS_STRING_BOOLEAN_VALUE,ul={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},cl={Properties:{autoReverse:ll,externalResourcesRequired:ll,preserveAlpha:ll},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:ul.xlink,xlinkArcrole:ul.xlink,xlinkHref:ul.xlink,xlinkRole:ul.xlink,xlinkShow:ul.xlink,xlinkTitle:ul.xlink,xlinkType:ul.xlink,xmlBase:ul.xml,xmlLang:ul.xml,xmlSpace:ul.xml}},dl=/[\-\:]([a-z])/g;"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(e){var t=e.replace(dl,ct);cl.Properties[t]=0,cl.DOMAttributeNames[t]=e}),It.injection.injectDOMPropertyConfig(sl),It.injection.injectDOMPropertyConfig(cl);var fl=ta.injectInternals,pl=Mt.ELEMENT_NODE,hl=Mt.TEXT_NODE,ml=Mt.COMMENT_NODE,yl=Mt.DOCUMENT_NODE,gl=Mt.DOCUMENT_FRAGMENT_NODE,vl=It.ROOT_ATTRIBUTE_NAME,bl=kt.getChildNamespace,_l=fn.createElement,El=fn.createTextNode,Tl=fn.setInitialProperties,wl=fn.diffProperties,Sl=fn.updateProperties,Cl=fn.diffHydratedProperties,Rl=fn.diffHydratedText,kl=fn.warnForDeletedHydratableElement,jl=fn.warnForDeletedHydratableText,Al=fn.warnForInsertedHydratedElement,xl=fn.warnForInsertedHydratedText,Ol=qt.precacheFiberNode,Pl=qt.updateFiberProps;dr.injection.injectFiberControlledHostComponent(fn),Ee._injectFiber(function(e){return Il.findHostInstance(e)});var Ll=null,Dl=null,Il=function(e){var t=e.getPublicInstance;e=pe(e);var r=e.scheduleUpdate,n=e.getPriorityContext;return{createContainer:function(e){var t=fo();return e={current:t,containerInfo:e,isScheduled:!1,nextScheduledRoot:null,context:null,pendingContext:null},t.stateNode=e},updateContainer:function(e,t,o,i){var a=t.current;o=me(o),null===t.context?t.context=o:t.pendingContext=o,t=i,i=n(a,kn.enableAsyncSubtreeAPI&&null!=e&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent),e={element:e},Ja(a,e,void 0===t?null:t,i),r(a,i)},batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,flushSync:e.flushSync,getPublicRootInstance:function(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case rs:return t(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){return e=ns(e),null===e?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return e=os(e),null===e?null:e.stateNode}}}({getRootHostContext:function(e){if(e.nodeType===yl)e=(e=e.documentElement)?e.namespaceURI:bl(null,"");else{var t=e.nodeType===ml?e.parentNode:e;e=t.namespaceURI||null,t=t.tagName,e=bl(e,t)}return e},getChildHostContext:function(e,t){return bl(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){Ll=jr.isEnabled(),Dl=cs.getSelectionInformation(),jr.setEnabled(!1)},resetAfterCommit:function(){cs.restoreSelection(Dl),Dl=null,jr.setEnabled(Ll),Ll=null},createInstance:function(e,t,r,n,o){return e=_l(e,t,r,n),Ol(o,e),Pl(e,t),e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,r,n){Tl(e,t,r,n);e:{switch(t){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e}e=!1}return e},prepareUpdate:function(e,t,r,n,o){return wl(e,t,r,n,o)},commitMount:function(e){e.focus()},commitUpdate:function(e,t,r,n,o){Pl(e,o),Sl(e,t,r,n,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},resetTextContent:function(e){e.textContent=""},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,r,n){return e=El(e,t),Ol(n,e),e},commitTextUpdate:function(e,t,r){e.nodeValue=r},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){e.nodeType===ml?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,r){e.insertBefore(t,r)},insertInContainerBefore:function(e,t,r){e.nodeType===ml?e.parentNode.insertBefore(t,r):e.insertBefore(t,r)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){e.nodeType===ml?e.parentNode.removeChild(t):e.removeChild(t)},canHydrateInstance:function(e,t){return e.nodeType===pl&&t===e.nodeName.toLowerCase()},canHydrateTextInstance:function(e,t){return""!==t&&e.nodeType===hl},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&e.nodeType!==pl&&e.nodeType!==hl;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&e.nodeType!==pl&&e.nodeType!==hl;)e=e.nextSibling;return e},hydrateInstance:function(e,t,r,n,o,i){return Ol(i,e),Pl(e,r),Cl(e,t,r,o,n)},hydrateTextInstance:function(e,t,r){return Ol(r,e),Rl(e,t)},didNotHydrateInstance:function(e,t){1===t.nodeType?kl(e,t):jl(e,t)},didNotFindHydratableInstance:function(e,t,r){Al(e,t,r)},didNotFindHydratableTextInstance:function(e,t){xl(e,t)},scheduleDeferredCallback:Rn.rIC,useSyncScheduling:!0});pr.injection.injectFiberBatchedUpdates(Il.batchedUpdates);var Nl={createPortal:ht,hydrate:function(e,t,r){return pt(null,e,t,!0,r)},render:function(e,t,r){return pt(null,e,t,!1,r)},unstable_renderSubtreeIntoContainer:function(e,t,r,o){return null!=e&&Yt.has(e)||n("38"),pt(e,t,r,!1,o)},unmountComponentAtNode:function(e){return dt(e)||n("40"),!!e._reactRootContainer&&(Il.unbatchedUpdates(function(){pt(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},findDOMNode:Ee,unstable_createPortal:ht,unstable_batchedUpdates:pr.batchedUpdates,unstable_deferredUpdates:Il.deferredUpdates,flushSync:Il.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:_r,EventPluginRegistry:Ot,EventPropagators:ms,ReactControlledComponent:dr,ReactDOMComponentTree:qt,ReactDOMEventListener:vr}};fl({findFiberByHostInstance:qt.getClosestInstanceFromNode,findHostInstanceByFiber:Il.findHostInstance,bundleType:0,version:"16.0.0",rendererPackageName:"react-dom"}),e.exports=Nl},"./node_modules/react-dom/index.js":/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(n)}catch(e){console.error(e)}}n(),e.exports=r(/*! ./cjs/react-dom.production.min.js */"./node_modules/react-dom/cjs/react-dom.production.min.js")},"./node_modules/react-hot-loader/index.js":/*!************************************************!*\
  !*** ./node_modules/react-hot-loader/index.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports=r(/*! ./lib/index */"./node_modules/react-hot-loader/lib/index.js")},"./node_modules/react-hot-loader/lib/AppContainer.js":/*!***********************************************************!*\
  !*** ./node_modules/react-hot-loader/lib/AppContainer.js ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";e.exports=r(/*! ./AppContainer.prod */"./node_modules/react-hot-loader/lib/AppContainer.prod.js")},"./node_modules/react-hot-loader/lib/AppContainer.prod.js":/*!****************************************************************!*\
  !*** ./node_modules/react-hot-loader/lib/AppContainer.prod.js ***!
  \****************************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=r(/*! react */"./node_modules/react/index.js"),l=s.Component,u=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"render",value:function(){return this.props.component?s.createElement(this.props.component,this.props.props):s.Children.only(this.props.children)}}]),t}(l);e.exports=u},"./node_modules/react-hot-loader/lib/index.js":/*!****************************************************!*\
  !*** ./node_modules/react-hot-loader/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";e.exports=r(/*! ./index.prod */"./node_modules/react-hot-loader/lib/index.prod.js")},"./node_modules/react-hot-loader/lib/index.prod.js":/*!*********************************************************!*\
  !*** ./node_modules/react-hot-loader/lib/index.prod.js ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";e.exports.AppContainer=r(/*! ./AppContainer */"./node_modules/react-hot-loader/lib/AppContainer.js")},"./node_modules/react-hot-loader/lib/patch.js":/*!****************************************************!*\
  !*** ./node_modules/react-hot-loader/lib/patch.js ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";e.exports=r(/*! ./patch.prod */"./node_modules/react-hot-loader/lib/patch.prod.js")},"./node_modules/react-hot-loader/lib/patch.prod.js":/*!*********************************************************!*\
  !*** ./node_modules/react-hot-loader/lib/patch.prod.js ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict"},"./node_modules/react-hot-loader/patch.js":/*!************************************************!*\
  !*** ./node_modules/react-hot-loader/patch.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){e.exports=r(/*! ./lib/patch */"./node_modules/react-hot-loader/lib/patch.js")},"./node_modules/react-redux/es/components/Provider.js":/*!************************************************************!*\
  !*** ./node_modules/react-redux/es/components/Provider.js ***!
  \************************************************************/
/*! exports provided: createProvider, default */
/*! exports used: createProvider, default */
function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",r=arguments[1],a=r||t+"Subscription",l=function(e){function r(i,a){n(this,r);var s=o(this,e.call(this,i,a));return s[t]=i.store,s}return i(r,e),r.prototype.getChildContext=function(){var e;return e={},e[t]=this[t],e[a]=null,e},r.prototype.render=function(){return s.Children.only(this.props.children)},r}(s.Component);return l.propTypes={store:c.a.isRequired,children:u.a.element.isRequired},l.childContextTypes=(e={},e[t]=c.a.isRequired,e[a]=c.b,e),l}t.a=a;var s=r(/*! react */"./node_modules/react/index.js"),l=(r.n(s),r(/*! prop-types */"./node_modules/prop-types/index.js")),u=r.n(l),c=r(/*! ../utils/PropTypes */"./node_modules/react-redux/es/utils/PropTypes.js");r(/*! ../utils/warning */"./node_modules/react-redux/es/utils/warning.js");t.b=a()},"./node_modules/react-redux/es/components/connectAdvanced.js":/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/components/connectAdvanced.js ***!
  \*******************************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function s(){}function l(e,t){var r={run:function(n){try{var o=e(t.getState(),n);(o!==r.props||r.error)&&(r.shouldComponentUpdate=!0,r.props=o,r.error=null)}catch(e){r.shouldComponentUpdate=!0,r.error=e}}};return r}function u(e){var t,r,u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=u.getDisplayName,f=void 0===c?function(e){return"ConnectAdvanced("+e+")"}:c,_=u.methodName,E=void 0===_?"connectAdvanced":_,T=u.renderCountProp,w=void 0===T?void 0:T,S=u.shouldHandleStateChanges,C=void 0===S||S,R=u.storeKey,k=void 0===R?"store":R,j=u.withRef,A=void 0!==j&&j,x=a(u,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),O=k+"Subscription",P=v++,L=(t={},t[k]=y.a,t[O]=y.b,t),D=(r={},r[O]=y.b,r);return function(t){p()("function"==typeof t,"You must pass a component to the function returned by connect. Instead received "+JSON.stringify(t));var r=t.displayName||t.name||"Component",a=f(r),u=g({},x,{getDisplayName:f,methodName:E,renderCountProp:w,shouldHandleStateChanges:C,storeKey:k,withRef:A,displayName:a,wrappedComponentName:r,WrappedComponent:t}),c=function(r){function c(e,t){n(this,c);var i=o(this,r.call(this,e,t));return i.version=P,i.state={},i.renderCount=0,i.store=e[k]||t[k],i.propsMode=Boolean(e[k]),i.setWrappedInstance=i.setWrappedInstance.bind(i),p()(i.store,'Could not find "'+k+'" in either the context or props of "'+a+'". Either wrap the root component in a <Provider>, or explicitly pass "'+k+'" as a prop to "'+a+'".'),i.initSelector(),i.initSubscription(),i}return i(c,r),c.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return e={},e[O]=t||this.context[O],e},c.prototype.componentDidMount=function(){C&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},c.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},c.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},c.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=s,this.store=null,this.selector.run=s,this.selector.shouldComponentUpdate=!1},c.prototype.getWrappedInstance=function(){return p()(A,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+E+"() call."),this.wrappedInstance},c.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},c.prototype.initSelector=function(){var t=e(this.store.dispatch,u);this.selector=l(t,this.store),this.selector.run(this.props)},c.prototype.initSubscription=function(){if(C){var e=(this.propsMode?this.props:this.context)[O];this.subscription=new m.a(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},c.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},c.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},c.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},c.prototype.addExtraProps=function(e){if(!(A||w||this.propsMode&&this.subscription))return e;var t=g({},e);return A&&(t.ref=this.setWrappedInstance),w&&(t[w]=this.renderCount++),this.propsMode&&this.subscription&&(t[O]=this.subscription),t},c.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(h.createElement)(t,this.addExtraProps(e.props))},c}(h.Component);return c.WrappedComponent=t,c.displayName=a,c.childContextTypes=D,c.contextTypes=L,c.propTypes=L,d()(c,t)}}t.a=u;var c=r(/*! hoist-non-react-statics */"./node_modules/hoist-non-react-statics/index.js"),d=r.n(c),f=r(/*! invariant */"./node_modules/invariant/browser.js"),p=r.n(f),h=r(/*! react */"./node_modules/react/index.js"),m=(r.n(h),r(/*! ../utils/Subscription */"./node_modules/react-redux/es/utils/Subscription.js")),y=r(/*! ../utils/PropTypes */"./node_modules/react-redux/es/utils/PropTypes.js"),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},v=0,b={}},"./node_modules/react-redux/es/connect/connect.js":/*!********************************************************!*\
  !*** ./node_modules/react-redux/es/connect/connect.js ***!
  \********************************************************/
/*! exports provided: createConnect, default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function o(e,t,r){for(var n=t.length-1;n>=0;n--){var o=t[n](e);if(o)return o}return function(t,n){throw new Error("Invalid value of type "+typeof e+" for "+r+" argument when connecting component "+n.wrappedComponentName+".")}}function i(e,t){return e===t}var a=r(/*! ../components/connectAdvanced */"./node_modules/react-redux/es/components/connectAdvanced.js"),s=r(/*! ../utils/shallowEqual */"./node_modules/react-redux/es/utils/shallowEqual.js"),l=r(/*! ./mapDispatchToProps */"./node_modules/react-redux/es/connect/mapDispatchToProps.js"),u=r(/*! ./mapStateToProps */"./node_modules/react-redux/es/connect/mapStateToProps.js"),c=r(/*! ./mergeProps */"./node_modules/react-redux/es/connect/mergeProps.js"),d=r(/*! ./selectorFactory */"./node_modules/react-redux/es/connect/selectorFactory.js"),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};t.a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,r=void 0===t?a.a:t,p=e.mapStateToPropsFactories,h=void 0===p?u.a:p,m=e.mapDispatchToPropsFactories,y=void 0===m?l.a:m,g=e.mergePropsFactories,v=void 0===g?c.a:g,b=e.selectorFactory,_=void 0===b?d.a:b;return function(e,t,a){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=l.pure,c=void 0===u||u,d=l.areStatesEqual,p=void 0===d?i:d,m=l.areOwnPropsEqual,g=void 0===m?s.a:m,b=l.areStatePropsEqual,E=void 0===b?s.a:b,T=l.areMergedPropsEqual,w=void 0===T?s.a:T,S=n(l,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),C=o(e,h,"mapStateToProps"),R=o(t,y,"mapDispatchToProps"),k=o(a,v,"mergeProps");return r(_,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:C,initMapDispatchToProps:R,initMergeProps:k,pure:c,areStatesEqual:p,areOwnPropsEqual:g,areStatePropsEqual:E,areMergedPropsEqual:w},S))}}()},"./node_modules/react-redux/es/connect/mapDispatchToProps.js":/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mapDispatchToProps.js ***!
  \*******************************************************************/
/*! exports provided: whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject, default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e){return"function"==typeof e?Object(s.b)(e,"mapDispatchToProps"):void 0}function o(e){return e?void 0:Object(s.a)(function(e){return{dispatch:e}})}function i(e){return e&&"object"==typeof e?Object(s.a)(function(t){return Object(a.bindActionCreators)(e,t)}):void 0}var a=r(/*! redux */"./node_modules/redux/es/index.js"),s=r(/*! ./wrapMapToProps */"./node_modules/react-redux/es/connect/wrapMapToProps.js");t.a=[n,o,i]},"./node_modules/react-redux/es/connect/mapStateToProps.js":/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mapStateToProps.js ***!
  \****************************************************************/
/*! exports provided: whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing, default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e){return"function"==typeof e?Object(i.b)(e,"mapStateToProps"):void 0}function o(e){return e?void 0:Object(i.a)(function(){return{}})}var i=r(/*! ./wrapMapToProps */"./node_modules/react-redux/es/connect/wrapMapToProps.js");t.a=[n,o]},"./node_modules/react-redux/es/connect/mergeProps.js":/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mergeProps.js ***!
  \***********************************************************/
/*! exports provided: defaultMergeProps, wrapMergePropsFunc, whenMergePropsIsFunction, whenMergePropsIsOmitted, default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t,r){return s({},r,e,t)}function o(e){return function(t,r){var n=(r.displayName,r.pure),o=r.areMergedPropsEqual,i=!1,a=void 0;return function(t,r,s){var l=e(t,r,s);return i?n&&o(l,a)||(a=l):(i=!0,a=l),a}}}function i(e){return"function"==typeof e?o(e):void 0}function a(e){return e?void 0:function(){return n}}var s=(r(/*! ../utils/verifyPlainObject */"./node_modules/react-redux/es/utils/verifyPlainObject.js"),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e});t.a=[i,a]},"./node_modules/react-redux/es/connect/selectorFactory.js":/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/selectorFactory.js ***!
  \****************************************************************/
/*! exports provided: impureFinalPropsSelectorFactory, pureFinalPropsSelectorFactory, default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function o(e,t,r,n){return function(o,i){return r(e(o,i),t(n,i),i)}}function i(e,t,r,n,o){function i(o,i){return h=o,m=i,y=e(h,m),g=t(n,m),v=r(y,g,m),p=!0,v}function a(){return y=e(h,m),t.dependsOnOwnProps&&(g=t(n,m)),v=r(y,g,m)}function s(){return e.dependsOnOwnProps&&(y=e(h,m)),t.dependsOnOwnProps&&(g=t(n,m)),v=r(y,g,m)}function l(){var t=e(h,m),n=!f(t,y);return y=t,n&&(v=r(y,g,m)),v}function u(e,t){var r=!d(t,m),n=!c(e,h);return h=e,m=t,r&&n?a():r?s():n?l():v}var c=o.areStatesEqual,d=o.areOwnPropsEqual,f=o.areStatePropsEqual,p=!1,h=void 0,m=void 0,y=void 0,g=void 0,v=void 0;return function(e,t){return p?u(e,t):i(e,t)}}function a(e,t){var r=t.initMapStateToProps,a=t.initMapDispatchToProps,s=t.initMergeProps,l=n(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),u=r(e,l),c=a(e,l),d=s(e,l);return(l.pure?i:o)(u,c,d,e,l)}t.a=a;r(/*! ./verifySubselectors */"./node_modules/react-redux/es/connect/verifySubselectors.js")},"./node_modules/react-redux/es/connect/verifySubselectors.js":/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/verifySubselectors.js ***!
  \*******************************************************************/
/*! exports provided: default */
function(e,t,r){"use strict";r(/*! ../utils/warning */"./node_modules/react-redux/es/utils/warning.js")},"./node_modules/react-redux/es/connect/wrapMapToProps.js":/*!***************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/wrapMapToProps.js ***!
  \***************************************************************/
/*! exports provided: wrapMapToPropsConstant, getDependsOnOwnProps, wrapMapToPropsFunc */
/*! exports used: wrapMapToPropsConstant, wrapMapToPropsFunc */
function(e,t,r){"use strict";function n(e){return function(t,r){function n(){return o}var o=e(t,r);return n.dependsOnOwnProps=!1,n}}function o(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function i(e,t){return function(t,r){var n=(r.displayName,function(e,t){return n.dependsOnOwnProps?n.mapToProps(e,t):n.mapToProps(e)});return n.dependsOnOwnProps=!0,n.mapToProps=function(t,r){n.mapToProps=e,n.dependsOnOwnProps=o(e);var i=n(t,r);return"function"==typeof i&&(n.mapToProps=i,n.dependsOnOwnProps=o(i),i=n(t,r)),i},n}}t.a=n,t.b=i;r(/*! ../utils/verifyPlainObject */"./node_modules/react-redux/es/utils/verifyPlainObject.js")},"./node_modules/react-redux/es/index.js":/*!**********************************************!*\
  !*** ./node_modules/react-redux/es/index.js ***!
  \**********************************************/
/*! exports provided: Provider, createProvider, connectAdvanced, connect */
/*! all exports used */
function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(/*! ./components/Provider */"./node_modules/react-redux/es/components/Provider.js"),o=r(/*! ./components/connectAdvanced */"./node_modules/react-redux/es/components/connectAdvanced.js"),i=r(/*! ./connect/connect */"./node_modules/react-redux/es/connect/connect.js");r.d(t,"Provider",function(){return n.b}),r.d(t,"createProvider",function(){return n.a}),r.d(t,"connectAdvanced",function(){return o.a}),r.d(t,"connect",function(){return i.a})},"./node_modules/react-redux/es/utils/PropTypes.js":/*!********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/PropTypes.js ***!
  \********************************************************/
/*! exports provided: subscriptionShape, storeShape */
/*! exports used: storeShape, subscriptionShape */
function(e,t,r){"use strict";r.d(t,"b",function(){return i}),r.d(t,"a",function(){return a});var n=r(/*! prop-types */"./node_modules/prop-types/index.js"),o=r.n(n),i=o.a.shape({trySubscribe:o.a.func.isRequired,tryUnsubscribe:o.a.func.isRequired,notifyNestedSubs:o.a.func.isRequired,isSubscribed:o.a.func.isRequired}),a=o.a.shape({subscribe:o.a.func.isRequired,dispatch:o.a.func.isRequired,getState:o.a.func.isRequired})},"./node_modules/react-redux/es/utils/Subscription.js":/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/Subscription.js ***!
  \***********************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(){var e=[],t=[];return{clear:function(){t=i,e=i},notify:function(){for(var r=e=t,n=0;n<r.length;n++)r[n]()},get:function(){return t},subscribe:function(r){var n=!0;return t===e&&(t=e.slice()),t.push(r),function(){n&&e!==i&&(n=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(r),1))}}}}r.d(t,"a",function(){return s});var i=null,a={notify:function(){}},s=function(){function e(t,r,o){n(this,e),this.store=t,this.parentSub=r,this.onStateChange=o,this.unsubscribe=null,this.listeners=a}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=o())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=a)},e}()},"./node_modules/react-redux/es/utils/shallowEqual.js":/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/shallowEqual.js ***!
  \***********************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!==e&&t!==t}function o(e,t){if(n(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),o=Object.keys(t);if(r.length!==o.length)return!1;for(var a=0;a<r.length;a++)if(!i.call(t,r[a])||!n(e[r[a]],t[r[a]]))return!1;return!0}t.a=o;var i=Object.prototype.hasOwnProperty},"./node_modules/react-redux/es/utils/verifyPlainObject.js":/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/verifyPlainObject.js ***!
  \****************************************************************/
/*! exports provided: default */
function(e,t,r){"use strict";r(/*! lodash-es/isPlainObject */"./node_modules/lodash-es/isPlainObject.js"),r(/*! ./warning */"./node_modules/react-redux/es/utils/warning.js")},"./node_modules/react-redux/es/utils/warning.js":/*!******************************************************!*\
  !*** ./node_modules/react-redux/es/utils/warning.js ***!
  \******************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e);try{throw new Error(e)}catch(e){}}t.a=n},"./node_modules/react/cjs/react.production.min.js":/*!********************************************************!*\
  !*** ./node_modules/react/cjs/react.production.min.js ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){for(var t=arguments.length-1,r="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,n=0;n<t;n++)r+="&args[]="+encodeURIComponent(arguments[n+1]);throw t=Error(r+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."),t.name="Invariant Violation",t.framesToPop=1,t}function o(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||_}function i(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||_}function a(){}function s(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||_}function l(e,t,r,n,o,i,a){return{$$typeof:R,type:e,key:t,ref:r,props:a,_owner:i}}function u(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}function c(e,t,r,n){if(O.length){var o=O.pop();return o.result=e,o.keyPrefix=t,o.func=r,o.context=n,o.count=0,o}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function d(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function f(e,t,r,o){var i=typeof e;if("undefined"!==i&&"boolean"!==i||(e=null),null===e||"string"===i||"number"===i||"object"===i&&e.$$typeof===A)return r(o,e,""===t?"."+p(e,0):t),1;var a=0;if(t=""===t?".":t+":",Array.isArray(e))for(var s=0;s<e.length;s++){i=e[s];var l=t+p(i,s);a+=f(i,l,r,o)}else if("function"==typeof(l=j&&e[j]||e["@@iterator"]))for(e=l.call(e),s=0;!(i=e.next()).done;)i=i.value,l=t+p(i,s++),a+=f(i,l,r,o);else"object"===i&&(r=""+e,n("31","[object Object]"===r?"object with keys {"+Object.keys(e).join(", ")+"}":r,""));return a}function p(e,t){return"object"==typeof e&&null!==e&&null!=e.key?u(e.key):t.toString(36)}function h(e,t){e.func.call(e.context,t,e.count++)}function m(e,t,r){var n=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?y(e,n,r,b.thatReturnsArgument):null!=e&&(l.isValidElement(e)&&(e=l.cloneAndReplaceKey(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(x,"$&/")+"/")+r)),n.push(e))}function y(e,t,r,n,o){var i="";null!=r&&(i=(""+r).replace(x,"$&/")+"/"),t=c(t,i,n,o),null==e||f(e,"",m,t),d(t)}var g=r(/*! object-assign */"./node_modules/object-assign/index.js"),v=r(/*! fbjs/lib/emptyObject */"./node_modules/fbjs/lib/emptyObject.js");r(/*! fbjs/lib/invariant */"./node_modules/fbjs/lib/invariant.js");var b=r(/*! fbjs/lib/emptyFunction */"./node_modules/fbjs/lib/emptyFunction.js"),_={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};o.prototype.isReactComponent={},o.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&n("85"),this.updater.enqueueSetState(this,e,t,"setState")},o.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},a.prototype=o.prototype;var E=i.prototype=new a;E.constructor=i,g(E,o.prototype),E.isPureReactComponent=!0;var T=s.prototype=new a;T.constructor=s,g(T,o.prototype),T.unstable_isAsyncReactComponent=!0,T.render=function(){return this.props.children};var w={Component:o,PureComponent:i,AsyncComponent:s},S={current:null},C=Object.prototype.hasOwnProperty,R="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,k={key:!0,ref:!0,__self:!0,__source:!0};l.createElement=function(e,t,r){var n,o={},i=null,a=null,s=null,u=null;if(null!=t)for(n in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),s=void 0===t.__self?null:t.__self,u=void 0===t.__source?null:t.__source,t)C.call(t,n)&&!k.hasOwnProperty(n)&&(o[n]=t[n]);var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){for(var d=Array(c),f=0;f<c;f++)d[f]=arguments[f+2];o.children=d}if(e&&e.defaultProps)for(n in c=e.defaultProps)void 0===o[n]&&(o[n]=c[n]);return l(e,i,a,s,u,S.current,o)},l.createFactory=function(e){var t=l.createElement.bind(null,e);return t.type=e,t},l.cloneAndReplaceKey=function(e,t){return l(e.type,t,e.ref,e._self,e._source,e._owner,e.props)},l.cloneElement=function(e,t,r){var n=g({},e.props),o=e.key,i=e.ref,a=e._self,s=e._source,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=S.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(d in t)C.call(t,d)&&!k.hasOwnProperty(d)&&(n[d]=void 0===t[d]&&void 0!==c?c[d]:t[d])}var d=arguments.length-2;if(1===d)n.children=r;else if(1<d){c=Array(d);for(var f=0;f<d;f++)c[f]=arguments[f+2];n.children=c}return l(e.type,o,i,a,s,u,n)},l.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===R};var j="function"==typeof Symbol&&Symbol.iterator,A="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,x=/\/+/g,O=[],P={forEach:function(e,t,r){if(null==e)return e;t=c(null,null,t,r),null==e||f(e,"",h,t),d(t)},map:function(e,t,r){if(null==e)return e;var n=[];return y(e,n,null,t,r),n},count:function(e){return null==e?0:f(e,"",b.thatReturnsNull,null)},toArray:function(e){var t=[];return y(e,t,null,b.thatReturnsArgument),t}};e.exports={Children:{map:P.map,forEach:P.forEach,count:P.count,toArray:P.toArray,only:function(e){return l.isValidElement(e)||n("143"),e}},Component:w.Component,PureComponent:w.PureComponent,unstable_AsyncComponent:w.AsyncComponent,createElement:l.createElement,cloneElement:l.cloneElement,isValidElement:l.isValidElement,createFactory:l.createFactory,version:"16.0.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:g}}},"./node_modules/react/index.js":/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";e.exports=r(/*! ./cjs/react.production.min.js */"./node_modules/react/cjs/react.production.min.js")},"./node_modules/redux/es/applyMiddleware.js":/*!**************************************************!*\
  !*** ./node_modules/redux/es/applyMiddleware.js ***!
  \**************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return function(r,n,a){var s=e(r,n,a),l=s.dispatch,u=[],c={getState:s.getState,dispatch:function(e){return l(e)}};return u=t.map(function(e){return e(c)}),l=o.a.apply(void 0,u)(s.dispatch),i({},s,{dispatch:l})}}}t.a=n;var o=r(/*! ./compose */"./node_modules/redux/es/compose.js"),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}},"./node_modules/redux/es/bindActionCreators.js":/*!*****************************************************!*\
  !*** ./node_modules/redux/es/bindActionCreators.js ***!
  \*****************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t){return function(){return t(e.apply(void 0,arguments))}}function o(e,t){if("function"==typeof e)return n(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var r=Object.keys(e),o={},i=0;i<r.length;i++){var a=r[i],s=e[a];"function"==typeof s&&(o[a]=n(s,t))}return o}t.a=o},"./node_modules/redux/es/combineReducers.js":/*!**************************************************!*\
  !*** ./node_modules/redux/es/combineReducers.js ***!
  \**************************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(e,t){var r=t&&t.type;return"Given action "+(r&&'"'+r.toString()+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function o(e){Object.keys(e).forEach(function(t){var r=e[t];if(void 0===r(void 0,{type:a.a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}function i(e){for(var t=Object.keys(e),r={},i=0;i<t.length;i++){var a=t[i];"function"==typeof e[a]&&(r[a]=e[a])}var s=Object.keys(r),l=void 0;try{o(r)}catch(e){l=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(l)throw l;for(var o=!1,i={},a=0;a<s.length;a++){var u=s[a],c=r[u],d=e[u],f=c(d,t);if(void 0===f){var p=n(u,t);throw new Error(p)}i[u]=f,o=o||f!==d}return o?i:e}}t.a=i;var a=r(/*! ./createStore */"./node_modules/redux/es/createStore.js");r(/*! lodash-es/isPlainObject */"./node_modules/lodash-es/isPlainObject.js"),r(/*! ./utils/warning */"./node_modules/redux/es/utils/warning.js")},"./node_modules/redux/es/compose.js":/*!******************************************!*\
  !*** ./node_modules/redux/es/compose.js ***!
  \******************************************/
/*! exports provided: default */
/*! exports used: default */
function(e,t,r){"use strict";function n(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}t.a=n},"./node_modules/redux/es/createStore.js":/*!**********************************************!*\
  !*** ./node_modules/redux/es/createStore.js ***!
  \**********************************************/
/*! exports provided: ActionTypes, default */
/*! exports used: ActionTypes, default */
function(e,t,r){"use strict";function n(e,t,r){function i(){g===y&&(g=y.slice())}function l(){return m}function u(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var t=!0;return i(),g.push(e),function(){if(t){t=!1,i();var r=g.indexOf(e);g.splice(r,1)}}}function c(e){if(!Object(o.a)(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(v)throw new Error("Reducers may not dispatch actions.");try{v=!0,m=h(m,e)}finally{v=!1}for(var t=y=g,r=0;r<t.length;r++){(0,t[r])()}return e}function d(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");h=e,c({type:s.INIT})}function f(){var e,t=u;return e={subscribe:function(e){function r(){e.next&&e.next(l())}if("object"!=typeof e)throw new TypeError("Expected the observer to be an object.");return r(),{unsubscribe:t(r)}}},e[a.a]=function(){return this},e}var p;if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(n)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var h=e,m=t,y=[],g=y,v=!1;return c({type:s.INIT}),p={dispatch:c,subscribe:u,getState:l,replaceReducer:d},p[a.a]=f,p}r.d(t,"a",function(){return s}),t.b=n;var o=r(/*! lodash-es/isPlainObject */"./node_modules/lodash-es/isPlainObject.js"),i=r(/*! symbol-observable */"./node_modules/symbol-observable/index.js"),a=r.n(i),s={INIT:"@@redux/INIT"}},"./node_modules/redux/es/index.js":/*!****************************************!*\
  !*** ./node_modules/redux/es/index.js ***!
  \****************************************/
/*! exports provided: createStore, combineReducers, bindActionCreators, applyMiddleware, compose */
/*! all exports used */
function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(/*! ./createStore */"./node_modules/redux/es/createStore.js"),o=r(/*! ./combineReducers */"./node_modules/redux/es/combineReducers.js"),i=r(/*! ./bindActionCreators */"./node_modules/redux/es/bindActionCreators.js"),a=r(/*! ./applyMiddleware */"./node_modules/redux/es/applyMiddleware.js"),s=r(/*! ./compose */"./node_modules/redux/es/compose.js");r(/*! ./utils/warning */"./node_modules/redux/es/utils/warning.js");r.d(t,"createStore",function(){return n.b}),r.d(t,"combineReducers",function(){return o.a}),r.d(t,"bindActionCreators",function(){return i.a}),r.d(t,"applyMiddleware",function(){return a.a}),r.d(t,"compose",function(){return s.a})},"./node_modules/redux/es/utils/warning.js":/*!************************************************!*\
  !*** ./node_modules/redux/es/utils/warning.js ***!
  \************************************************/
/*! exports provided: default */
function(e,t,r){"use strict"},"./node_modules/style-loader/lib/addStyles.js":/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){function n(e,t){for(var r=0;r<e.length;r++){var n=e[r],o=h[n.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](n.parts[i]);for(;i<n.parts.length;i++)o.parts.push(c(n.parts[i],t))}else{for(var a=[],i=0;i<n.parts.length;i++)a.push(c(n.parts[i],t));h[n.id]={id:n.id,refs:1,parts:a}}}}function o(e,t){for(var r=[],n={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s=i[1],l=i[2],u=i[3],c={css:s,media:l,sourceMap:u};n[a]?n[a].parts.push(c):r.push(n[a]={id:a,parts:[c]})}return r}function i(e,t){var r=y(e.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=b[b.length-1];if("top"===e.insertAt)n?n.nextSibling?r.insertBefore(t,n.nextSibling):r.appendChild(t):r.insertBefore(t,r.firstChild),b.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");r.appendChild(t)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=b.indexOf(e);t>=0&&b.splice(t,1)}function s(e){var t=document.createElement("style");return e.attrs.type="text/css",u(t,e.attrs),i(e,t),t}function l(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",u(t,e.attrs),i(e,t),t}function u(e,t){Object.keys(t).forEach(function(r){e.setAttribute(r,t[r])})}function c(e,t){var r,n,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var u=v++;r=g||(g=s(t)),n=d.bind(null,r,u,!1),o=d.bind(null,r,u,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=l(t),n=p.bind(null,r,t),o=function(){a(r),r.href&&URL.revokeObjectURL(r.href)}):(r=s(t),n=f.bind(null,r),o=function(){a(r)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}function d(e,t,r,n){var o=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function f(e,t){var r=t.css,n=t.media;if(n&&e.setAttribute("media",n),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}function p(e,t,r){var n=r.css,o=r.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(n=_(n)),o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([n],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var h={},m=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),y=function(e){var t={};return function(r){return void 0===t[r]&&(t[r]=e.call(this,r)),t[r]}}(function(e){return document.querySelector(e)}),g=null,v=0,b=[],_=r(/*! ./urls */"./node_modules/style-loader/lib/urls.js");e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");t=t||{},t.attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=m()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var r=o(e,t);return n(r,t),function(e){for(var i=[],a=0;a<r.length;a++){var s=r[a],l=h[s.id];l.refs--,i.push(l)}if(e){n(o(e,t),t)}for(var a=0;a<i.length;a++){var l=i[a];if(0===l.refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete h[l.id]}}}};var E=function(){var e=[];return function(t,r){return e[t]=r,e.filter(Boolean).join("\n")}}()},"./node_modules/style-loader/lib/urls.js":/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var r=t.protocol+"//"+t.host,n=r+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o))return e;var i;return i=0===o.indexOf("//")?o:0===o.indexOf("/")?r+o:n+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")"})}},"./node_modules/symbol-observable/index.js":/*!*************************************************!*\
  !*** ./node_modules/symbol-observable/index.js ***!
  \*************************************************/
/*! no static exports found */
/*! exports used: default */
function(e,t,r){e.exports=r(/*! ./lib/index */"./node_modules/symbol-observable/lib/index.js")},"./node_modules/symbol-observable/lib/index.js":/*!*****************************************************!*\
  !*** ./node_modules/symbol-observable/lib/index.js ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";(function(e,n){Object.defineProperty(t,"__esModule",{value:!0});var o,i=r(/*! ./ponyfill */"./node_modules/symbol-observable/lib/ponyfill.js"),a=function(e){return e&&e.__esModule?e:{default:e}}(i);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:n;var s=(0,a.default)(o);t.default=s}).call(t,r(/*! ./../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),r(/*! ./../../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/symbol-observable/lib/ponyfill.js":/*!********************************************************!*\
  !*** ./node_modules/symbol-observable/lib/ponyfill.js ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){"use strict";function n(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},"./node_modules/webpack/buildin/global.js":/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},"./node_modules/webpack/buildin/module.js":/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},0:/*!****************************************************!*\
  !*** multi react-hot-loader/patch ./cams/index.js ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */
function(e,t,r){r(/*! react-hot-loader/patch */"./node_modules/react-hot-loader/patch.js"),e.exports=r(/*! ./cams/index.js */"./cams/index.js")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,